    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-code.gc
    ;; name in dgo: mod-code
    ;; dgos: TODO



    #|
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
What are the commands to set your Green Eco or Gun Mod?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEAPON MODS: Each weapon mod will come with the option boolean, and an integer (which is referred in example as V) storing from 1-4 defining the selected gun. 1=Yellow, 2=Red, 3=Blue, 4=Dark
All of these changes are done in target-gun.gc
Example:
(set! rapid-fire-option #t)
(set! rapid-fire-int V)
------------------------------------------------------------------------------------------------------------------------------------------------------------------

rapid-fire-option                 Fire rate increased dramatically
rapid-fire-int

double-tap-option                 Every shot has a chance to fire 2
double-tap-int

infinite-range-option             Every shot follows newtons law              (not working)
infinite-range-int                (meaning every shot has a max range of 999)

big-shot-option                   bigger bullets, bigger hitbox, right?       (not working)
big-shot-int

pm-extra-shot-option              Every shot has a chance to fire a peacemaker shot :)
pm-extra-shot-int

predator-shot-option              Every shot has a good chance to spawn a predator shot with it
predator-shot-int

Every guard that spawns will have a chance to drop a Weapon Mod, alongside some other enemies for legendaries.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
GREEN ECO MODS: Each mod works differently, but I try to keep all of it on a toggle boolean.
Example: (set! peacemaker-ability #t)
------------------------------------------------------------------------------------------------------------------------------------------------------------------

peacemaker-ability                at any given points in the game, jak has a chance to fire 100 peacemaker shots
;                                 but any time you anger the guards, its max alert level

tp-fb                             upon death, there's a 0.01% chance per death frame that jak will tp to the final boss.
;                                 BUT the final boss is extremely unfair, and if you die you're sent back to your original area.
------------------------------------------------------------------------------------------------------------------------------------------------------------------

















;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
YOU CAN READ THIS PART YOU WANT, YOU DONT HAVE TO :) These are ideas of mine to keep track of. Note that some are dated and this is more of a refernece for me..
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Upon loading for the first time in fortress, you will be given the option to choose one or to choose none.
then upon choosing, it saves a value attached to the option, a 1 or 0, to the save file directly
then an updating code block will check for a 1 or 0 and will actively set the corresponding mod a #t or #f
It is required to choose one to gain access to the weapon mods menu. (IE if all 0, then the setting for gun mods in the secrets menu does not appear)

(define traffic-nuke-option #f) ;;this is defined for if its over all chosen
(define traffic-nuke-save 0) ;;this is defined to set the gun for the option

jak does has a chance to cause 50 peacemaker shots to ring out in all directions.
But bosses must be one hit.

(define trip-metalheads-option #f)
(define trip-metalheads-save 0)
Any input has a very small chance for Jak to get hurt with 0 damage,
but every time that happens you gain 50 metal head gems

(define input-teleport-option #f)
(define input-teleport-save 0)
each time jak dies, it has a small chance to respawn jak to the final boss checkpoint.
but the final boss fight is extremely unfair.
the checkpoint is not stored or saved, nor is the save accessible during bossfight.
essentially you tp to boss, have a fun time in hell, die, then come back to your original checkpoint.

(define ambush-tricks-option #f)
(define ambush-tricks-save 0)
any input rolls between 1-600. If it's 1, ambush jak.
but all hoverboard tricks give you a big boost in momentum
ambush: 6 cloaked metalheads spawn in a radius around jak. (it can be a static position honestly, makes it more hilarious)

(define damage-buff-option #f)
(define dmaage-buff-save 0)
you get the damage buff at this very moment
but all enemies gain +15 health (1 hit enemies and bosses not included)

(define hell-mode-option #f)
(define hell-mode-save 0)
once a hero mode save is made, all options listed above are active at once in that save,
but you get legendary gun mods :) 





GUNMOD Shark (rare)
Chance not to consume ammo

GUNMOD Mehrunes (legendary)
1/25 chance to instant kill

GUNMOD Empower (rare)
Deal even more base damage off this weapon
------------------------------------------------------------------------------------------------------------------------------------------------------------------


CURRENT BUGS:
- GE PEACEMAKER_ABILITY: this whole thing should honestly be chanced by shooting any weapon instead of each frame.
- GE PEACEMAKER_ABILITY: peacemaker weapon has to be available for peacemaker-ability to not crash the game upon trigger
- GE PEACEMAKER_ABILITY: instead of alerting guards to level 5, make every boss 1 hit
- GM PRED/GUARD SHOT: firing the guard or predator shot sets jak invulnerable for 3 frames until I can figure a way to not damage jak when firing
- GM PRED/GUARD SHOT: making jak invulnerable in this state takes away all the other game-secrets

|#


#|;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Var Definitions     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;|#
(define weapon-mod-toggle #f)
(define wm-drop #f) ;Turns on weapon mods dropping off the next spawned enemy that can drop mods.
(define wm-leg #f)
(define wm-roll-rand #f)
(define wm-roll-numb 0)
(define inv-frames? #f)

(define test-option #f)
(define mod-all-yellow #f)
(define mod-all-blue #f)
(define mod-all-red #f)
(define mod-all-dark #f)
(define mod-all-green #f)
(define mod-all-off #t)
(define mod-turning-off #f)

(define peacemaker-ability #f)  ; Chance to encumber in peacemaker shots, bosses are 1 hit
(define pm-shot-counter 0)
(define-extern gun-dark-present? symbol)
(define pm-offset-y (new 'static 'vector :x (meters 0) :y (meters 2) :z (meters 0) :w 1.0))

(define tp-fb #f) ; Chance to teleport for final boss
(define start-tp #f)
(define new-game-s? #f)
(define frame-count 0)
(define start-frame-count #f)
(define going-back-tp #f)
(define stored-cp? #f)





(deftype turret-shot (guard-shot) ;i only declare this now because of the script load order.
  ((hit-pos vector :inline :offset-assert 496)
   )
  :heap-base #x180
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  )


;WEAPON MODS!
;This block below defines the obj for weapon mods dropping from enemies.

(defmethod initialize-effects ammo-collectable ((obj ammo-collectable) (arg0 pickup-type))
  (set! (-> obj fact pickup-type) arg0)
  (case arg0
    (((pickup-type ammo-yellow))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-yellow" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 2.5 2.5 2.5 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 108))
     )
    (((pickup-type ammo-red))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-red" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 4.0 4.0 4.0 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 102))
     )
    (((pickup-type ammo-blue))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-blue" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 4.0 4.0 4.0 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 98))
     )
    (((pickup-type ammo-dark))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-dark" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 3.0 3.0 3.0 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 83))
     )
    (((pickup-type gun-yellow))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-gun-yellow-up" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 3.0 3.0 3.0 1.0)
     (logclear! (-> obj flags) (collectable-flag fadeout))
     (let ((v1-34 (-> obj node-list data)))
       (set! (-> v1-34 0 param0) (the-as (function cspace transformq none) cspace<-transformq+trans!))
       (set! (-> v1-34 0 param1) (the-as basic (-> obj root trans)))
       (set! (-> v1-34 0 param2) (the-as basic (-> obj extra-trans)))
       )
     (set-vector! (-> obj extra-trans) 0.0 1638.4 0.0 1.0)
     )
    (((pickup-type gun-dark))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-gun-dark-up" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 3.0 3.0 3.0 1.0)
     (logclear! (-> obj flags) (collectable-flag fadeout))
     )
    (((pickup-type board))
     (process-entity-set! obj (the-as entity #f))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-board" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (ja-channel-set! 1)
     (let ((v1-48 (-> obj skel root-channel 0)))
       (set! (-> v1-48 frame-group) (the-as art-joint-anim (-> obj draw art-group data 3)))
       )
     (set-vector! (-> obj root scale) 2.0 2.0 2.0 1.0)
     (let ((v1-52 (-> obj node-list data)))
       (set! (-> v1-52 0 param0) (the-as (function cspace transformq none) cspace<-transformq+trans!))
       (set! (-> v1-52 0 param1) (the-as basic (-> obj root trans)))
       (set! (-> v1-52 0 param2) (the-as basic (-> obj extra-trans)))
       )
     (set-vector! (-> obj extra-trans) 0.0 2048.0 0.0 1.0)
     (logclear! (-> obj flags) (collectable-flag fadeout))



     (when (not (= (-> (level-get-target-inside *level*) name) 'skatea)) ;simple, if not in stadium, the hoverboard obj will not act like a weapon mod.
      (set! (-> obj fact) (new 'process 'fact-info obj (pickup-type gem) 10.0))
      (set! wm-roll-rand #t) ;this will execute every time a weapon mod is dropped. I have not figured out where to put this upon pickup
     )




     )
    (((pickup-type shield))
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 80))
     )
    (((pickup-type trick-point))
     )
    )
  (none)
  )
 #|;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    Code starts here. (YES! I know, it's really... REALLY bad!)    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|#

    (defun runs-every-frame ()

;WEAPON MOD SPAWNS
;Once one is spawned it unlocks it for you. Later ill figure how to do it upon pickup,
;but for now you'll have to set your own weapon, until Mod-Base updates with the misc menu in "game-options"


(when (= wm-roll-rand #t) ;this runs the roll for a random weapon mod to be unlocked.

  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 1))
    (set! rapid-fire-option #t)
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (print "Rapid Fire Acquired, please choose gun via (set! rapid-fire-int (integer 1 through 4))")
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 2))
    (set! double-tap-option #t)
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (print "Double Tap Acquired, please choose gun via (set! double-tap-int (integer 1 through 4))")
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 3))
    (set! infinite-range-option #t)
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (print "Infintie Range Acquired, please choose gun via (set! infinite-range-int (integer 1 through 4))")
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 4))
    (set! pm-extra-shot-option #t)
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (print "Chanced Peacemaker Shot Acquired, please choose gun via (set! pm-extra-shot-int (integer 1 through 4))")
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 5))
    (set! predator-shot-option #t)
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (print "Metal Head Shot Acquired, please choose gun via (set! predator-shot-int (integer 1 through 4))")
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 6))
    (set! guard-shot-option #t)
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (print "Guard Shot Acquired, please choose gun via (set! guard-shot-int (integer 1 through 4))")
  )
  (when (= wm-roll-rand #t)
    (+! wm-roll-numb 1)
    (when (> wm-roll-numb 6)
      (set! wm-roll-numb 0)
    )
  )

)

;(set! predator-shot-option #t)(set! predator-shot-int 1)
(when (= inv-frame-start #t) ;This counts invulnerable frames for when jak fires a projectile that could damage him.
  (+! inv-frame-counter 1)
  (when (> inv-frame-counter 2)
    (set! (-> *game-info* secrets) (game-secrets ))
    (set! inv-frame-counter 0)
    (set! inv-frame-start #f)
    ;(set! (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
  )
)

;(set! guard-shot-option #t)(set! guard-shot-int 1)
(when (= inv-frame-start-g #t) ;This counts invulnerable frames for when jak fires a projectile that could damage him.
  (+! inv-frame-counter-g 1)
  (when (> inv-frame-counter-g 2)
    (set! (-> *game-info* secrets) (game-secrets ))
    (set! inv-frame-counter-g 0)
    (set! inv-frame-start-g #f)
    ;(set! (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))
  )
)







    (when (= mod-all-yellow #t) ;these chunks will set all gun mods to one weapon. Be careful lol         EXAMPLE:         (set! mod-all-yellow #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 1)
      (set! double-tap-option #t)
      (set! double-tap-int 1)
      (set! infinite-range-option #t)
      (set! infinite-range-int 1)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 1)
      (set! predator-shot-option #t)
      (set! predator-shot-int 1)
      (set! guard-shot-option #t)
      (set! guard-shot-int 1)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-yellow #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-blue #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 3)
      (set! double-tap-option #t)
      (set! double-tap-int 3)
      (set! infinite-range-option #t)
      (set! infinite-range-int 3)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 3)
      (set! predator-shot-option #t)
      (set! predator-shot-int 3)
      (set! guard-shot-option #t)
      (set! guard-shot-int 3)
      (set! mod-all-off #f)
      (set! mod-all-yellow #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-blue #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-red #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 2)
      (set! double-tap-option #t)
      (set! double-tap-int 2)
      (set! infinite-range-option #t)
      (set! infinite-range-int 2)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 2)
      (set! predator-shot-option #t)
      (set! predator-shot-int 2)
      (set! guard-shot-option #t)
      (set! guard-shot-int 2)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-yellow #f)
      (set! mod-all-dark #f)
      (set! mod-all-red #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-dark #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 4)
      (set! double-tap-option #t)
      (set! double-tap-int 4)
      (set! infinite-range-option #t)
      (set! infinite-range-int 4)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 4)
      (set! predator-shot-option #t)
      (set! predator-shot-int 4)
      (set! guard-shot-option #t)
      (set! guard-shot-int 4)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-yellow #f)
      (set! mod-all-dark #f)
      (set! mod-turning-off #t)
    )
    (when (and (= mod-all-off #t) (= mod-turning-off #t))
      (set! rapid-fire-option #f)
      (set! rapid-fire-int 0)
      (set! double-tap-option #f)
      (set! double-tap-int 0)
      (set! infinite-range-option #f)
      (set! infinite-range-int 0)
      (set! pm-extra-shot-option #f)
      (set! pm-extra-shot-int 0)
      (set! predator-shot-option #f)
      (set! predator-shot-int 0)
      (set! guard-shot-option #t)
      (set! guard-shot-int 0)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-yellow #f)
      (set! mod-turning-off #f)
    )


    

      (when (and (= test-option #t) (rand-vu-percent? 0.05)) ;debug projectile, you can enable to do absolutely nothing but have a chance to shoot a projectile every frame or so
        (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
          (let ((vec1 (new-stack-vector0))
              (off (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters -3) :w 1.0)))
                  (vector-copy! (-> gp-0 pos) (vector+! vec1 (-> *target* gun fire-point) off))
                  (set! (-> gp-0 ent) (-> *target* entity))
                  (set! (-> gp-0 charge) 1.0)
                  (set! (-> gp-0 options) (projectile-options account-for-target-velocity proj-options-8000))
                  (set! (-> gp-0 pos quad) (-> vec1 quad))
                  (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
                  (set! (-> gp-0 notify-handle) (the-as handle #f))
                  (set! (-> gp-0 owner-handle) (the-as handle #f))
                  (set! (-> gp-0 ignore-handle) (process->handle *target*))
                  (let* ((v1-9 *game-info*)
                    (a0-9 (+ (-> v1-9 attack-id) 1))
                        )
                    (set! (-> v1-9 attack-id) a0-9)
                    (set! (-> gp-0 attack-id) a0-9)
          )
          )
    (spawn-projectile turret-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
        )
      )





;                    Peacemaker Ability
;---------------------------------------------------------
;(vector-rotate-y! svec-pos svec-pos 3.0) ;possible line for enlarging the radius of gun-point
      
      (if (and (and (= peacemaker-ability #t)(rand-vu-percent? 0.75)(= pm-shot-trigger #t))) ;
        (let ((svec-pos (new-stack-vector0))
        (tpoz (-> *target* gun fire-point)))
        (vector-rotate-y! svec-pos svec-pos 90.0)
          (let ((s5-0 (-> *target* gun))
            (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
            )
            (vector-copy! (-> gp-0 pos) (vector+! svec-pos tpoz pm-offset-y))
            (set! (-> gp-0 ent) (-> *target* entity))
            (set! (-> gp-0 charge) (-> s5-0 fire-charge))
            (set! (-> gp-0 options) (projectile-options))
            (set! (-> gp-0 pos quad) (-> svec-pos quad))
            (set! (-> gp-0 vel quad) (-> svec-pos quad))
            (set! (-> gp-0 notify-handle) (the-as handle #f))
            (set! (-> gp-0 owner-handle) (the-as handle #f))
            (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
            (set! (-> gp-0 timeout) (seconds 4))
            (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
              (when v0-1
                (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
                (+! pm-shot-counter 1)
                (when (= pm-shot-counter 99)
                  (set! pm-shot-trigger #f)
                  (set! pm-shot-counter 0)
                  (if (= gun-dark-present? #t)
                    (set! (-> *game-info* features) (game-feature gun board sidekick gun-dark gun-yellow gun-red gun-blue))
                  )
                
              )
            )
            v0-1
          )
        )
      )
   )
      
;                    Teleport to final boss
;---------------------------------------------------------
      ;INFO
#|tp-fb is the whole TeleportJakToFinalBoss Mod.
All of the variables set are for time-based events based off of frames |#


        (when (= start-frame-count #t)
          (+! frame-count 1)
        )
        (when (and (and (and (= stored-cp? #f)(= tp-fb #t)(rand-vu-percent? 0.0006)(< (-> *target* fact health) 1)))) ;looks for teleport percentage upon death, and if so, auto-save.
          (set! start-frame-count #t)
          (initialize! *game-info* 'game (the-as game-save #f) (the-as string #f))
          (set! stored-cp? #t)
          (set! new-game-s? #t)
          (print "started teleporting")
        )
        (when (and (and (= frame-count 20)(= new-game-s? #t)(= stored-cp? #t)));starts after a little big, teleports jak to FB and sets game task
          (start 'play (get-continue-by-name *game-info* "nestb-boss-pit"))
          (play-task (game-task nest-boss) 'debug #f)
          (set! start-frame-count #f)
          (set! frame-count 0)
          (set! going-back-tp #t)
          (print "teleport success")
        )
        (when (and (and (and (= going-back-tp #t)(= start-frame-count #f)(= tp-fb #t)(< (-> *target* fact health) 1)))) ;starts when jak dies again, while in the final boss stage
          (set! start-frame-count #t)
          (set! new-game-s? #f)
          (print "started frame-count for game-save-load")
        )
        (when (and (= frame-count 120)(= going-back-tp #t)) ;loads the save you had after 120 frames of death
          (auto-save-command 'restore 0 0 *default-pool* #f)
          (print "crash?")
        )
        (when (and (= going-back-tp #t)(= frame-count 130)) ;resets everything back to original state 10 frames after the game-load, to avoid crashes.
          (set! stored-cp? #f)
          (set! going-back-tp #f)
          (set! start-frame-count #f)
          (set! frame-count 0)
          (print "It worked!! POGGERS!!!")
        )























    
      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      

      (none)
      )

    (defun runs-on-task-close ()
    

      (none)
      )
;-------------------------------------------- GREEN ECO MODS!

;-------------------------------------------- WEAPON MODS!

;--------------------------------------------

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )



    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          (start 'play (get-continue-by-name *game-info* "nestb-start"))
          )
        (('blackout)
          (set! start-tp #t)
          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#











