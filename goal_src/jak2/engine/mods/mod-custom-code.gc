    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun load-lvl ((idx0 symbol) (idx1 symbol) (idx2 symbol) (idx3 symbol) (idx4 symbol) (idx5 symbol))
  "doc-string"
        (let ((a1-0 (new 'stack-no-clear 'array 'symbol 6)))
          (set! (-> a1-0 5) idx5)
          (set! (-> a1-0 4) idx4)
          (set! (-> a1-0 3) idx3)
          (set! (-> a1-0 2) idx2)
          (set! (-> a1-0 1) idx1)
          (set! (-> a1-0 0) idx0)
          (want-levels *load-state* a1-0)
          (dotimes (i 5)
            (if (-> a1-0 i)
              (want-display-level *load-state* (-> a1-0 i) 'display)
            )
          )
        )
  )

(define *closest-sphere-pos-global* (new 'static 'vector :x (meters   -5143243243248.5894) :y (meters     -25435435435.2520) :z (meters   -55435435345487.5171)))
(define *wanted-level* 'NA)
;; (define-extern *spots-list* (array (array vector)))
;; (define-extern *beach-spots* (array vector))
;; (define *spots-list* (new 'static 'boxed-array :type (array vector)
;; *beach-spots*
;; *training-spots*
;; *firecanyon-spots*
;; ))

(define *beach-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters   -518.5894) :y (meters     -2.2520) :z (meters   -587.5171))
(new 'static 'vector :x (meters   -517.3105) :y (meters     72.6228) :z (meters   -586.3430))
(new 'static 'vector :x (meters   -436.6849) :y (meters     -2.5174) :z (meters   -446.1119))
(new 'static 'vector :x (meters   -344.3086) :y (meters     37.1770) :z (meters   -305.7546))
(new 'static 'vector :x (meters   -188.0824) :y (meters     19.5986) :z (meters    -92.9014))
(new 'static 'vector :x (meters   -169.0047) :y (meters     -1.4734) :z (meters      2.1913))
(new 'static 'vector :x (meters   -156.7722) :y (meters     -2.0998) :z (meters     38.7194))
(new 'static 'vector :x (meters    -85.7674) :y (meters     18.7076) :z (meters    -11.3204))
(new 'static 'vector :x (meters    -96.4078) :y (meters     33.9571) :z (meters    -49.9603))
(new 'static 'vector :x (meters    -97.0936) :y (meters     40.1965) :z (meters    -75.1525))
(new 'static 'vector :x (meters   -106.7269) :y (meters     18.5956) :z (meters   -106.0645))
(new 'static 'vector :x (meters    -94.5094) :y (meters     59.0802) :z (meters   -115.2233))
(new 'static 'vector :x (meters    -87.5591) :y (meters     60.1843) :z (meters   -143.2593))
(new 'static 'vector :x (meters    -86.5432) :y (meters     59.8903) :z (meters   -155.9765))
(new 'static 'vector :x (meters    -80.7470) :y (meters     59.7320) :z (meters   -174.6727))
(new 'static 'vector :x (meters    -77.0878) :y (meters     60.6320) :z (meters   -189.9653))
(new 'static 'vector :x (meters    -75.5405) :y (meters     64.0370) :z (meters   -197.8434))
(new 'static 'vector :x (meters    -73.2805) :y (meters     67.9166) :z (meters   -209.0924))
(new 'static 'vector :x (meters    -67.8661) :y (meters     58.6624) :z (meters   -220.4945))
(new 'static 'vector :x (meters    -60.4111) :y (meters     49.0026) :z (meters   -225.2872))
(new 'static 'vector :x (meters    -53.9826) :y (meters     51.2169) :z (meters   -238.0045))
(new 'static 'vector :x (meters    -51.2306) :y (meters     56.8585) :z (meters   -245.0872))
(new 'static 'vector :x (meters    -49.5632) :y (meters     62.8085) :z (meters   -255.3618))
(new 'static 'vector :x (meters    -48.0394) :y (meters     64.0789) :z (meters   -264.0793))
(new 'static 'vector :x (meters    -45.7576) :y (meters     63.2626) :z (meters   -273.2056))
(new 'static 'vector :x (meters    -43.4786) :y (meters     61.3603) :z (meters   -280.3343))
(new 'static 'vector :x (meters    -40.9157) :y (meters     64.6492) :z (meters   -289.0500))
(new 'static 'vector :x (meters    -39.1096) :y (meters     62.3526) :z (meters   -295.9208))
(new 'static 'vector :x (meters    -35.0521) :y (meters     65.2294) :z (meters   -305.6553))
(new 'static 'vector :x (meters    -31.3408) :y (meters     56.9960) :z (meters   -313.0427))
(new 'static 'vector :x (meters    -27.3045) :y (meters     58.1711) :z (meters   -321.0165))
(new 'static 'vector :x (meters    -23.8740) :y (meters     62.2053) :z (meters   -325.9125))
(new 'static 'vector :x (meters    -21.6430) :y (meters     67.9469) :z (meters   -334.3872))
(new 'static 'vector :x (meters    -19.5873) :y (meters     64.4808) :z (meters   -340.0077))
(new 'static 'vector :x (meters    -16.3943) :y (meters     69.2057) :z (meters   -346.1042))
(new 'static 'vector :x (meters    -16.5682) :y (meters     58.8640) :z (meters   -354.4945))
(new 'static 'vector :x (meters    -17.0810) :y (meters     52.2390) :z (meters   -361.9212))
(new 'static 'vector :x (meters    -16.2237) :y (meters     57.9474) :z (meters   -370.8637))
(new 'static 'vector :x (meters    -15.9058) :y (meters     48.8601) :z (meters   -379.0474))
(new 'static 'vector :x (meters    -15.9308) :y (meters     48.7434) :z (meters   -386.6629))
(new 'static 'vector :x (meters    -15.1304) :y (meters     53.2935) :z (meters   -393.5634))
(new 'static 'vector :x (meters    -15.2491) :y (meters     58.0601) :z (meters   -400.8444))
(new 'static 'vector :x (meters    -16.4714) :y (meters     59.1661) :z (meters   -408.2398))
(new 'static 'vector :x (meters    -18.0237) :y (meters     54.5078) :z (meters   -414.8401))
(new 'static 'vector :x (meters    -19.5683) :y (meters     53.9912) :z (meters   -421.6245))
(new 'static 'vector :x (meters    -20.4246) :y (meters     47.6912) :z (meters   -429.5385))
(new 'static 'vector :x (meters    -20.3321) :y (meters     40.7412) :z (meters   -438.4712))
(new 'static 'vector :x (meters    -20.7827) :y (meters     38.3745) :z (meters   -447.0771))
(new 'static 'vector :x (meters    -25.1939) :y (meters     26.8496) :z (meters   -464.3417))
(new 'static 'vector :x (meters    -32.4701) :y (meters     32.5663) :z (meters   -473.7226))
(new 'static 'vector :x (meters    -30.6599) :y (meters     40.0272) :z (meters   -479.2623))
(new 'static 'vector :x (meters    -30.6111) :y (meters     52.2731) :z (meters   -491.9000))
(new 'static 'vector :x (meters    -28.9721) :y (meters     52.3732) :z (meters   -505.0393))
(new 'static 'vector :x (meters     -3.1563) :y (meters     53.6794) :z (meters   -506.8506))
(new 'static 'vector :x (meters     -2.7942) :y (meters     54.1295) :z (meters   -521.0418))
(new 'static 'vector :x (meters     -2.3367) :y (meters     50.7045) :z (meters   -533.9367))
(new 'static 'vector :x (meters     -2.7435) :y (meters     47.1462) :z (meters   -546.4389))
(new 'static 'vector :x (meters     -1.4709) :y (meters     45.3168) :z (meters   -558.0234))
(new 'static 'vector :x (meters     -4.7695) :y (meters     42.8084) :z (meters   -570.1676))
(new 'static 'vector :x (meters     -9.0555) :y (meters     50.2418) :z (meters   -599.2960))
(new 'static 'vector :x (meters    -17.4166) :y (meters     52.7168) :z (meters   -620.0411))
(new 'static 'vector :x (meters    -47.4036) :y (meters     60.3586) :z (meters   -629.8507))
(new 'static 'vector :x (meters   -114.1083) :y (meters     34.8420) :z (meters   -600.6658))
(new 'static 'vector :x (meters   -171.0487) :y (meters     33.5754) :z (meters   -609.1961))
(new 'static 'vector :x (meters   -244.0625) :y (meters     16.1171) :z (meters   -576.9260))
(new 'static 'vector :x (meters   -284.9060) :y (meters      7.0172) :z (meters   -569.8447))
(new 'static 'vector :x (meters   -316.8435) :y (meters      8.0839) :z (meters   -566.7608))
(new 'static 'vector :x (meters   -351.4636) :y (meters      8.3422) :z (meters   -570.7431))
(new 'static 'vector :x (meters   -386.7319) :y (meters      5.9006) :z (meters   -577.3688))
(new 'static 'vector :x (meters    -22.0230) :y (meters     17.6539) :z (meters   -359.7740))
(new 'static 'vector :x (meters    -24.5882) :y (meters     16.4872) :z (meters   -354.3166))
(new 'static 'vector :x (meters    -27.4604) :y (meters     16.4706) :z (meters   -347.8421))
(new 'static 'vector :x (meters    -31.3071) :y (meters     18.1623) :z (meters   -341.7346))
(new 'static 'vector :x (meters    -36.0899) :y (meters     20.1956) :z (meters   -334.1407))
(new 'static 'vector :x (meters    -38.3072) :y (meters     18.0539) :z (meters   -327.9158))
(new 'static 'vector :x (meters    -39.5634) :y (meters     17.9039) :z (meters   -321.7516))
(new 'static 'vector :x (meters    -39.0577) :y (meters     20.8956) :z (meters   -315.1385))
(new 'static 'vector :x (meters    -39.3942) :y (meters     19.3373) :z (meters   -308.3604))
(new 'static 'vector :x (meters    -40.7206) :y (meters     20.0623) :z (meters   -302.0435))
(new 'static 'vector :x (meters    -40.8292) :y (meters     22.6343) :z (meters   -300.3074))
(new 'static 'vector :x (meters    -44.4693) :y (meters     25.7821) :z (meters   -300.2745))
(new 'static 'vector :x (meters    -50.6036) :y (meters     28.5589) :z (meters   -296.4812))
(new 'static 'vector :x (meters    -54.9712) :y (meters     29.8256) :z (meters   -290.9215))
(new 'static 'vector :x (meters    -58.3408) :y (meters     30.3506) :z (meters   -283.7597))
(new 'static 'vector :x (meters    -59.2556) :y (meters     29.8756) :z (meters   -275.4310))
(new 'static 'vector :x (meters    -60.3344) :y (meters     30.4006) :z (meters   -267.6458))
(new 'static 'vector :x (meters    -60.2787) :y (meters     31.2923) :z (meters   -260.3736))
(new 'static 'vector :x (meters    -58.9516) :y (meters     33.9793) :z (meters   -255.7956))
(new 'static 'vector :x (meters    -55.9525) :y (meters     34.7565) :z (meters   -261.2580))
(new 'static 'vector :x (meters    -53.8063) :y (meters     38.4539) :z (meters   -268.2360))
(new 'static 'vector :x (meters    -53.1663) :y (meters     42.8956) :z (meters   -274.9006))
(new 'static 'vector :x (meters    -53.4651) :y (meters     46.9039) :z (meters   -280.7247))
(new 'static 'vector :x (meters    -55.4968) :y (meters     50.9189) :z (meters   -284.4189))
(new 'static 'vector :x (meters    -59.9474) :y (meters     49.2262) :z (meters   -293.9656))
(new 'static 'vector :x (meters    -60.0526) :y (meters     50.4178) :z (meters   -296.4566))
(new 'static 'vector :x (meters    -59.4833) :y (meters     45.0229) :z (meters   -308.4209))
(new 'static 'vector :x (meters    -56.5750) :y (meters     42.3903) :z (meters   -314.7317))
(new 'static 'vector :x (meters    -54.3668) :y (meters     41.3737) :z (meters   -320.4613))
(new 'static 'vector :x (meters    -50.9172) :y (meters     40.1168) :z (meters   -325.9851))
(new 'static 'vector :x (meters    -47.2485) :y (meters     41.8668) :z (meters   -331.8302))
(new 'static 'vector :x (meters    -44.8435) :y (meters     41.3136) :z (meters   -337.8651))
(new 'static 'vector :x (meters    -42.5742) :y (meters     42.5580) :z (meters   -341.9883))
(new 'static 'vector :x (meters    -39.7503) :y (meters     47.6655) :z (meters   -348.7152))
(new 'static 'vector :x (meters    -37.3015) :y (meters     47.8597) :z (meters   -353.7538))
(new 'static 'vector :x (meters    -34.2408) :y (meters     51.2499) :z (meters   -355.6628))
(new 'static 'vector :x (meters    -43.5380) :y (meters     19.0630) :z (meters   -362.0194))
(new 'static 'vector :x (meters    -47.9777) :y (meters     20.7759) :z (meters   -360.0290))
(new 'static 'vector :x (meters    -52.5423) :y (meters     22.5704) :z (meters   -356.5966))
(new 'static 'vector :x (meters    -55.2242) :y (meters     25.1062) :z (meters   -350.6422))
(new 'static 'vector :x (meters    -57.2324) :y (meters     30.5229) :z (meters   -342.6043))
(new 'static 'vector :x (meters    -58.2257) :y (meters     33.0145) :z (meters   -338.9457))
(new 'static 'vector :x (meters    -58.3556) :y (meters     35.5062) :z (meters   -335.1183))
(new 'static 'vector :x (meters    -58.2263) :y (meters     38.2145) :z (meters   -330.9600))

))

(define *firecanyon-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters    -13.8207) :y (meters      6.0457) :z (meters    -93.5404))
(new 'static 'vector :x (meters     -4.9223) :y (meters     19.1562) :z (meters   -106.5609))
(new 'static 'vector :x (meters    -60.8102) :y (meters     32.5038) :z (meters   -124.6014))
(new 'static 'vector :x (meters    -61.8815) :y (meters     48.6157) :z (meters   -126.9556))
(new 'static 'vector :x (meters    -40.5003) :y (meters     31.6242) :z (meters   -133.6559))
(new 'static 'vector :x (meters    -27.5902) :y (meters     52.7281) :z (meters   -127.3352))
(new 'static 'vector :x (meters    -11.5071) :y (meters     48.3162) :z (meters   -151.1956))
(new 'static 'vector :x (meters    -19.0924) :y (meters     33.0374) :z (meters   -150.2639))
(new 'static 'vector :x (meters    -29.3827) :y (meters     33.8654) :z (meters   -152.8679))
(new 'static 'vector :x (meters    -35.5573) :y (meters     45.1392) :z (meters   -153.9064))
(new 'static 'vector :x (meters    -44.9266) :y (meters     30.7519) :z (meters   -168.9041))
(new 'static 'vector :x (meters    -42.7474) :y (meters     31.1247) :z (meters   -182.6032))
(new 'static 'vector :x (meters    -35.8165) :y (meters     31.1034) :z (meters   -194.4854))
(new 'static 'vector :x (meters    -33.0353) :y (meters     32.6987) :z (meters   -215.8421))
(new 'static 'vector :x (meters    -29.4199) :y (meters     30.1609) :z (meters   -233.4964))
(new 'static 'vector :x (meters    -26.4799) :y (meters     31.3776) :z (meters   -247.6203))
(new 'static 'vector :x (meters    -26.1263) :y (meters     29.8443) :z (meters   -258.9729))
(new 'static 'vector :x (meters    -22.2881) :y (meters     31.7235) :z (meters   -275.5517))
(new 'static 'vector :x (meters    -20.9713) :y (meters     33.2147) :z (meters   -294.5974))
(new 'static 'vector :x (meters    -13.7973) :y (meters     32.6397) :z (meters   -315.0719))
(new 'static 'vector :x (meters     -4.4608) :y (meters     32.1437) :z (meters   -333.8444))
(new 'static 'vector :x (meters      3.6896) :y (meters     32.3448) :z (meters   -342.3839))
(new 'static 'vector :x (meters     16.1620) :y (meters     32.8320) :z (meters   -353.0922))
(new 'static 'vector :x (meters     27.6087) :y (meters     32.3820) :z (meters   -364.9535))
(new 'static 'vector :x (meters     48.9466) :y (meters     28.4737) :z (meters   -385.1342))
(new 'static 'vector :x (meters     63.4751) :y (meters     29.3745) :z (meters   -392.2153))
(new 'static 'vector :x (meters     75.3267) :y (meters     30.3996) :z (meters   -406.4965))
(new 'static 'vector :x (meters     84.9359) :y (meters     32.2686) :z (meters   -420.2713))
(new 'static 'vector :x (meters    104.5939) :y (meters     30.5684) :z (meters   -437.9610))
(new 'static 'vector :x (meters    118.7988) :y (meters     29.1768) :z (meters   -479.6448))
(new 'static 'vector :x (meters    122.5697) :y (meters     30.1352) :z (meters   -507.5047))
(new 'static 'vector :x (meters    120.7945) :y (meters     30.7935) :z (meters   -530.2173))
(new 'static 'vector :x (meters    110.2194) :y (meters     28.4269) :z (meters   -551.4126))
(new 'static 'vector :x (meters    104.8832) :y (meters     28.5769) :z (meters   -569.8887))
(new 'static 'vector :x (meters     95.3134) :y (meters     28.7936) :z (meters   -590.8034))
(new 'static 'vector :x (meters    109.5919) :y (meters     28.9353) :z (meters   -612.7342))
(new 'static 'vector :x (meters    115.1469) :y (meters     29.3103) :z (meters   -631.3743))
(new 'static 'vector :x (meters    125.5749) :y (meters     28.5353) :z (meters   -646.6194))
(new 'static 'vector :x (meters    140.0121) :y (meters     28.7353) :z (meters   -662.1927))
(new 'static 'vector :x (meters    154.7765) :y (meters     29.3270) :z (meters   -678.0201))
(new 'static 'vector :x (meters    167.4305) :y (meters     29.7270) :z (meters   -702.9150))
(new 'static 'vector :x (meters    178.8495) :y (meters     29.1854) :z (meters   -726.7938))
(new 'static 'vector :x (meters    179.4918) :y (meters     32.3521) :z (meters   -754.3674))
(new 'static 'vector :x (meters    179.0778) :y (meters     27.2272) :z (meters   -791.3571))
(new 'static 'vector :x (meters    174.2497) :y (meters     29.0355) :z (meters   -812.0405))
(new 'static 'vector :x (meters    143.5034) :y (meters     31.7440) :z (meters   -860.3022))
(new 'static 'vector :x (meters     43.4829) :y (meters     30.4692) :z (meters   -901.9757))
(new 'static 'vector :x (meters     -5.6534) :y (meters     26.4693) :z (meters   -900.3291))
(new 'static 'vector :x (meters    -67.7947) :y (meters     29.6777) :z (meters   -945.6802))
(new 'static 'vector :x (meters     -5.5256) :y (meters     52.2777) :z (meters   -345.9000))
(new 'static 'vector :x (meters    -11.3050) :y (meters     57.9777) :z (meters   -332.3036))
(new 'static 'vector :x (meters    -16.5257) :y (meters     59.0869) :z (meters   -325.0430))
(new 'static 'vector :x (meters    -21.0331) :y (meters     59.4124) :z (meters   -316.2267))
(new 'static 'vector :x (meters    -23.6102) :y (meters     59.3036) :z (meters   -308.5152))
(new 'static 'vector :x (meters    -25.5524) :y (meters     60.9037) :z (meters   -299.9773))
(new 'static 'vector :x (meters    -27.1241) :y (meters     61.6453) :z (meters   -291.8675))
(new 'static 'vector :x (meters    -29.6533) :y (meters     62.4287) :z (meters   -285.1981))
(new 'static 'vector :x (meters    -32.0843) :y (meters     62.5204) :z (meters   -278.3332))
(new 'static 'vector :x (meters    -33.2784) :y (meters     61.8573) :z (meters   -271.6252))
(new 'static 'vector :x (meters    -35.0890) :y (meters     59.6106) :z (meters   -264.6918))
(new 'static 'vector :x (meters    -36.0264) :y (meters     59.7856) :z (meters   -258.0123))
(new 'static 'vector :x (meters    -35.5409) :y (meters     61.4273) :z (meters   -251.2659))
(new 'static 'vector :x (meters    -35.7673) :y (meters     59.0690) :z (meters   -245.0079))
(new 'static 'vector :x (meters    -37.9068) :y (meters     57.3023) :z (meters   -237.3199))
(new 'static 'vector :x (meters    -39.5802) :y (meters     56.3107) :z (meters   -230.6531))
(new 'static 'vector :x (meters    -40.0168) :y (meters     59.5875) :z (meters   -224.4740))
(new 'static 'vector :x (meters    -41.8623) :y (meters     60.3936) :z (meters   -216.7472))
(new 'static 'vector :x (meters    -42.4787) :y (meters     56.2936) :z (meters   -210.0217))
(new 'static 'vector :x (meters    -44.9683) :y (meters     55.5186) :z (meters   -203.1890))
(new 'static 'vector :x (meters    -46.6060) :y (meters     55.6103) :z (meters   -196.1049))
(new 'static 'vector :x (meters    -48.1933) :y (meters     52.5769) :z (meters   -189.5253))
(new 'static 'vector :x (meters    -50.7369) :y (meters     54.0603) :z (meters   -182.4216))
(new 'static 'vector :x (meters    -50.1989) :y (meters     53.1520) :z (meters   -174.9350))
(new 'static 'vector :x (meters    -48.8561) :y (meters     55.9936) :z (meters   -164.8288))
(new 'static 'vector :x (meters    -48.6708) :y (meters     44.1103) :z (meters   -163.2690))
(new 'static 'vector :x (meters    -48.0881) :y (meters     44.0020) :z (meters   -167.4710))
(new 'static 'vector :x (meters    -48.9403) :y (meters     44.7603) :z (meters   -171.8806))
(new 'static 'vector :x (meters    -43.8552) :y (meters     43.9521) :z (meters   -185.9771))
(new 'static 'vector :x (meters    -39.8929) :y (meters     43.2187) :z (meters   -196.8290))
(new 'static 'vector :x (meters    -37.8826) :y (meters     44.7521) :z (meters   -206.2948))
(new 'static 'vector :x (meters    -36.1401) :y (meters     45.1855) :z (meters   -216.4906))
(new 'static 'vector :x (meters    -37.1491) :y (meters     44.9688) :z (meters   -227.7060))
(new 'static 'vector :x (meters    -33.9073) :y (meters     45.8022) :z (meters   -239.1787))
(new 'static 'vector :x (meters    -32.0237) :y (meters     45.6522) :z (meters   -250.8551))
(new 'static 'vector :x (meters    -36.0662) :y (meters     44.4106) :z (meters   -262.2974))
(new 'static 'vector :x (meters    -29.6958) :y (meters     44.0606) :z (meters   -270.9839))
(new 'static 'vector :x (meters    -26.3503) :y (meters     44.7856) :z (meters   -282.4430))
(new 'static 'vector :x (meters    -22.8765) :y (meters     45.0106) :z (meters   -295.2748))
(new 'static 'vector :x (meters    -21.4445) :y (meters     45.9690) :z (meters   -306.9707))
(new 'static 'vector :x (meters    -17.0087) :y (meters     45.5940) :z (meters   -317.5506))
(new 'static 'vector :x (meters    -11.6072) :y (meters     45.7107) :z (meters   -327.5163))
(new 'static 'vector :x (meters     -6.8834) :y (meters     47.5024) :z (meters   -338.4182))
(new 'static 'vector :x (meters     -1.5970) :y (meters     48.3473) :z (meters   -347.4682))
(new 'static 'vector :x (meters      9.7470) :y (meters     44.9056) :z (meters   -352.8801))
(new 'static 'vector :x (meters     18.0677) :y (meters     44.3723) :z (meters   -361.7051))
(new 'static 'vector :x (meters     28.1251) :y (meters     44.2807) :z (meters   -368.8930))
(new 'static 'vector :x (meters     36.4036) :y (meters     44.6057) :z (meters   -378.8166))
(new 'static 'vector :x (meters     -7.8091) :y (meters     37.2445) :z (meters   -155.0222))
(new 'static 'vector :x (meters     11.3546) :y (meters     34.9695) :z (meters   -198.8540))
(new 'static 'vector :x (meters     18.9358) :y (meters     34.5029) :z (meters   -258.1945))
(new 'static 'vector :x (meters     39.4472) :y (meters     37.4030) :z (meters   -305.7861))
(new 'static 'vector :x (meters     78.4445) :y (meters     36.0947) :z (meters   -345.1999))
(new 'static 'vector :x (meters    112.3999) :y (meters     33.3799) :z (meters   -374.3028))
(new 'static 'vector :x (meters    140.4470) :y (meters     31.9133) :z (meters   -407.9567))
(new 'static 'vector :x (meters    159.6017) :y (meters     33.3800) :z (meters   -441.1342))
(new 'static 'vector :x (meters    170.2457) :y (meters     32.6217) :z (meters   -472.6772))
(new 'static 'vector :x (meters    170.4723) :y (meters     33.1884) :z (meters   -511.2778))
(new 'static 'vector :x (meters    167.4709) :y (meters     36.2051) :z (meters   -540.0909))
(new 'static 'vector :x (meters    164.1784) :y (meters     36.0135) :z (meters   -576.1572))
(new 'static 'vector :x (meters    170.5166) :y (meters     41.6886) :z (meters   -617.7362))
(new 'static 'vector :x (meters    206.8824) :y (meters     38.5386) :z (meters   -659.8912))
(new 'static 'vector :x (meters    232.7533) :y (meters     38.7554) :z (meters   -719.3691))
(new 'static 'vector :x (meters    234.9195) :y (meters     36.0804) :z (meters   -764.1637))
(new 'static 'vector :x (meters    229.8270) :y (meters     35.7888) :z (meters   -815.5334))
(new 'static 'vector :x (meters    223.0897) :y (meters     38.4222) :z (meters   -851.1773))
(new 'static 'vector :x (meters    221.7904) :y (meters     37.4056) :z (meters   -893.0056))
(new 'static 'vector :x (meters    165.8321) :y (meters     32.5640) :z (meters   -926.6889))
))
(define *training-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters  -1317.6112) :y (meters      6.9499) :z (meters   1065.5915))
))

(define *misty-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     39.4536) :y (meters      3.6524) :z (meters    826.8192))
))


(define *jungle-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters    162.1731) :y (meters      1.2968) :z (meters   -147.2938))
(new 'static 'vector :x (meters    176.4970) :y (meters      1.8095) :z (meters   -101.1030))
(new 'static 'vector :x (meters    191.5196) :y (meters      2.2257) :z (meters    -48.7668))
(new 'static 'vector :x (meters    248.7415) :y (meters      3.4410) :z (meters    -55.8026))
(new 'static 'vector :x (meters    304.5815) :y (meters      7.6993) :z (meters    -64.6367))
(new 'static 'vector :x (meters    346.4573) :y (meters     16.7077) :z (meters    -67.4567))
(new 'static 'vector :x (meters    384.6517) :y (meters     14.5744) :z (meters    -68.0761))
(new 'static 'vector :x (meters    409.9448) :y (meters      9.6911) :z (meters    -57.4982))
(new 'static 'vector :x (meters    435.2914) :y (meters     11.7578) :z (meters    -44.2169))
(new 'static 'vector :x (meters    464.4567) :y (meters     10.7828) :z (meters    -26.6647))
(new 'static 'vector :x (meters    489.1433) :y (meters      5.6078) :z (meters    -54.2688))
(new 'static 'vector :x (meters    497.9685) :y (meters      4.5578) :z (meters    -84.7263))
(new 'static 'vector :x (meters    503.5742) :y (meters      3.3828) :z (meters   -117.4950))
(new 'static 'vector :x (meters    512.9689) :y (meters      4.5661) :z (meters   -155.3654))
(new 'static 'vector :x (meters    512.9389) :y (meters      4.6828) :z (meters   -193.6970))
(new 'static 'vector :x (meters    511.3016) :y (meters      3.6994) :z (meters   -229.8902))
(new 'static 'vector :x (meters    506.0901) :y (meters      5.2661) :z (meters   -266.7428))
(new 'static 'vector :x (meters    494.1812) :y (meters     14.9411) :z (meters   -314.3406))
(new 'static 'vector :x (meters    472.4194) :y (meters     30.2495) :z (meters   -357.3373))
(new 'static 'vector :x (meters    434.1253) :y (meters     28.0829) :z (meters   -379.3642))
(new 'static 'vector :x (meters    418.3345) :y (meters     27.4746) :z (meters   -380.9533))
(new 'static 'vector :x (meters    383.4749) :y (meters     29.6079) :z (meters   -385.5572))
(new 'static 'vector :x (meters    347.3251) :y (meters     28.3830) :z (meters   -387.4938))
(new 'static 'vector :x (meters    317.7676) :y (meters     24.9496) :z (meters   -389.6222))
(new 'static 'vector :x (meters    290.8586) :y (meters     23.5497) :z (meters   -375.7226))
(new 'static 'vector :x (meters    268.0432) :y (meters     23.4914) :z (meters   -359.6605))
(new 'static 'vector :x (meters    252.0201) :y (meters     24.5330) :z (meters   -348.8482))
(new 'static 'vector :x (meters    235.6632) :y (meters     25.1247) :z (meters   -336.2095))
(new 'static 'vector :x (meters    221.4041) :y (meters     24.8414) :z (meters   -320.5068))
(new 'static 'vector :x (meters    207.6327) :y (meters     24.3331) :z (meters   -304.8645))
(new 'static 'vector :x (meters    197.9343) :y (meters     24.2248) :z (meters   -286.2070))
(new 'static 'vector :x (meters    190.8768) :y (meters     22.5581) :z (meters   -265.3146))
(new 'static 'vector :x (meters    183.4888) :y (meters     21.4082) :z (meters   -244.4257))
(new 'static 'vector :x (meters    177.8627) :y (meters     18.9915) :z (meters   -223.4963))
(new 'static 'vector :x (meters    174.7724) :y (meters     17.1665) :z (meters   -202.3518))
(new 'static 'vector :x (meters    173.8747) :y (meters     17.9749) :z (meters   -180.6712))
(new 'static 'vector :x (meters    172.9282) :y (meters     18.8332) :z (meters   -157.7038))
))

(define *sunken-spots* (new 'static 'boxed-array :type vector (new 'static 'vector :x (meters    529.2602) :y (meters     -0.6520) :z (meters  -1633.8883))
(new 'static 'vector :x (meters    529.8210) :y (meters     -0.6520) :z (meters  -1629.6425))
(new 'static 'vector :x (meters    528.2506) :y (meters     -0.6520) :z (meters  -1626.9349))
(new 'static 'vector :x (meters    523.1776) :y (meters     -0.6521) :z (meters  -1625.9155))
(new 'static 'vector :x (meters    519.8240) :y (meters     -0.6521) :z (meters  -1630.5943))
(new 'static 'vector :x (meters    523.0172) :y (meters     -0.6521) :z (meters  -1635.9697))
(new 'static 'vector :x (meters    527.1214) :y (meters     -0.6521) :z (meters  -1635.8194))
(new 'static 'vector :x (meters    530.0592) :y (meters     -0.6521) :z (meters  -1631.5214))
(new 'static 'vector :x (meters    527.5261) :y (meters     -0.6521) :z (meters  -1626.4437))
(new 'static 'vector :x (meters    521.8291) :y (meters     -0.6521) :z (meters  -1626.6866))
(new 'static 'vector :x (meters    519.2990) :y (meters   -144.9769) :z (meters  -1646.9177))
(new 'static 'vector :x (meters    519.2990) :y (meters   -144.9769) :z (meters  -1646.9177))))

(define *rolling-spots* (new 'static 'boxed-array :type vector  (new 'static 'vector :x
(meters    104.1919) :y (meters     11.8141) :z (meters  -1601.3944))
(new 'static 'vector :x (meters    102.4294) :y (meters     10.9399) :z (meters  -1668.7178))
(new 'static 'vector :x (meters     29.2593) :y (meters     24.6441) :z (meters  -1615.6177))
(new 'static 'vector :x (meters    -24.9009) :y (meters     24.7547) :z (meters  -1614.5948))
(new 'static 'vector :x (meters    -33.6708) :y (meters     25.7693) :z (meters  -1590.0588))
(new 'static 'vector :x (meters    -30.9078) :y (meters     25.5070) :z (meters  -1553.5601))
(new 'static 'vector :x (meters    -30.3165) :y (meters     24.0069) :z (meters  -1532.0484))
(new 'static 'vector :x (meters    -29.1167) :y (meters     24.5546) :z (meters  -1500.3862))
(new 'static 'vector :x (meters    -16.9625) :y (meters     28.7965) :z (meters  -1473.3806))
(new 'static 'vector :x (meters    -10.5222) :y (meters     23.8836) :z (meters  -1432.7391))
(new 'static 'vector :x (meters    -20.6323) :y (meters     25.3690) :z (meters  -1429.0289))
(new 'static 'vector :x (meters    -34.0147) :y (meters     27.7495) :z (meters  -1426.1813))
(new 'static 'vector :x (meters    -55.7614) :y (meters     25.1180) :z (meters  -1434.7867))
(new 'static 'vector :x (meters    -69.3533) :y (meters     27.5625) :z (meters  -1436.3470))
(new 'static 'vector :x (meters    -87.9370) :y (meters     24.2200) :z (meters  -1449.0714))
(new 'static 'vector :x (meters    -96.6431) :y (meters     24.9361) :z (meters  -1460.2271))
(new 'static 'vector :x (meters   -119.2433) :y (meters     21.3390) :z (meters  -1474.0695))
(new 'static 'vector :x (meters   -131.4676) :y (meters     22.8443) :z (meters  -1459.9458))
(new 'static 'vector :x (meters   -139.3479) :y (meters     22.3161) :z (meters  -1453.1669))
(new 'static 'vector :x (meters   -156.9638) :y (meters     26.3430) :z (meters  -1434.1119))
(new 'static 'vector :x (meters   -164.5989) :y (meters     26.9480) :z (meters  -1429.5432))
(new 'static 'vector :x (meters   -194.7471) :y (meters     25.5871) :z (meters  -1421.0416))
(new 'static 'vector :x (meters   -215.7006) :y (meters     26.4082) :z (meters  -1424.7517))
(new 'static 'vector :x (meters   -235.2687) :y (meters     40.1309) :z (meters  -1418.7003))
(new 'static 'vector :x (meters   -248.9488) :y (meters     40.0262) :z (meters  -1418.8426))
(new 'static 'vector :x (meters   -283.8880) :y (meters     25.7944) :z (meters  -1413.8302))
(new 'static 'vector :x (meters   -303.4255) :y (meters     31.3578) :z (meters  -1406.7478))
(new 'static 'vector :x (meters   -326.6475) :y (meters     28.4270) :z (meters  -1404.3748))
(new 'static 'vector :x (meters   -332.7280) :y (meters     24.6361) :z (meters  -1434.5472))
(new 'static 'vector :x (meters   -347.1265) :y (meters     27.3821) :z (meters  -1451.5511))
(new 'static 'vector :x (meters   -374.9368) :y (meters     27.6952) :z (meters  -1485.2678))
(new 'static 'vector :x (meters   -394.2881) :y (meters     25.7046) :z (meters  -1505.1224))
(new 'static 'vector :x (meters   -404.0355) :y (meters     24.6225) :z (meters  -1518.9077))
(new 'static 'vector :x (meters   -395.2369) :y (meters     27.1535) :z (meters  -1541.9460))
(new 'static 'vector :x (meters   -386.4504) :y (meters     25.1116) :z (meters  -1567.9173))
(new 'static 'vector :x (meters   -380.3009) :y (meters     27.9001) :z (meters  -1597.1364))
(new 'static 'vector :x (meters   -387.4592) :y (meters     27.8880) :z (meters  -1630.6588))
(new 'static 'vector :x (meters   -397.5704) :y (meters     23.1302) :z (meters  -1655.0377))
(new 'static 'vector :x (meters   -404.1547) :y (meters     18.6586) :z (meters  -1675.2926))
(new 'static 'vector :x (meters   -397.7486) :y (meters     18.9535) :z (meters  -1686.4348))
(new 'static 'vector :x (meters   -398.2876) :y (meters     16.5726) :z (meters  -1731.7935))
(new 'static 'vector :x (meters   -379.3412) :y (meters     20.7457) :z (meters  -1752.8723))
(new 'static 'vector :x (meters   -364.4296) :y (meters     19.7362) :z (meters  -1764.5794))
(new 'static 'vector :x (meters   -333.5793) :y (meters     20.9581) :z (meters  -1762.2454))
(new 'static 'vector :x (meters   -324.4107) :y (meters     18.9011) :z (meters  -1753.6695))
(new 'static 'vector :x (meters   -301.9873) :y (meters     22.9032) :z (meters  -1742.9699))
(new 'static 'vector :x (meters   -289.5411) :y (meters     24.9769) :z (meters  -1723.5556))
(new 'static 'vector :x (meters   -277.8037) :y (meters     24.8079) :z (meters  -1702.9754))
(new 'static 'vector :x (meters   -245.7691) :y (meters     28.7044) :z (meters  -1695.9688))
(new 'static 'vector :x (meters   -217.1686) :y (meters     24.5083) :z (meters  -1691.6280))
(new 'static 'vector :x (meters   -177.3045) :y (meters     22.9875) :z (meters  -1676.1618))
(new 'static 'vector :x (meters   -150.8338) :y (meters     23.9519) :z (meters  -1678.5528))
(new 'static 'vector :x (meters    -99.9121) :y (meters     24.9339) :z (meters  -1764.4207))
(new 'static 'vector :x (meters   -115.2512) :y (meters     24.2713) :z (meters  -1781.1506))
(new 'static 'vector :x (meters   -135.3122) :y (meters     24.5969) :z (meters  -1790.0920))
))

(define *swamp-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     332132132139.4536) :y (meters      3.6524) :z (meters    826.8192))
))

(define *ogre-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     39432432432432432432.4536) :y (meters      3.6524) :z (meters    826.8192))
))

(define *cave-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     344234324324324329.4536) :y (meters      3.6524) :z (meters    826.8192))
))

(define *snow-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     34234324324324234324239.4536) :y (meters      3.6524) :z (meters    826.8192))
))

(define *lavatube-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     343243243243243243249.4536) :y (meters      3.6524) :z (meters    826.8192))
))
(define *citadel-spots* (new 'static 'boxed-array :type vector
(new 'static 'vector :x (meters     33243243243243243242342349.4536) :y (meters      3.6524) :z (meters    826.8192))
))

(defun draw-spheres ()

  (dotimes (i (length *beach-spots*))
  (add-debug-sphere #t (bucket-id debug-no-zbuf1) (-> *beach-spots* i) (meters 1.2) *color-dark-yellow*)

  )

    (dotimes (i (length *firecanyon-spots*))
  (add-debug-sphere #t (bucket-id debug-no-zbuf1) (-> *firecanyon-spots* i) (meters 1.2) *color-dark-red*)

  )

    (dotimes (i (length *jungle-spots*))
  (add-debug-sphere #t (bucket-id debug-no-zbuf1) (-> *jungle-spots* i) (meters 1.2) *color-light-green*)

  )

  (none))


(defun find-closest-sphere-jak ()

  (dotimes (i (length *beach-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *beach-spots* i)))
  (set! *closest-sphere-pos-global* (-> *beach-spots* i))
  (set! *wanted-level* 'beach)

  )

  )

  (dotimes (i (length *firecanyon-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *firecanyon-spots* i)))
  (set! *closest-sphere-pos-global* (-> *firecanyon-spots* i))
  (set! *wanted-level* 'firecanyon)

  )

  )

  (dotimes (i (length *jungle-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *jungle-spots* i)))
  (set! *closest-sphere-pos-global* (-> *jungle-spots* i))
  (set! *wanted-level* 'jungle)

  )

  )

    (dotimes (i (length *training-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *training-spots* i)))
  (set! *closest-sphere-pos-global* (-> *training-spots* i))
  (set! *wanted-level* 'training)

  )

  )

      (dotimes (i (length *misty-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *misty-spots* i)))
  (set! *closest-sphere-pos-global* (-> *misty-spots* i))
  (set! *wanted-level* 'misty)

  )

  )

        (dotimes (i (length *sunken-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *sunken-spots* i)))
  (set! *closest-sphere-pos-global* (-> *sunken-spots* i))
  (set! *wanted-level* 'sunken)

  )

  )

          (dotimes (i (length *rolling-spots*))

  (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *rolling-spots* i)))
  (set! *closest-sphere-pos-global* (-> *rolling-spots* i))
  (set! *wanted-level* 'rolling)

  )

  )

  ;;           (dotimes (i (length *swamp-spots*))

  ;; (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *swamp-spots* i)))
  ;; (set! *closest-sphere-pos-global* (-> *swamp-spots* i))
  ;; (set! *wanted-level* 'swmap)

  ;; )

  ;; )
  ;;           (dotimes (i (length *ogre-spots*))

  ;; (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *ogre-spots* i)))
  ;; (set! *closest-sphere-pos-global* (-> *ogre-spots* i))
  ;; (set! *wanted-level* 'ogre)

  ;; )

  ;; )

  ;;           (dotimes (i (length *cave-spots*))

  ;; (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *cave-spots* i)))
  ;; (set! *closest-sphere-pos-global* (-> *cave-spots* i))
  ;; (set! *wanted-level* 'cave)

  ;; )

  ;; )


  ;;           (dotimes (i (length *snow-spots*))

  ;; (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *snow-spots* i)))
  ;; (set! *closest-sphere-pos-global* (-> *snow-spots* i))
  ;; (set! *wanted-level* 'snow)

  ;; )

  ;; )


  ;;           (dotimes (i (length *lavatube-spots*))

  ;; (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *lavatube-spots* i)))
  ;; (set! *closest-sphere-pos-global* (-> *lavatube-spots* i))
  ;; (set! *wanted-level* 'lavatube)

  ;; )

  ;; )

  ;; (dotimes (i (length *citadel-spots*))

  ;; (when (> (vector-vector-xz-distance (-> *target* root trans) *closest-sphere-pos-global*) (vector-vector-xz-distance (-> *target* root trans) (-> *citadel-spots* i)))
  ;; (set! *closest-sphere-pos-global* (-> *citadel-spots* i))
  ;; (set! *wanted-level* 'citadel)

  ;; )

  ;; )


  (add-debug-sphere #t (bucket-id debug-no-zbuf1) *closest-sphere-pos-global* (meters 1.2) *color-dark-yellow*)
(none)
  )


(defun load-level-from-symbol ()

(if (= *wanted-level* 'jungle)
(load-lvl 'hub1 'junglec 'sandoverc #f #f #f)
)


(if (= *wanted-level* 'beach)
(load-lvl 'hub1 'beachc 'sandoverc #f #f #f)
)


(if (= *wanted-level* 'firecanyon)
(load-lvl 'hub1 'firecanyonc 'sandoverc #f #f #f)
)

(if (= *wanted-level* 'training)
(load-lvl 'hub1 'trainingc 'sandoverc #f #f #f)
)

(if (= *wanted-level* 'misty)
(load-lvl 'hub1 'mistyc 'sandoverc #f #f #f)
)

(if (= *wanted-level* 'swamp)
(load-lvl 'hub2 'swampc 'rockvic #f #f #f)
)

(if (= *wanted-level* 'rolling)
(load-lvl 'hub2 'rollingc 'rockvic #f #f #f)
)

(if (= *wanted-level* 'sunken)
(load-lvl 'hub2 'sunkenc 'rockvic #f #f #f)
)

;;Need to add 'hub2-no-swamp
(if (= *wanted-level* 'ogre)
(load-lvl 'hub2 'rockvic 'ogrec #f #f #f)
)

(if (= *wanted-level* 'cave)
(load-lvl 'hub3 'volcanc 'cavec #f #f #f)
)

(if (= *wanted-level* 'snow)
(load-lvl 'hub3 'volcanc 'snowc #f #f #f)
)

(if (= *wanted-level* 'lavatube)
 (load-lvl 'hub3 'volcanc 'lavatubec #f #f #f)
)

(if (= *wanted-level* 'citadel)
(load-lvl #f #f #f #f #f #f)
)

(if (= *wanted-level* 'final)
(load-lvl #f #f #f #f #f #f)
)


(none))

;; (string-format "~8D [~4D]" (-> *sound-iop-info* freemem)      (shr (-> *sound-iop-info* freemem) 10))

(defun print-level-sphere-point-name ()
     (format 0 "(new 'static 'vector :x (meters  ~F) :y (meters      ~F) :z (meters   ~F))~%"(-> *target* root trans x) (-> *target* root trans y) (-> *target* root trans z) )
)
(define *auto-load-lvl* #f)
(define old-level #f)


(defun draw-jak1-in-2-stuff ()
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                               (bucket-id debug-no-zbuf1))
    ;; reset bucket settings prior to drawing - font won't do this for us, and
    ;; draw-raw-image can sometimes mess them up.
    (dma-buffer-add-gs-set-flusha buf
                                  (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
                                  (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (clear *pc-encoded-temp-string*)
    (clear *temp-string*)
    (format *temp-string* "<COLOR_WHITE>HOLD L1 AND PRESS SQUARE TO TOGGLE~%AUTO LOAD LEVELS: ~S~%WANTED LEVEL: ~A~%" (if *auto-load-lvl* "TRUE" "FALSE") *wanted-level*)
    (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 2 203 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-temp-string* buf font-ctx))))


  (defun zero-volume? ()
  "Returns true if the volume of main music should be set to 0 This is a hack."
  (or (not (= *master-mode* 'game) )
  (= (-> (level-get-target-inside *level*)name) 'title)
  )
  )


    (defun runs-every-frame ()
    (main-music-volume (the int  (the-as int (*  (-> *setting-control* user-current music-volume) 100)) ))
    (if (or (zero-volume?) (not *auto-load-lvl*))  (pause-main-music)  (resume-main-music))
    (draw-jak1-in-2-stuff)
      ;; (increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc

    (when (and (cpad-hold? 0 l1) (cpad-pressed? 0 square))
    (sound-play "skill-pickup")
    (set! *auto-load-lvl* (not *auto-load-lvl*))
    )

    (if (!= old-level *wanted-level*)
        (process-spawn-function process music-manager-proc)
    )

    (when *target*
    (if *wanted-level*
     (set! old-level *wanted-level*)

    )
    )

    (when *auto-load-lvl*
    (when *target*
        (find-closest-sphere-jak)
    )

    (when *target*
    (load-level-from-symbol)

    )
    )
     ;; (draw-spheres)
      ;; Sample code to turn jak pink whenever he's doing the jetboard hover glitch
      ;; (when *target*
      ;;   (if (board-hovering?)
      ;;     (draw-pink *target*)
      ;;     (draw-normal *target*)
      ;;     )
      ;;   )

      (when (and (cpad-pressed? 0 down) (= *master-mode* 'game) *target*)
      (format #t "(new 'static 'vector :x (meters~F) :y (meters~F) :z (meters~F))~%" (/ (-> *target* root trans x) 4096.0) (/ (-> *target* root trans y) 4096.0)(/ (-> *target* root trans z) 4096.0))

      )


      (if *show-input-display*
        (input-display-on)
        (input-display-off)
        )

      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()


      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))
            ;; Code here runs as soon as you pickup big green eco

            )
          )

        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)
        (process-spawn-function process music-manager-proc)
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene

          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )

      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
