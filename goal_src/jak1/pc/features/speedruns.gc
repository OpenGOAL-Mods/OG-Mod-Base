;;-*-Lisp-*-
(in-package goal)
(require "engine/game/game-save.gc")
(require "engine/game/task/game-task-h.gc")
(require "pc/pckernel-common.gc")
(require "pc/features/autosplit-h.gc")
(define *speedrun-info* (new 'static 'speedrun-info-jak1 :should-display? #t :needs-post-blackout-setup? #f))

(define *has-landed?* #f)

(define-extern *mod-version-text* string)

(define *hub1-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task training-gimmie)
       (game-task training-door)
       (game-task training-climb)
       (game-task training-buzzer)
       (game-task village1-mayor-money)
       (game-task village1-uncle-money)
       (game-task village1-yakow)
       (game-task village1-oracle-money1)
       (game-task village1-oracle-money2)
       (game-task village1-buzzer)
       (game-task beach-ecorocks)
       (game-task beach-flutflut)
       (game-task beach-pelican)
       (game-task beach-seagull)
       (game-task beach-cannon)
       (game-task beach-gimmie)
       (game-task beach-sentinel)
       (game-task beach-buzzer)
       (game-task jungle-lurkerm)
       (game-task jungle-tower)
       (game-task jungle-eggtop)
       (game-task jungle-plant)
       (game-task jungle-fishgame)
       (game-task jungle-canyon-end)
       (game-task jungle-temple-door)
       (game-task jungle-buzzer)
       (game-task misty-muse)
       (game-task misty-boat)
       (game-task misty-cannon)
       (game-task misty-warehouse)
       (game-task misty-bike)
       (game-task misty-bike-jump)
       (game-task misty-eco-challenge)
       (game-task misty-buzzer)
       (game-task firecanyon-end)
       (game-task firecanyon-buzzer)))

(define *hub2-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task training-gimmie)
       (game-task training-door)
       (game-task training-climb)
       (game-task training-buzzer)
       (game-task village1-mayor-money)
       (game-task village1-uncle-money)
       (game-task village1-yakow)
       (game-task village1-oracle-money1)
       (game-task village1-oracle-money2)
       (game-task village1-buzzer)
       (game-task beach-ecorocks)
       (game-task beach-flutflut)
       (game-task beach-pelican)
       (game-task beach-seagull)
       (game-task beach-cannon)
       (game-task beach-gimmie)
       (game-task beach-sentinel)
       (game-task beach-buzzer)
       (game-task jungle-lurkerm)
       (game-task jungle-tower)
       (game-task jungle-eggtop)
       (game-task jungle-plant)
       (game-task jungle-fishgame)
       (game-task jungle-canyon-end)
       (game-task jungle-temple-door)
       (game-task jungle-buzzer)
       (game-task misty-muse)
       (game-task misty-boat)
       (game-task misty-cannon)
       (game-task misty-warehouse)
       (game-task misty-bike)
       (game-task misty-bike-jump)
       (game-task misty-eco-challenge)
       (game-task misty-buzzer)
       (game-task firecanyon-end)
       (game-task firecanyon-buzzer)))

(define *hub2-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task village2-gambler-money)
       (game-task village2-geologist-money)
       (game-task village2-warrior-money)
       (game-task village2-oracle-money1)
       (game-task village2-oracle-money2)
       (game-task village2-buzzer)
       (game-task sunken-room)
       (game-task sunken-pipe)
       (game-task sunken-slide)
       (game-task sunken-sharks)
       (game-task sunken-platforms)
       (game-task sunken-top-of-helix)
       (game-task sunken-spinning-room)
       (game-task sunken-buzzer)
       (game-task swamp-flutflut)
       (game-task swamp-billy)
       (game-task swamp-battle)
       (game-task swamp-tether-4)
       (game-task swamp-tether-1)
       (game-task swamp-tether-2)
       (game-task swamp-tether-3)
       (game-task swamp-buzzer)
       (game-task rolling-moles)
       (game-task rolling-robbers)
       (game-task rolling-race)
       (game-task rolling-lake)
       (game-task rolling-plants)
       (game-task rolling-ring-chase-1)
       (game-task rolling-ring-chase-2)
       (game-task rolling-buzzer)
       (game-task ogre-boss)
       (game-task ogre-end)
       (game-task ogre-secret)
       (game-task ogre-buzzer)))

(define *hub3-cell-list*
  (new 'static
       'boxed-array
       :type
       game-task
       (game-task village3-miner-money1)
       (game-task village3-miner-money2)
       (game-task village3-miner-money3)
       (game-task village3-miner-money4)
       (game-task village3-oracle-money1)
       (game-task village3-oracle-money2)
       (game-task village3-extra1)
       (game-task village3-buzzer)
       (game-task snow-eggtop)
       (game-task snow-ram)
       (game-task snow-bumpers)
       (game-task snow-cage)
       (game-task snow-fort)
       (game-task snow-ball)
       (game-task snow-bunnies)
       (game-task snow-buzzer)
       (game-task cave-gnawers)
       (game-task cave-dark-crystals)
       (game-task cave-dark-climb)
       (game-task cave-robot-climb)
       (game-task cave-swing-poles)
       (game-task cave-spider-tunnel)
       (game-task cave-platforms)
       (game-task cave-buzzer)
       (game-task lavatube-end)
       (game-task lavatube-buzzer)))

;; unused
;; (define *citadel-cell-list* (new 'static 'boxed-array :type game-task
;;   (game-task citadel-sage-blue)
;;   (game-task citadel-sage-red)
;;   (game-task citadel-sage-yellow)
;;   (game-task citadel-sage-green)
;;   (game-task citadel-buzzer)
;;   ))

(defun is-speedrun-category? ((category symbol))
  (and (-> *pc-settings* speedrunner-mode?)
       (name= category (enum->string speedrun-category (-> *speedrun-info* category)))))

(defun enforce-speedrun-pc-settings ()
  ;; Disable any active cheats
  (set! (-> *pc-settings* cheats) (the-as pc-cheats #x0))
  ;; ensure PS2 actor vis is enabled
  (set! (-> *pc-settings* ps2-actor-vis?) #t)
  ;; ensure FPS set to `60`
  (when (!= (-> *pc-settings* target-fps) 60)
    (set-frame-rate! *pc-settings* 60 #t))
  (none))

(defun start-speedrun ((category speedrun-category))
  (reset-custom-info)
  (reset-mort-struct)
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)
  ;; disable hints (turned back on later for all-cutscenes category)
  (set! (-> *setting-control* default play-hints) #f)
  ;; turn on speedrun verification display and flip flag for setting up speedrun after initialize!
  (set! (-> *speedrun-info* should-display?) #t)
  (set! (-> *speedrun-info* needs-post-blackout-setup?) #t)
  ;; start new game with specified checkpoint, if any (otherwise we're resetting current category)
  (if category (set! (-> *speedrun-info* category) category))
  (case (-> *speedrun-info* category)
    (((speedrun-category full-game))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "block-world-warp"))
 (((speedrun-category il-block-world)) ;;
      ;; spawn at the geyser warp gate checkpoint
      (initialize! *game-info* 'game (the-as game-save #f) "block-world-warp")
      )
    (((speedrun-category il-factory-cross))
      ;; spawn at the green sage hut warp gate
      (initialize! *game-info* 'game (the-as game-save #f) "fac-cross-warp")
      )
    (((speedrun-category il-holly-wood))
      ;; spawn at beach
      (initialize! *game-info* 'game (the-as game-save #f) "holly-wood-warp")
      )
    (((speedrun-category il-monument))
      ;; spawn at start of FJ
      (initialize! *game-info* 'game (the-as game-save #f) "monument-warp")
      )
    (((speedrun-category il-cathedral))
      ;; spawn at start of misty
      (initialize! *game-info* 'game (the-as game-save #f) "cathedral-warp")
      )
    (((speedrun-category il-pyramid))
      ;; spawn at start of fire canyon
      (initialize! *game-info* 'game (the-as game-save #f) "pyramid-warp")
      )
    (((speedrun-category il-ice-canyon))
      ;; spawn at rock village start
      (initialize! *game-info* 'game (the-as game-save #f) "ice-canyon-warp")
      )
    (((speedrun-category il-coins))
      ;; spawn at start of LPC
      (initialize! *game-info* 'game (the-as game-save #f) "coins-warp")
      )
    (((speedrun-category il-villa-cube))
      ;; spawn at start of boggy
      (initialize! *game-info* 'game (the-as game-save #f) "villa-cube-warp")
      )
    (((speedrun-category il-ice-slide))
      ;; spawn at start of basin
      (initialize! *game-info* 'game (the-as game-save #f) "ice-slide-warp")
      )
    (((speedrun-category il-islands))
      ;; spawn before klaww
      (initialize! *game-info* 'game (the-as game-save #f) "islands-warp")
      )
    (((speedrun-category il-glass-towers))
      ;; spawn at start of volcanic crater
      (initialize! *game-info* 'game (the-as game-save #f) "glass-tower-warp")
      )
    (((speedrun-category il-chemical-factory))
      ;; spawn at start of snowy
      (initialize! *game-info* 'game (the-as game-save #f) "chem-fac-warp")
      )
    (((speedrun-category il-space-bridge))
      ;; spawn at start of spider cave
      (initialize! *game-info* 'game (the-as game-save #f) "space-bird-warp")
      )
    (((speedrun-category il-chicks))
      ;; spawn at start of lava tube
      (initialize! *game-info* 'game (the-as game-save #f) "chicks-warp")
      )
    (((speedrun-category il-garden))
      ;; spawn outside first citadel door
      (initialize! *game-info* 'game (the-as game-save #f) "garden-warp")
      )
    (((speedrun-category il-cold-pipe))
      ;; spawn outside first citadel door
      (initialize! *game-info* 'game (the-as game-save #f) "cold-pipe-warp")
      )
    (((speedrun-category new-game-plus))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category hub1-100))
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category hub2-100))
     ;; spawn at end of fire canyon
     (initialize! *game-info* 'game (the-as game-save #f) "firecanyon-end"))
    (((speedrun-category hub3-100))
     ;; spawn at end of mountain pass
     (initialize! *game-info* 'game (the-as game-save #f) "ogre-end"))
    (((speedrun-category all-cutscenes))
     ;; turn play hints back on
     (set! (-> *setting-control* default play-hints) #t)
     ;; don't allow cutscene skips
     (set! (-> *pc-settings* skip-movies?) #f)
     ;; spawn at the geyser warp gate checkpoint
     (initialize! *game-info* 'game (the-as game-save #f) "intro-start"))
    (else
     (format 0 "start-speedrun: unrecognized category ~S~%" (enum->string speedrun-category (-> *speedrun-info* category)))))
  (enforce-speedrun-pc-settings)
  ;; enable auto saving by default
  (set! (-> *setting-control* default auto-save) #t)
  (none))

(defun setup-speedrun-post-blackout ()
  (when (and (-> *speedrun-info* needs-post-blackout-setup?) (>= (-> *display* base-frame-counter) (-> *game-info* blackout-time)))
    (set! (-> *speedrun-info* needs-post-blackout-setup?) #f)
    (case (-> *speedrun-info* category)
      (((speedrun-category full-game))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        )
      (((speedrun-category il-block-world))
        )
      (((speedrun-category il-factory-cross))
        )
      (((speedrun-category il-holly-wood))
        )
      (((speedrun-category il-monument))
        )
      (((speedrun-category il-cathedral))
        )
      (((speedrun-category il-pyramid))
        )
      (((speedrun-category il-ice-canyon))
        )
      (((speedrun-category il-coins))
        )
      (((speedrun-category il-villa-cube))
        )
      (((speedrun-category il-ice-slide))
        )
      (((speedrun-category il-islands))
        )
      (((speedrun-category il-glass-towers))
        )
      (((speedrun-category il-chemical-factory))
        )
      (((speedrun-category il-space-bridge))
        )
      (((speedrun-category il-chicks))
        )
      (((speedrun-category il-garden))
        )
      (((speedrun-category il-cold-pipe))
        )
      (((speedrun-category new-game-plus))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        ;; unlock hub1 cells
        (dotimes (idx (length *hub1-cell-list*))
          (close-specific-task! (-> *hub1-cell-list* idx) (task-status need-resolution))
          (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub1-cell-list* idx)))
          )
        ;; unlock hub2 cells
        (dotimes (idx (length *hub2-cell-list*))
          (close-specific-task! (-> *hub2-cell-list* idx) (task-status need-resolution))
          (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub2-cell-list* idx)))
          )
        ;; unlock hub3 cells
        (dotimes (idx (length *hub3-cell-list*))
          (close-specific-task! (-> *hub3-cell-list* idx) (task-status need-resolution))
          (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub3-cell-list* idx)))
          )
        )
      (((speedrun-category hub1-100))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        )
      (((speedrun-category hub2-100))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        ;; unlock hub1 cells
        (dotimes (idx (length *hub1-cell-list*))
          (close-specific-task! (-> *hub1-cell-list* idx) (task-status need-resolution))
          (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub1-cell-list* idx)))
          )
        ;; give all orbs from hub1
        (set! (-> *game-info* money-total) 600.0)  ;; 50+50+150+150+150+50
        (set! (-> *game-info* money) 180.0)  ;; 50+50+150+150+150+50 - (90+90+120+120)
        )
      (((speedrun-category hub3-100))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        ;; unlock hub1 cells
        (dotimes (idx (length *hub1-cell-list*))
          (close-specific-task! (-> *hub1-cell-list* idx) (task-status need-resolution))
          (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub1-cell-list* idx)))
          )
        ;; unlock hub2 cells
        (dotimes (idx (length *hub2-cell-list*))
          (close-specific-task! (-> *hub2-cell-list* idx) (task-status need-resolution))
          (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (-> *hub2-cell-list* idx)))
          )
        ;; give all orbs from hub1+2
        (set! (-> *game-info* money-total) 1300.0)  ;; 50+50+150+150+150+50 + 50+200+200+200+50
        (set! (-> *game-info* money) 370.0)  ;; 50+50+150+150+150+50 - (90+90+120+120) + 50+200+200+200+50 - (90+90+90+120+120)
        )
      (((speedrun-category all-cutscenes))
        ;; no post-blackout actions needed
        )
      (else
        (format 0 "setup-speedrun-post-blackout: unrecognized category ~S~%" (enum->string speedrun-category (-> *speedrun-info* category)))
        )
      )
      ;; reset speedrun display (gets hidden on first collectable pickup)
      (set! (-> *speedrun-info* should-display?) #t)
      ;; reset actors to ensure any above changes take effect
      (reset-actors 'life)
      ;; autosave any changes back to file
      (auto-save-command 'auto-save 0 0 *default-pool*)
    )
  (none)
  )
(defun hide-speedrun-display ()
  (set! (-> *speedrun-info* should-display?) #f)
  (none))

(defun speedrun-mode-update ()
  "A per frame update for speedrunning related stuff"
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter
    (update-autosplit-info-jak1)
    ;; Draw info to the screen
    (speedrun-draw-settings)
    (enforce-speedrun-pc-settings)
    ;; Run after-blackout speedrun setup (if needed)
    (setup-speedrun-post-blackout))
  (none))

(defun speedrun-start-full-game-run ()
  ;; start a full game speedrun, save file is already selected so don't default to first slot
  (start-speedrun (speedrun-category full-game))
  (none))

(defun speedrun-draw-settings ()
  "Draw speedrun related settings in the bottom left corner"
  (when (and (-> *pc-settings* speedrunner-mode?) (not (paused?)) (-> *speedrun-info* should-display?))
    ;; check if we've landed (either we're on ground/surface/water, or about to target-hit-ground)
    (when (and *target*
               (or (logtest? (-> *target* control status) (cshape-moving-flags onground onsurf on-water))
                   (= (-> *target* next-state name) 'target-hit-ground)))
      (true! *has-landed?*))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id subtitle))
      (draw-string-xy (string-format "Speedrunner Mode ~%ModBase ~S / ~S ~%Category: ~S ~%Cutscene Skips ~A~%Has Landed? ~A"
                                     *pc-settings-built-sha* *mod-version-text*
                                     (enum->string speedrun-category (-> *speedrun-info* category))
                                     (-> *pc-settings* skip-movies?)
                                     *has-landed?*)
                      buf
                      0
                      (- 220 (* 8 5))
                      (font-color flat-yellow)
                      (font-flags shadow kerning))))
  (none))
