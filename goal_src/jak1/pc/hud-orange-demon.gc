;;-*-Lisp-*-
(in-package goal)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hud-orange-demon
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype hud-orange-demon (hud)
  ((ready? symbol)
   (kicked? symbol)
   (dist float)
   (grace-period time-frame)
   (demon-state symbol)
   )
  (:methods
    (make-icon (_type_ int) none)
    (kill-icon (_type_ int) none)
    (kill-all-icons (_type_) none)
    (update-display-status (_type_ int symbol) none)
    )
  )

(deftype hud-orange-demon-parts (structure)
  ((parts (pointer hud-orange-demon))
   )
  )

(define *hud-orange-demon* (new 'static 'hud-orange-demon-parts :parts #f))

(defmethod deactivate hud-orange-demon ((this hud-orange-demon))
  (if (and (-> *hud-orange-demon* parts) (= (ppointer->process (-> *hud-orange-demon* parts)) this))
      (set! (-> *hud-orange-demon* parts) (the (pointer hud-orange-demon) #f))
      )
  ((method-of-type hud deactivate) this)
  (none)
  )


(defmethod kill-icon hud-orange-demon ((this hud-orange-demon) (idx int))
  (when (and (nonzero? (-> this icons idx)) (nonzero? (-> this icons idx icon)) (-> this icons idx icon))
    (deactivate (ppointer->process (-> this icons idx icon)))
    (set! (-> this icons idx icon) #f)
    )
  (none)
  )

(defmethod kill-all-icons hud-orange-demon ((this hud-orange-demon))
  (dotimes (i (-> this nb-of-icons))
    (kill-icon this i)
    )
  (none)
  )

(defmethod make-icon hud-orange-demon ((this hud-orange-demon) (idx int))
  (kill-icon this 0)
  (hud-pc-replace-icon this 0 :skel *sidekick-sg* :z (meters 0.02))
  (none)
  )

(defmethod update-display-status hud-orange-demon ((this hud-orange-demon) (icon-idx int) (trigger-force symbol))
  (cond
    ((hidden? this)
     (when (-> this ready?)
       (set! (-> this kicked?) #f)
       (send-event this 'show)
       )
     (when (and (not (-> this ready?)) (not *progress-process*))
       (set! (-> this icons icon-idx icon-x) (the int (* 0.84 512)))
       (set! (-> this icons icon-idx icon-y) (the int (* 0.51 448)))
       (set! (-> this icons icon-idx scale-x) 0.004)
       (set! (-> this icons icon-idx scale-y) (* (-> this icons icon-idx scale-x) (/ -512.0 448.0)))
       (make-icon this icon-idx)
       (let ((icon0 (the manipy (ppointer->process (-> this icons icon-idx icon)))))
         (case (-> this demon-state)
           (('orange-demon-chase)
            (send-event icon0 'art-joint-anim "sidekick-free-walk" 0)
            (send-event icon0 'rot-quat (quaternion-axis-angle! (new-stack-quaternion0) 0.0 1.0 0.15 (degrees 210)))
            )
           (('orange-demon-dormant 'orange-demon-idle)
            (send-event icon0 'art-joint-anim "sidekick-stance-loop" 0)
            (send-event icon0 'rot-quat (quaternion-axis-angle! (new-stack-quaternion0) 0.0 1.0 0.15 (degrees 210)))
            )
           )
         (send-event icon0 'draw #f)
         )
       (true! (-> this ready?))
       )
     )
    (else
     ;; we want to be shown!
     (false! (-> this ready?))

     ;; progress is open, let's leave.
     (when (and (not (-> this kicked?)) (= *master-mode* 'progress))
         (true! (-> this kicked?))
         (send-event this 'hide-quick)
         )

     ;; update icon anims
     (let ((icon0 (the manipy (ppointer->process (-> this icons icon-idx icon)))))
       (case (-> this demon-state)
         (('orange-demon-chase)
          (send-event icon0 'art-joint-anim "sidekick-free-walk" 0)
          (send-event icon0 'rot-quat (quaternion-axis-angle! (new-stack-quaternion0) 0.0 1.0 0.15 (degrees 210)))
          )
         (('orange-demon-dormant 'orange-demon-idle)
          (send-event icon0 'art-joint-anim "sidekick-stance-loop" 0)
          (send-event icon0 'rot-quat (quaternion-axis-angle! (new-stack-quaternion0) 0.0 1.0 0.15 (degrees 210)))
          )
         )
       )

     ;; set the trigger time so we don't automatically go away
     (if (and trigger-force (!= (-> this next-state name) 'hud-leaving))
         (set! (-> this trigger-time) (current-time)))
     )
    )
  (none)
  )

(defmethod hud-update hud-orange-demon ((this hud-orange-demon))
  (when (and (not (-> this ready?)) (hidden? this))
    (kill-all-icons this)
    )
  (let ((demon (aif *orange-demon-manager* (the orange-demon (handle->process (-> it 0 demon))) (the orange-demon #f))))
    (cond
      (demon
       (set! (-> this demon-state) (-> demon next-state name))
       (set! (-> this grace-period) (-> demon grace-period))
       (set! (-> this dist) (dist-to-target demon))
       (update-display-status this 0 #t)
       )
      (else
        ;; we have nothing. kill everything.
        (unless (hidden? this)
          (false! (-> this ready?))
          (cond
            ((!= (-> this next-state name) 'hud-leaving) 
             (send-event this 'hide)
             )
            (else
             (kill-all-icons this)
             (go hud-hidden)
             )
            )
          )
        )
      )
    )
  (none)
  )

(defmethod draw-hud hud-orange-demon ((this hud-orange-demon))
  ((method-of-type hud draw-hud) this)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                               (bucket-id debug))
    (let ((str-x (+ (-> this text-x) (* (-> this x-sgn) (-> this offset))))
          (str-y (/ (* (+ (-> this text-y) (* (-> this y-sgn) (-> this offset)) (-> this y-offset))
                       (the int (-> *video-parms* relative-y-scale)))
                    2))
          (color (cond
                   ((<= (-> this dist) (meters 5)) (font-color red))
                   ((<= (-> this dist) (meters 10)) (font-color yellow))
                   (else (font-color white))
                   ))
          )
      (case (-> this demon-state)
          (('orange-demon-chase)
           (draw-string-xy (string-format "~D" (the int (/ (-> this dist) (meters 1))))
                           buf str-x str-y color (font-flags shadow kerning large middle))
           )
          (('orange-demon-idle)
           (draw-string-xy (string-format "IDLE" (-> this grace-period))
                           buf str-x str-y (font-color green) (font-flags shadow kerning large middle))
           )
          ;; (('orange-demon-dormant)
          ;;  (draw-string-xy "" buf str-x str-y (font-color white) (font-flags shadow kerning large middle))
          ;; )
        )
      )
    )
  (none)
  )


(defmethod init-particles! hud-orange-demon ((this hud-orange-demon) (arg0 int))
  (hud-pc-make-icon this HUD_ICON_COUNT :skel *sidekick-sg*
                                        :x (the int (* 0.84 512)) :y (the int (* 0.51 448)) :z (meters 0.5)
                                        :scale-x 0.004 :scale-y (* -0.004 (/ 512.0 448.0)))
  (set! (-> this text-x) (the int (* 0.84 512)))
  (set! (-> this text-y) (the int (* 0.5 448)))
  (set! (-> this x-sgn) 1)
  (set! (-> this y-sgn) 0)
  (set! (-> this increment-on-event) #t)
  (set-pos-and-scale this (= (get-aspect-ratio) 'aspect16x9) (= (get-video-mode) 'pal))
  (none)
  )

(defun deactivate-orange-demon-hud ()
  (if (-> *hud-orange-demon* parts)
    (deactivate (ppointer->process (-> *hud-orange-demon* parts)))
    )
  )

(defun activate-orange-demon-hud ((tree process-tree))
  (deactivate-orange-demon-hud)
  (set! (-> *hud-orange-demon* parts) (process-spawn hud-orange-demon :init hud-init-by-other 0
                                                                      :from *pc-dead-pool* :to tree))
  )

(activate-orange-demon-hud *display-pool*)