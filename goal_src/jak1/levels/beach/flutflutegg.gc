;;-*-Lisp-*-
(in-package goal)

;; originally in:
;; name: beach-obs.gc
;; name in dgo: beach-obs
;; dgos: BEA, L1

(deftype wobbler (basic)
  ((posx    float  :offset-assert   4)
   (posy    float  :offset-assert   8)
   (velx    float  :offset-assert  12)
   (vely    float  :offset-assert  16)
   (spring  float  :offset-assert  20)
   (damping float  :offset-assert  24)
   (height  float  :offset-assert  28)
   )
  :method-count-assert 13
  :size-assert         #x20
  :flag-assert         #xd00000020
  (:methods
    (reset! (_type_ float float float) none 9)
    (inc-xy-vel! (_type_ float float) none 10)
    (move! (_type_) none 11)
    (wobbler-method-12 (_type_ quaternion) none 12)
    )
  )


(defmethod reset! wobbler ((obj wobbler) (arg0 float) (arg1 float) (arg2 float))
  (set! (-> obj posx) 0.0)
  (set! (-> obj posy) 0.0)
  (set! (-> obj velx) 0.0)
  (set! (-> obj vely) 0.0)
  (set! (-> obj spring) arg0)
  (set! (-> obj damping) arg1)
  (set! (-> obj height) arg2)
  0
  (none)
  )

(defmethod inc-xy-vel! wobbler ((obj wobbler) (arg0 float) (arg1 float))
  (+! (-> obj velx) arg0)
  (+! (-> obj vely) arg1)
  0
  (none)
  )

(defmethod move! wobbler ((obj wobbler))
  (+! (-> obj posx) (* (-> obj velx) (-> *display* seconds-per-frame)))
  (+! (-> obj posy) (* (-> obj vely) (-> *display* seconds-per-frame)))
  (set! (-> obj velx) (* (-> obj velx) (-> obj damping)))
  (set! (-> obj vely) (* (-> obj vely) (-> obj damping)))
  (+! (-> obj velx) (* -1.0 (-> obj posx) (-> obj spring)))
  (+! (-> obj vely) (* -1.0 (-> obj posy) (-> obj spring)))
  0
  (none)
  )

(defmethod wobbler-method-12 wobbler ((obj wobbler) (arg0 quaternion))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 x) (-> obj posy))
    (set! (-> s5-0 y) 0.0)
    (set! (-> s5-0 z) (- (-> obj posx)))
    (vector-normalize! s5-0 1.0)
    (let* ((f0-8 (/ (sqrtf (+ (* (-> obj posx) (-> obj posx)) (* (-> obj posy) (-> obj posy)))) (-> obj height)))
           (f0-9 (atan f0-8 1.0))
           )
      (quaternion-vector-angle! arg0 s5-0 f0-9)
      )
    )
  0
  (none)
  )
  
(deftype flutflutegg (process-drawable)
  ((root-override       collide-shape-moving         :offset        112)
   (fall-dist           meters                       :offset-assert 176)
   (start               vector               :inline :offset-assert 192)
   (dir                 vector               :inline :offset-assert 208)
   (pos                 float                        :offset-assert 224)
   (vel                 float                        :offset-assert 228)
   (wobbler             wobbler                      :offset-assert 232)
   (last-impulse-time   int32                        :offset-assert 236)
   (incomming-attack-id uint64                       :offset-assert 240)
   (ambients-played     int32                        :offset-assert 248)
   (ambient             ambient-control      :inline :offset-assert 256)
   (num-hit   int32 )
   (max-hp int32)
   (eco-collectable int32)
   (eco-quantity int32)
   )

  (:methods
    (flutflutegg-method-20 (_type_ float float float) none 20)
    )
  (:states
    (flutflutegg-break symbol)
    flutflutegg-idle
    flutflutegg-physics
    flutflutegg-physics-fall
    )
  )


(defskelgroup *flutflutegg-sg* flutflutegg flutflutegg-lod0-jg flutflutegg-idle-ja
              ((flutflutegg-lod0-mg (meters 20)) (flutflutegg-lod1-mg (meters 40)) (flutflutegg-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 3.5 0 3.5)
              )

(defskelgroup *flutflut-naked-sg* flutflut flutflut-lod0-jg flutflut-flutflut-idle-ja
              ((flutflut-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

(defmethod relocate flutflutegg ((obj flutflutegg) (arg0 int))
  (if (nonzero? (-> obj wobbler))
      (&+! (-> obj wobbler) arg0)
      )
  (the-as
    flutflutegg
    ((the-as (function process-drawable int process-drawable) (find-parent-method flutflutegg 7)) obj arg0)
    )
  )

;; WARN: Function (method 20 flutflutegg) has a return type of none, but the expression builder found a return statement.
(defmethod flutflutegg-method-20 flutflutegg ((obj flutflutegg) (arg0 float) (arg1 float) (arg2 float))
  (if (< (- (-> *display* base-frame-counter) (the-as time-frame (-> obj last-impulse-time))) (seconds 0.5))
      (return 0)
      )
  (set! (-> obj last-impulse-time) (the-as int (-> *display* base-frame-counter)))
  (+! (-> obj vel) arg0)
  (inc-xy-vel! (-> obj wobbler) arg1 arg2)
  0
  (none)
  )

(defbehavior flutflutegg-hit-sounds flutflutegg ()
  (sound-play "egg-hit")
       (set! (-> self num-hit) (+ (-> self num-hit)1))
       (when (= (- (-> self max-hp)1) (-> self num-hit))
       ;;Want to crack the egg here when it has 1 hp left

       )

       (when (= (-> self max-hp) (-> self num-hit))
       

        (birth-pickup-at-point 
              (-> self root trans) 
              (the pickup-type (-> self eco-collectable)) 
              (the float(-> self eco-quantity)) 
              #f
              *target* 
              (the-as fact-info #f))
           (go flutflutegg-break #t)
       )


  (cond
    ((not (task-closed? (game-task beach-flutflut) (task-status need-introduction)))
     )
    ((not (logtest? (-> self ambients-played) 8))
     (if (play-ambient (-> self ambient) "BIR-AM04" #f (the-as vector #f))
         (logior! (-> self ambients-played) 8)
         )
     )
    ((not (logtest? (-> self ambients-played) 512))
     (if (play-ambient (-> self ambient) "BIR-AM10" #f (the-as vector #f))
         (logior! (-> self ambients-played) 512)
         )
     )
    )
  (none)
  )

(defstate flutflutegg-idle (flutflutegg)
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (when (and (= event-type 'attack)
               (or (= (-> event param 1) 'punch) (= (-> event param 1) 'spin) (= (-> event param 1) 'spin-air))
               (!= (-> self incomming-attack-id) (-> event param 2))
               )
      (set! (-> self incomming-attack-id) (-> event param 2))
      (flutflutegg-hit-sounds)
       

      (let ((s5-1
              (vector-! (new-stack-vector0) (-> (the-as process-drawable proc) root trans) (-> self root-override trans))
              )
            )
        (set! (-> s5-1 y) 0.0)
        (vector-normalize! s5-1 1.0)
        (let ((f0-2 (vector-dot s5-1 (-> self dir)))
              (f1-2 (- (* (-> s5-1 x) (-> self dir z)) (* (-> s5-1 z) (-> self dir x))))
              )
          (if (< f0-2 -0.7)
              (flutflutegg-method-20 self 24576.0 (* -8192.0 f1-2) (* -8192.0 f0-2))
              (flutflutegg-method-20 self 0.0 (* -8192.0 f1-2) (* -8192.0 f0-2))
              )
          )
        )
      (go flutflutegg-physics)
      )
    )
  :trans (behavior ()
    (let* ((gp-0 (ambient-control-method-10 (-> self ambient) (new 'stack-no-clear 'vector) (seconds 3) 368640.0 self))
           (v1-2 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-3 (the-as number (logior #x3f800000 v1-2)))
           (f30-0 (+ -1.0 (the-as float v1-3)))
           )
      (cond
        ((not (task-closed? (game-task beach-flutflut) (task-status need-introduction)))
         )
        ((not gp-0)
         )
        ((< 327680.0 (vector-length gp-0))
         (set! (-> self ambients-played) 0)
         0
         )
        ((and (not (logtest? (-> self ambients-played) 1)) (< (vector-length gp-0) 327680.0) (< -61440.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM01" #f (the-as vector #f))
             (logior! (-> self ambients-played) 1)
             )
         )
        ((and (not (logtest? (-> self ambients-played) 2)) (< (vector-length gp-0) 163840.0) (< -40960.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM02" #f (the-as vector #f))
             (logior! (-> self ambients-played) 2)
             )
         )
        ((and (not (logtest? (-> self ambients-played) 16)) (< (vector-length gp-0) 81920.0) (< -24576.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM05" #f (the-as vector #f))
             (logior! (-> self ambients-played) 16)
             )
         )
        ((and (not (logtest? (-> self ambients-played) 4)) (< (vector-length gp-0) 40960.0) (< -24576.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM03" #f (the-as vector #f))
             (logior! (-> self ambients-played) 4)
             )
         )
        ((< (-> gp-0 y) -24576.0)
         )
        ((< (- (-> *display* base-frame-counter) (-> self ambient last-ambient-time)) (seconds 30))
         )
        ((< 0.8 f30-0)
         (play-ambient (-> self ambient) "BIR-AM07" #f (-> self root-override trans))
         )
        ((< 0.6 f30-0)
         (play-ambient (-> self ambient) "BIR-AM08" #f (-> self root-override trans))
         )
        ((< 0.4 f30-0)
         (play-ambient (-> self ambient) "BIR-AM09" #f (-> self root-override trans))
         )
        ((< 0.2 f30-0)
         (play-ambient (-> self ambient) "BIR-AM12" #f (-> self root-override trans))
         )
        (else
          (play-ambient (-> self ambient) "BIR-AM13" #f (-> self root-override trans))
          )
        )
      )
    (none)
    )
  :code (behavior ()
    (ja-post)
    (loop
      (suspend)
      )
    (none)
    )
  )

(defstate flutflutegg-physics (flutflutegg)
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as
      object
      (when (and (>= (- (-> *display* base-frame-counter) (-> self state-time)) (seconds 0.5))
                 (= event-type 'attack)
                 (or (= (-> event param 1) 'punch) (= (-> event param 1) 'spin) (= (-> event param 1) 'spin-air))
                 (!= (-> self incomming-attack-id) (-> event param 2))
                 )
        (set! (-> self incomming-attack-id) (-> event param 2))
        (flutflutegg-hit-sounds)
        (let ((s5-1
                (vector-! (new-stack-vector0) (-> (the-as process-drawable proc) root trans) (-> self root-override trans))
                )
              )
          (set! (-> s5-1 y) 0.0)
          (vector-normalize! s5-1 1.0)
          (let ((f0-2 (vector-dot s5-1 (-> self dir)))
                (f1-2 (- (* (-> s5-1 x) (-> self dir z)) (* (-> s5-1 z) (-> self dir x))))
                )
            (if (< f0-2 -0.7)
                (the-as symbol (flutflutegg-method-20 self 24576.0 (* -8192.0 f1-2) (* -8192.0 f0-2)))
                (the-as symbol (flutflutegg-method-20 self 0.0 (* -8192.0 f1-2) (* -8192.0 f0-2)))
                )
            )
          )
        )
      )
    )
  :code (behavior ()
    (set! (-> self state-time) (-> *display* base-frame-counter))
    (loop
      (+! (-> self pos) (* (-> self vel) (-> *display* seconds-per-frame)))
      ;; PAL patch here
      (set! (-> self vel) (* (-> self vel) (- 1.0 (* 0.05 (-> *display* time-adjust-ratio)))))
      (move! (-> self wobbler))
      (let ((a1-0 (new 'stack-no-clear 'vector)))
        (vector-float*! a1-0 (-> self dir) (-> self pos))
        (vector+! a1-0 a1-0 (-> self start))
        (move-to-point! (-> self root-override) a1-0)
        )
      (wobbler-method-12 (-> self wobbler) (-> self root-override quat))
      (let ((a2-3 (quaternion-axis-angle! (new 'stack-no-clear 'quaternion) 0.0 1.0 0.0 -18204.445)))
        (quaternion*! (-> self root-override quat) (-> self root-override quat) a2-3)
        )
      (suspend)
      (when (>= (-> self pos) (-> self fall-dist))
        (when (task-closed? (game-task beach-flutflut) (task-status need-introduction))
          (if (play-ambient (-> self ambient) "BIR-AM06" #f (the-as vector #f))
              (logior! (-> self ambients-played) 32)
              )
          )
        (go flutflutegg-physics-fall)
        )
      )
    (none)
    )
  :post (the-as (function none :behavior flutflutegg) ja-post)
  )

(defstate flutflutegg-physics-fall (flutflutegg)
  :code (behavior ()
    (local-vars (v1-25 symbol))
    (process-spawn
      camera-tracker
      :init camera-tracker-init
      (lambda :behavior camera-tracker
        ()
        (while (not (process-grab? *target*))
          (suspend)
          )
        (camera-change-to "camera-135" 0 #f)
        (camera-look-at (the-as pair (ppointer->process (-> self parent))) (the-as uint 9))
        (let ((gp-0 (-> *display* base-frame-counter)))
          (until (>= (- (-> *display* base-frame-counter) gp-0) (seconds 4))
            (suspend)
            )
          )
        (while (not (process-release? (handle->process (-> self grab-target))))
          (suspend)
          )
        (camera-look-at (the-as pair *target*) (the-as uint 0))
        (send-event *camera* 'blend-from-as-fixed)
        (camera-change-to (the-as string 'base) 75 #f)
        (none)
        )
      :to self
      )
    (close-specific-task! (game-task beach-flutflut) (task-status need-reminder))
    (loop
      (vector-float*! (-> self root-override transv) (-> self dir) (-> self vel))
      (set! (-> self state-time) (-> *display* base-frame-counter))
      (until v1-25
        (vector-v++!
          (-> self root-override transv)
          (compute-acc-due-to-gravity (-> self root-override) (new-stack-vector0) 0.0)
          )
        (integrate-for-enemy-with-move-to-ground!
          (-> self root-override)
          (-> self root-override transv)
          (collide-kind background)
          8192.0
          #f
          #f
          #f
          )
        (move! (-> self wobbler))
        (wobbler-method-12 (-> self wobbler) (-> self root-override quat))
        (let ((a2-6 (quaternion-axis-angle! (new 'stack-no-clear 'quaternion) 0.0 1.0 0.0 -18204.445)))
          (quaternion*! (-> self root-override quat) (-> self root-override quat) a2-6)
          )
        (suspend)
        (set! v1-25 (and (>= (- (-> *display* base-frame-counter) (-> self state-time)) (seconds 0.5))
                         (logtest? (-> self root-override status) (cshape-moving-flags onsurf))
                         )
              )
        )
      (sound-play "sack-land" :vol 200)
      (go flutflutegg-break #f)
      )
    (none)
    )
  :post (the-as (function none :behavior flutflutegg) ja-post)
  )

(defstate flutflutegg-break (flutflutegg)
  :code (behavior ((arg0 symbol))
    (cond
      ;; ((name= (-> self name) "jakup-beach-flutflutegg-01")
      ;;   (set-vector! (-> self root-override trans) -231190.94 64559.105 -1164727.5 1.0)
      ;;   (quaternion-axis-angle! (-> self root-override quat) 0.0 1.0 0.0 -18204.445)
      ;;   )
      (arg0
        (set-vector! (-> self root-override trans) -231190.94 64559.105 -1164727.5 1.0)
        (quaternion-axis-angle! (-> self root-override quat) 0.0 1.0 0.0 -18204.445)
        )
      )
    (suspend)
    (update-transforms! (-> self root-override))
    (when (not arg0)
      (ja-no-eval :group! (-> self draw art-group data 5) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    (ja :group! (-> self draw art-group data 5) :num! max)
    (while (and (not (task-closed? (game-task beach-flutflut) (task-status need-reward-speech)))
                (not (logtest? (-> self ambients-played) 1024))
                )
      (if (play-ambient (-> self ambient) "BIR-AM11" #f (the-as vector #f))
          (logior! (-> self ambients-played) 1024)
          )
      (suspend)
      )
    (let ((gp-2 (-> *display* base-frame-counter)))
      (while (not (task-closed? (game-task beach-flutflut) (task-status need-reward-speech)))
        (if (>= (- (-> *display* base-frame-counter) gp-2) (seconds 10))
            (level-hint-spawn
              (text-id beach-flutflutegg-hint)
              "sksp0029"
              (the-as entity #f)
              *entity-pool*
              (game-task none)
              )
            )
        (suspend)
        )
      )
    (ja-channel-set! 0)
    (while (not (task-closed? (game-task beach-flutflut) (task-status need-resolution)))
      (suspend)
      )
    (ja-channel-set! 1)
    (set-vector! (-> self root-override trans) -231190.94 64559.105 -1164727.5 1.0)
    (quaternion-axis-angle! (-> self root-override quat) 0.0 1.0 0.0 0.0)
    (ja :group! (-> self draw art-group data 6) :num! max)
    (loop
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    (none)
    )
  :post (the-as (function none :behavior flutflutegg) ja-post)
  )

(defun get-intstr-from-lump ((obj process-drawable) (field symbol))
(string->int (the string (res-lump-struct (entity-by-name (the string (-> obj name))) field structure)))
)


(defmethod init-from-entity! flutflutegg ((obj flutflutegg) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape-moving obj (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set-vector! (-> s3-0 local-sphere) 0.0 12288.0 0.0 12288.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set-vector! (-> s2-0 local-sphere) 0.0 (* 0.2 8192.0) 0.0 (* 0.2 8192.0))
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set-vector! (-> s2-1 local-sphere) 0.0 (* 0.2 16384.0) 0.0 (* 0.2 7782.4))
        (append-prim s3-0 s2-1)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> obj root-override) s4-0)
    )
  (process-drawable-from-entity! obj arg0)
  (initialize-skeleton obj *flutflutegg-sg* '())
  (vector-z-quaternion! (-> obj dir) (-> obj root-override quat))
  (set! (-> obj start quad) (-> obj root-override trans quad))
  (set! (-> obj fall-dist) 20480.0)
  (set-yaw-angle-clear-roll-pitch! (-> obj root-override) (+ -16384.0 (y-angle (-> obj root-override))))
  (set! (-> obj pos) 0.0)
  (set! (-> obj vel) 0.0)
  (set! (-> obj wobbler) (new 'process 'wobbler))
  (reset! (-> obj wobbler) 0.1 0.98 4096.0)
  (set! (-> obj last-impulse-time) 0)
  (set! (-> obj ambients-played) 0)
  
  (set! (-> obj root scale x) 0.2)
  (set! (-> obj root scale y) 0.2)
  (set! (-> obj root scale z) 0.2)
  (set! (-> obj max-hp) 3) 
  (set! (-> obj eco-collectable)  (get-intstr-from-lump obj 'eco-collectable))
  (set! (-> obj eco-quantity)  (get-intstr-from-lump obj 'eco-quantity))

  (if (and (task-closed? (game-task beach-flutflut) (task-status need-reminder)) (not (name= (-> obj name) "jakup-beach-flutflutegg-01")))
      (go flutflutegg-break #t)
      (go flutflutegg-idle)
      )
  (none)
  )

