(deftype wobbler (basic)
  ((posx     float)
   (posy     float)
   (velx     float)
   (vely     float)
   (spring   float)
   (damping  float)
   (height   float)
   )
  (:methods
    (reset! (_type_ float float float) none)
    (inc-xy-vel! (_type_ float float) none)
    (move! (_type_) none)
    (wobbler-method-12 (_type_ quaternion) none)
    )
  )


(defmethod reset! ((this wobbler) (arg0 float) (arg1 float) (arg2 float))
  (set! (-> this posx) 0.0)
  (set! (-> this posy) 0.0)
  (set! (-> this velx) 0.0)
  (set! (-> this vely) 0.0)
  (set! (-> this spring) arg0)
  (set! (-> this damping) arg1)
  (set! (-> this height) arg2)
  0
  (none)
  )

(defmethod inc-xy-vel! ((this wobbler) (arg0 float) (arg1 float))
  (+! (-> this velx) arg0)
  (+! (-> this vely) arg1)
  0
  (none)
  )

(defmethod move! ((this wobbler))
  (+! (-> this posx) (* (-> this velx) (seconds-per-frame)))
  (+! (-> this posy) (* (-> this vely) (seconds-per-frame)))
  (set! (-> this velx) (* (-> this velx) (-> this damping)))
  (set! (-> this vely) (* (-> this vely) (-> this damping)))
  (+! (-> this velx) (* -1.0 (-> this posx) (-> this spring)))
  (+! (-> this vely) (* -1.0 (-> this posy) (-> this spring)))
  0
  (none)
  )

(defmethod wobbler-method-12 ((this wobbler) (arg0 quaternion))
  (let ((s5-0 (new 'stack-no-clear 'vector)))
    (set! (-> s5-0 x) (-> this posy))
    (set! (-> s5-0 y) 0.0)
    (set! (-> s5-0 z) (- (-> this posx)))
    (vector-normalize! s5-0 1.0)
    (let* ((f0-8 (/ (sqrtf (+ (* (-> this posx) (-> this posx)) (* (-> this posy) (-> this posy)))) (-> this height)))
           (f0-9 (atan f0-8 1.0))
           )
      (quaternion-vector-angle! arg0 s5-0 f0-9)
      )
    )
  0
  (none)
  )


(deftype flutflutegg (process-drawable)
  ((root                 collide-shape-moving :override)
   (fall-dist            meters)
   (start                vector                :inline)
   (dir                  vector                :inline)
   (pos                  float)
   (vel                  float)
   (wobbler              wobbler)
   (last-impulse-time    int32)
   (incomming-attack-id  uint64)
   (ambients-played      int32)
   (ambient              ambient-control       :inline)
   )
  (:methods
    (flutflutegg-method-20 (_type_ float float float) none)
    )
  (:states
    (flutflutegg-break symbol)
    flutflutegg-idle
    flutflutegg-physics
    flutflutegg-physics-fall
    )
  )


(defskelgroup *flutflutegg-sg* flutflutegg flutflutegg-lod0-jg flutflutegg-idle-ja
              ((flutflutegg-lod0-mg (meters 20)) (flutflutegg-lod1-mg (meters 40)) (flutflutegg-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 3.5 0 3.5)
              )

(defskelgroup *flutflut-naked-sg* flutflut flutflut-lod0-jg flutflut-flutflut-idle-ja
              ((flutflut-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 8)
              )

(defmethod relocate ((this flutflutegg) (arg0 int))
  (if (nonzero? (-> this wobbler))
      (&+! (-> this wobbler) arg0)
      )
  (call-parent-method this arg0)
  )

;; WARN: Function (method 20 flutflutegg) has a return type of none, but the expression builder found a return statement.
(defmethod flutflutegg-method-20 ((this flutflutegg) (arg0 float) (arg1 float) (arg2 float))
  (if (not (time-elapsed? (the-as time-frame (-> this last-impulse-time)) (seconds 0.5)))
      (return 0)
      )
  (set! (-> this last-impulse-time) (the-as int (current-time)))
  (+! (-> this vel) arg0)
  (inc-xy-vel! (-> this wobbler) arg1 arg2)
  0
  (none)
  )

(defbehavior flutflutegg-hit-sounds flutflutegg ()
  (sound-play "egg-hit")
  (cond
    ((not (task-closed? (game-task beach-flutflut) (task-status need-introduction)))
     )
    ((not (logtest? (-> self ambients-played) 8))
     (if (play-ambient (-> self ambient) "BIR-AM04" #f (the-as vector #f))
         (logior! (-> self ambients-played) 8)
         )
     )
    ((not (logtest? (-> self ambients-played) 512))
     (if (play-ambient (-> self ambient) "BIR-AM10" #f (the-as vector #f))
         (logior! (-> self ambients-played) 512)
         )
     )
    )
  (none)
  )

(defstate flutflutegg-idle (flutflutegg)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (when (and (= message 'attack)
               (or (= (-> block param 1) 'punch) (= (-> block param 1) 'spin) (= (-> block param 1) 'spin-air))
               (!= (-> self incomming-attack-id) (-> block param 2))
               )
      (set! (-> self incomming-attack-id) (-> block param 2))
      (flutflutegg-hit-sounds)
      (let ((s5-1 (vector-! (new-stack-vector0) (-> (the-as process-drawable proc) root trans) (-> self root trans))))
        (set! (-> s5-1 y) 0.0)
        (vector-normalize! s5-1 1.0)
        (let ((f0-2 (vector-dot s5-1 (-> self dir)))
              (f1-2 (- (* (-> s5-1 x) (-> self dir z)) (* (-> s5-1 z) (-> self dir x))))
              )
          (if (< f0-2 -0.7)
              (flutflutegg-method-20 self 24576.0 (* -8192.0 f1-2) (* -8192.0 f0-2))
              (flutflutegg-method-20 self 0.0 (* -8192.0 f1-2) (* -8192.0 f0-2))
              )
          )
        )
      (go flutflutegg-physics)
      )
    )
  :trans (behavior ()
    (let* ((gp-0 (ambient-control-method-10 (-> self ambient) (new 'stack-no-clear 'vector) (seconds 3) 368640.0 self))
           (v1-2 (/ (the-as int (rand-uint31-gen *random-generator*)) 256))
           (v1-3 (the-as number (logior #x3f800000 v1-2)))
           (f30-0 (+ -1.0 (the-as float v1-3)))
           )
      (cond
        ((not (task-closed? (game-task beach-flutflut) (task-status need-introduction)))
         )
        ((not gp-0)
         )
        ((< 327680.0 (vector-length gp-0))
         (set! (-> self ambients-played) 0)
         0
         )
        ((and (not (logtest? (-> self ambients-played) 1)) (< (vector-length gp-0) 327680.0) (< -61440.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM01" #f (the-as vector #f))
             (logior! (-> self ambients-played) 1)
             )
         )
        ((and (not (logtest? (-> self ambients-played) 2)) (< (vector-length gp-0) 163840.0) (< -40960.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM02" #f (the-as vector #f))
             (logior! (-> self ambients-played) 2)
             )
         )
        ((and (not (logtest? (-> self ambients-played) 16)) (< (vector-length gp-0) 81920.0) (< -24576.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM05" #f (the-as vector #f))
             (logior! (-> self ambients-played) 16)
             )
         )
        ((and (not (logtest? (-> self ambients-played) 4)) (< (vector-length gp-0) 40960.0) (< -24576.0 (-> gp-0 y)))
         (if (play-ambient (-> self ambient) "BIR-AM03" #f (the-as vector #f))
             (logior! (-> self ambients-played) 4)
             )
         )
        ((< (-> gp-0 y) -24576.0)
         )
        ((not (time-elapsed? (-> self ambient last-ambient-time) (seconds 30)))
         )
        ((< 0.8 f30-0)
         (play-ambient (-> self ambient) "BIR-AM07" #f (-> self root trans))
         )
        ((< 0.6 f30-0)
         (play-ambient (-> self ambient) "BIR-AM08" #f (-> self root trans))
         )
        ((< 0.4 f30-0)
         (play-ambient (-> self ambient) "BIR-AM09" #f (-> self root trans))
         )
        ((< 0.2 f30-0)
         (play-ambient (-> self ambient) "BIR-AM12" #f (-> self root trans))
         )
        (else
          (play-ambient (-> self ambient) "BIR-AM13" #f (-> self root trans))
          )
        )
      )
    )
  :code (behavior ()
    (ja-post)
    (loop
      (suspend)
      )
    )
  )

(defstate flutflutegg-physics (flutflutegg)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (when (and (time-elapsed? (-> self state-time) (seconds 0.5))
               (= message 'attack)
               (or (= (-> block param 1) 'punch) (= (-> block param 1) 'spin) (= (-> block param 1) 'spin-air))
               (!= (-> self incomming-attack-id) (-> block param 2))
               )
      (set! (-> self incomming-attack-id) (-> block param 2))
      (flutflutegg-hit-sounds)
      (let ((s5-1 (vector-! (new-stack-vector0) (-> (the-as process-drawable proc) root trans) (-> self root trans))))
        (set! (-> s5-1 y) 0.0)
        (vector-normalize! s5-1 1.0)
        (let ((f0-2 (vector-dot s5-1 (-> self dir)))
              (f1-2 (- (* (-> s5-1 x) (-> self dir z)) (* (-> s5-1 z) (-> self dir x))))
              )
          (if (< f0-2 -0.7)
              (flutflutegg-method-20 self 24576.0 (* -8192.0 f1-2) (* -8192.0 f0-2))
              (flutflutegg-method-20 self 0.0 (* -8192.0 f1-2) (* -8192.0 f0-2))
              )
          )
        )
      )
    )
  :code (behavior ()
    (set-time! (-> self state-time))
    (loop
      (+! (-> self pos) (* (-> self vel) (seconds-per-frame)))
      ;; og:preserve-this PAL patch here
      (set! (-> self vel) (* (-> self vel) (- 1.0 (* 0.05 (-> *display* time-adjust-ratio)))))
      (move! (-> self wobbler))
      (let ((a1-0 (new 'stack-no-clear 'vector)))
        (vector-float*! a1-0 (-> self dir) (-> self pos))
        (vector+! a1-0 a1-0 (-> self start))
        (move-to-point! (-> self root) a1-0)
        )
      (wobbler-method-12 (-> self wobbler) (-> self root quat))
      (let ((a2-3 (quaternion-axis-angle! (new 'stack-no-clear 'quaternion) 0.0 1.0 0.0 -18204.445)))
        (quaternion*! (-> self root quat) (-> self root quat) a2-3)
        )
      (suspend)
      (when (>= (-> self pos) (-> self fall-dist))
        (when (task-closed? (game-task beach-flutflut) (task-status need-introduction))
          (if (play-ambient (-> self ambient) "BIR-AM06" #f (the-as vector #f))
              (logior! (-> self ambients-played) 32)
              )
          )
        (go flutflutegg-physics-fall)
        )
      )
    )
  :post ja-post
  )

(defstate flutflutegg-physics-fall (flutflutegg)
  :code (behavior ()
    (local-vars (v1-25 symbol))
    (process-spawn
      camera-tracker
      :init camera-tracker-init
      (lambda :behavior camera-tracker
        ()
        (while (not (process-grab? *target*))
          (suspend)
          )
        (camera-change-to "camera-135" 0 #f)
        (camera-look-at (the-as pair (ppointer->process (-> self parent))) (the-as uint 9))
        (let ((gp-0 (current-time)))
          (until (time-elapsed? gp-0 (seconds 4))
            (suspend)
            )
          )
        (while (not (process-release? (handle->process (-> self grab-target))))
          (suspend)
          )
        (camera-look-at (the-as pair *target*) (the-as uint 0))
        (send-event *camera* 'blend-from-as-fixed)
        (camera-change-to (the-as string 'base) 75 #f)
        (none)
        )
      :to self
      )
    (close-specific-task! (game-task beach-flutflut) (task-status need-reminder))
    (loop
      (vector-float*! (-> self root transv) (-> self dir) (-> self vel))
      (set-time! (-> self state-time))
      (until v1-25
        (vector-v++! (-> self root transv) (compute-acc-due-to-gravity (-> self root) (new-stack-vector0) 0.0))
        (integrate-for-enemy-with-move-to-ground!
          (-> self root)
          (-> self root transv)
          (collide-kind background)
          8192.0
          #f
          #f
          #f
          )
        (move! (-> self wobbler))
        (wobbler-method-12 (-> self wobbler) (-> self root quat))
        (let ((a2-6 (quaternion-axis-angle! (new 'stack-no-clear 'quaternion) 0.0 1.0 0.0 -18204.445)))
          (quaternion*! (-> self root quat) (-> self root quat) a2-6)
          )
        (suspend)
        (set! v1-25 (and (time-elapsed? (-> self state-time) (seconds 0.5))
                         (logtest? (-> self root status) (cshape-moving-flags onsurf))
                         )
              )
        )
      (sound-play "sack-land" :vol 200)
      (go flutflutegg-break #f)
      )
    )
  :post ja-post
  )

(defstate flutflutegg-break (flutflutegg)
  :code (behavior ((arg0 symbol))
    (when arg0
      (set-vector! (-> self root trans) -231190.94 64559.105 -1164727.5 1.0)
      (quaternion-axis-angle! (-> self root quat) 0.0 1.0 0.0 -18204.445)
      )
    (suspend)
    (update-transforms! (-> self root))
    (when (not arg0)
      (ja-no-eval :group! flutflutegg-crack-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    (ja :group! flutflutegg-crack-ja :num! max)
    (while (and (not (task-closed? (game-task beach-flutflut) (task-status need-reward-speech)))
                (not (logtest? (-> self ambients-played) 1024))
                )
      (if (play-ambient (-> self ambient) "BIR-AM11" #f (the-as vector #f))
          (logior! (-> self ambients-played) 1024)
          )
      (suspend)
      )
    (let ((gp-2 (current-time)))
      (while (not (task-closed? (game-task beach-flutflut) (task-status need-reward-speech)))
        (if (time-elapsed? gp-2 (seconds 10))
            (level-hint-spawn
              (text-id beach-flutflutegg-hint)
              "sksp0029"
              (the-as entity #f)
              *entity-pool*
              (game-task none)
              )
            )
        (suspend)
        )
      )
    (ja-channel-set! 0)
    (while (not (task-closed? (game-task beach-flutflut) (task-status need-resolution)))
      (suspend)
      )
    (ja-channel-set! 1)
    (set-vector! (-> self root trans) -231190.94 64559.105 -1164727.5 1.0)
    (quaternion-axis-angle! (-> self root quat) 0.0 1.0 0.0 0.0)
    (ja :group! flutflutegg-broke-ja :num! max)
    (loop
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      )
    )
  :post ja-post
  )

(defmethod init-from-entity! ((this flutflutegg) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    (let ((s3-0 (new 'process 'collide-shape-prim-group s4-0 (the-as uint 2) 0)))
      (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set-vector! (-> s3-0 local-sphere) 0.0 12288.0 0.0 12288.0)
      (set-root-prim! s4-0 s3-0)
      (let ((s2-0 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-0 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-0 collide-with) (collide-kind target))
        (set! (-> s2-0 prim-core action) (collide-action solid))
        (set! (-> s2-0 prim-core offense) (collide-offense indestructible))
        (set-vector! (-> s2-0 local-sphere) 0.0 8192.0 0.0 8192.0)
        (append-prim s3-0 s2-0)
        )
      (let ((s2-1 (new 'process 'collide-shape-prim-sphere s4-0 (the-as uint 0))))
        (set! (-> s2-1 prim-core collide-as) (collide-kind enemy))
        (set! (-> s2-1 collide-with) (collide-kind target))
        (set! (-> s2-1 prim-core action) (collide-action solid))
        (set! (-> s2-1 prim-core offense) (collide-offense indestructible))
        (set-vector! (-> s2-1 local-sphere) 0.0 16384.0 0.0 7782.4)
        (append-prim s3-0 s2-1)
        )
      )
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0)
    )
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *flutflutegg-sg* '())
  (vector-z-quaternion! (-> this dir) (-> this root quat))
  (set! (-> this start quad) (-> this root trans quad))
  (set! (-> this fall-dist) 20480.0)
  (set-yaw-angle-clear-roll-pitch! (-> this root) (+ -16384.0 (y-angle (-> this root))))
  (set! (-> this pos) 0.0)
  (set! (-> this vel) 0.0)
  (set! (-> this wobbler) (new 'process 'wobbler))
  (reset! (-> this wobbler) 0.1 0.98 4096.0)
  (set! (-> this last-impulse-time) 0)
  (set! (-> this ambients-played) 0)
  (if (task-closed? (game-task beach-flutflut) (task-status need-reminder))
      (go flutflutegg-break #t)
      (go flutflutegg-idle)
      )
  (none)
  )