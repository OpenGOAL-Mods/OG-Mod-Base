;;-*-Lisp-*-
(in-package goal)

(deftype CustomPlat (plat-eco)
  ())

(defmethod init-from-entity! ((this CustomPlat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (set! (-> this notice-dist) (res-lump-float arg0 'notice-dist :default -1.0))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (baseplat-method-24 this)
  (process-drawable-from-entity! this arg0)
  (let ((s4-0 (get-unlit-skel this))
        (s5-1 (get-lit-skel this)))
    (initialize-skeleton this s4-0 '())
    (setup-lods! (-> this unlit-look) s4-0 (-> this draw art-group) (-> this entity))
    (setup-lods! (-> this lit-look) s5-1 (-> this draw art-group) (-> this entity)))
  (logclear! (-> this mask) (process-mask actor-pause))
  (update-transforms! (-> this root))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 107) this))
  (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-pill-inc)))
  (load-params! (-> this sync) this (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> this sync-offset-dest) (-> this sync offset))
  (set! (-> this sync-linear-val) (get-phase-offset (-> this sync)))
  (sync-now! (-> this sync) (-> this sync-linear-val))
  (set! (-> this sync-offset-faux) (-> this sync offset))
  (cond
    ((logtest? (-> this path flags) (path-control-flag not-found))
     (set! (-> this path-pos) 0.0)
     (let ((a0-14 this)) (baseplat-method-26 a0-14) (go (method-of-object this plat-startup) a0-14)))
    ((> (-> this sync period) 0)
     (set! (-> this path-pos)
           (if (logtest? (-> this fact options) (fact-options wrap-phase))
             (get-current-phase (-> this sync))
             (get-current-phase-with-mirror (-> this sync))))))
  (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
  (set! (-> this sound-id) (new-sound-id))
  (baseplat-method-26 this)
  (baseplat-method-21 this)
  (if (or (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
          (< (-> this notice-dist) 0.0))
    (go (method-of-object this plat-path-active) (the-as plat #t))
    (go (method-of-object this plat-idle)))
  (none))

(defstate plat-idle (CustomPlat)
  :virtual #t
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('wake) (go-virtual plat-path-active (the-as plat #f)))
        (('eco-blue) (go-virtual notice-blue (process->handle proc)))
        (('ridden 'edge-grabbed)
         (when (send-event *target* 'query 'powerup (pickup-type eco-blue))
           (send-to-all (-> self link) 'wake)
           (go-virtual plat-path-active (the-as plat #f))))))
  :enter
    (behavior ()
      (lods-assign! (-> self draw) (-> self unlit-look)))
  :trans
    (behavior ()
      (when (and (and *target* (>= (-> self notice-dist) (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                 (send-event *target* 'query 'powerup (pickup-type eco-blue)))
        (send-to-all (-> self link) 'wake)
        (go-virtual plat-path-active (the-as plat #f))))
  :code
    (behavior ()
      (ja-post)
      (update-transforms! (-> self root))
      (anim-loop))
  :post ja-post)

(deftype SeekPlat (plat)
  ((master-direction symbol)
   (loop-direction   symbol)))

(defstate plat-path-active (SeekPlat)
  :virtual #t
  :event plat-event
  :exit
    (behavior ()
      (sound-stop (-> self sound-id)))
  :trans
    (behavior ()
      (let ((threshold 0.001))
        (when (and (< (fabs (- 1.0 (-> self path-pos))) threshold) (-> self loop-direction) 'forwards)
           (set! (-> self loop-direction) 'backwards))
        (when (and (< (fabs (-> self path-pos)) threshold) (-> self loop-direction) 'backwards)
           (set! (-> self loop-direction) 'forwards)))
      (when (and (= (-> self loop-direction) 'forwards) (= (-> self master-direction) 'forwards))
        (seek! (-> self path-pos) 1.0 (* 0.16 (seconds-per-frame))))
      (when (and (= (-> self loop-direction) 'backwards) (= (-> self master-direction) 'forwards))
        (seek! (-> self path-pos) 0.0 (* 0.16 (seconds-per-frame))))
      (when (and (= (-> self loop-direction) 'backwards) (= (-> self master-direction) 'backwards))
        (seek! (-> self path-pos) 1.0 (* 0.16 (seconds-per-frame))))
      (when (and (= (-> self loop-direction) 'forwards) (= (-> self master-direction) 'backwards))
        (seek! (-> self path-pos) 0.0 (* 0.16 (seconds-per-frame))))
      (eval-path-curve! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
      (if (< (vector-vector-distance (-> self root trans) (ear-trans)) 81920.0)
        (sound-play "eco-plat-hover" :id (-> self sound-id) :position (the-as symbol (-> self root trans))))
      (plat-trans))
  :code
    (the-as (function plat object)
            anim-loop)
  :post plat-post)

