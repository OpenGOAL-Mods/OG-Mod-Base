;;-*-Lisp-*-
(in-package goal)

(import "goal_src/jak1/import/sidekick-ag.gc")
(import "goal_src/jak1/import/flut-saddle-ag.gc")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Orange Demon Challenge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define *Origin*  (new 'static 'vector :x (meters 32.0085) :y (meters 300.1105) :z (meters 153.0149) :w 1.0))
(define *buddy-test-point-1*  (new 'static 'vector :x (meters 32.0085) :y (meters 300.1105) :z (meters 153.0149) :w 1.0))
(defconstant NOTICE_DIST (meters 10000))
(defconstant STOP_CHASE_DIST (meters 100000))
(defconstant ORANGE_DEMON_DEBUG #f)
(defun-extern find-best-master-mark vector)
(defun-extern adjust-chick-origin vector vector)
(define *num-chicken-follow* 0)
(define-extern *target3* demon-chicken)
(define-extern *show-debug* symbol)
(defun-extern demon-chicken-init-by-other vector none)

(defun portal-mort-trans ()
  (-> (the warp-gate (-> (the basebutton (process-by-ename "project-warp-gate-switch") )child 0)) root trans)
  )

(defun portal-mort-switch ()
  (the-as warp-gate-switch (process-by-ename "project-warp-gate-switch"))
  )

  (defun portal-mort-gate ()
  (the warp-gate (-> (the basebutton (process-by-ename "project-warp-gate-switch") )child 0))
  )


(defun scale-traj-time ()
  "Speed up/slow down the trajectory time based on game progress and special states."
  (let* ((val (/ (- 100.0 (calculate-completion (the progress #f))) 100.0))
         (state (-> *target* next-state name))
         (slow-down-state? (nmember state '(target-swim-down target-swim-up)))
         (racer? (logtest? (-> *target* control root-prim prim-core action) (collide-action racer)))
         (flut? (logtest? (-> *target* control root-prim prim-core action) (collide-action flut)))
         (red-eco? (and (= (-> *target* fact-info-target eco-type) (pickup-type eco-red)) (> (-> *target* fact-info-target eco-level) 0.0)))
         (clamp (cond (flut? 0.35) (red-eco? 0.5) (racer? 0.25) (else 0.47)))
         (special? (or slow-down-state? racer? flut? red-eco?))
         (val-special (cond (slow-down-state? (* val 1.2)) (red-eco? (* val 1.25)) (flut? (/ val 1.2)) (racer? (/ val 1.4)) (else val)))
         )
    (if (< val-special clamp)
      clamp
      val-special
      )
    )
    ;; For demon-chicken, we dont need a dynamic speed. Lets just return some standard speed. Smaller number = faster
    ;;(/ 100.0 7.0)
  )

(defun target-pos-with-offset ()
  (let ((vec (new-stack-vector0))
        (offset (new-stack-vector0))
        (negative? (= 1 (rand-vu-int-range 1 10))))
    (vector-copy! vec *Origin*)
    ;; add a random offset
    (set-vector! offset (* (if negative? -1.0 1.0) (meters (rand-vu-int-range 20 30)))
                        (meters (rand-vu-int-range 0 10))
                        (* (if negative? -1.0 1.0) (meters (rand-vu-int-range 20 30)))
                        (meters 0))
    (vector+! vec vec offset)
    )
    ;;Where a demon chicken spawns in
   ;; (adjust-chick-origin (find-best-master-mark))
  )

(defbehavior sleep-code process ()
  (loop
    (logior! (-> self mask) (process-mask sleep-code))
    (suspend)
    )
  (none)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; demon-chicken-manager
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod deactivate demon-chicken-manager ((this demon-chicken-manager))
  (set! *demon-chicken-manager* (the (pointer demon-chicken-manager) #f))
  (if (-> this demon)
    (deactivate (handle->process (-> this demon)))
    )
  ((method-of-type process deactivate) this)
  (none)
  )

(defbehavior demon-chicken-manager-event-handler demon-chicken-manager ((proc process) (arg1 int) (event symbol) (msg event-message-block))
  (case event
    (('spawn)
     (when (not (-> self demon))
       (set! (-> self demon) (ppointer->handle (process-spawn demon-chicken
                                                              (target-pos-with-offset)
                                                              :from *demon-chicken-dead-pool*
                                                              :to *demon-chicken-pool*)))
       #t
       )
     #f
     )
    (('die)
     (deactivate self)
     #t
     )
    )
  )

(defstate demon-chicken-manager-idle (demon-chicken-manager)
  :event demon-chicken-manager-event-handler
  :code (behavior ()
    (sleep-code)
    (none)
    )
  )

(defbehavior demon-chicken-manager-init-by-other demon-chicken-manager ((spawn? symbol))
  (if spawn?
    (set! (-> self demon) (ppointer->handle (process-spawn demon-chicken
                                                           (target-pos-with-offset)
                                                           :from *demon-chicken-dead-pool*
                                                           :to *demon-chicken-pool*)))
    (set! (-> self demon) (the handle #f))
    )
  (go demon-chicken-manager-idle)
  (none)
  )



(defun start2 ()
  (process-spawn demon-chicken
                                                           (target-pos-with-offset)
                                                           :from *demon-chicken-dead-pool*
                                                           :to *demon-chicken-pool*)
  )

(defun demon-chicken-manager-start ((spawn? symbol))
  (if (not *demon-chicken-manager*)
    (set! *demon-chicken-manager* (process-spawn demon-chicken-manager spawn? :from *pc-dead-pool*))
    )
  (none)
  )


(deftype flock (structure)
  ((chicks handle NUM_FLOCKPOINTS  :offset-assert 0)
   )
  )
(define *flock* (new 'static 'flock))

(deftype flock-pos (structure)
  ((points vector NUM_FLOCKPOINTS   :inline :offset-assert 0)
   )
  )
  (define *flock-points* (new 'static 'flock-pos))
  
(defun chicken-pls ()
(define *chicken-0* (-> (start2) 0))
(set! (-> *chicken-0* name) "chicken-0")
(set! (-> *flock* chicks 0)  (process->handle *chicken-0*))
(define *chicken-1* (-> (start2) 0))
(set! (-> *chicken-1* name) "chicken-1")
(set! (-> *flock* chicks 1)  (process->handle *chicken-1*))
(define *chicken-2* (-> (start2) 0))
(set! (-> *chicken-2* name) "chicken-2")
(set! (-> *flock* chicks 2)  (process->handle *chicken-2*))
(define *chicken-3* (-> (start2) 0))
(set! (-> *chicken-3* name) "chicken-3")
(set! (-> *flock* chicks 3)  (process->handle *chicken-3*))
(define *chicken-4* (-> (start2) 0))
(set! (-> *chicken-4* name) "chicken-4")
(set! (-> *flock* chicks 4)  (process->handle *chicken-4*))
(define *chicken-5* (-> (start2) 0))
(set! (-> *chicken-5* name) "chicken-5")
(set! (-> *flock* chicks 5)  (process->handle *chicken-5*))
(define *chicken-6* (-> (start2) 0))
(set! (-> *chicken-6* name) "chicken-6")
(set! (-> *flock* chicks 6)  (process->handle *chicken-6*))
(define *chicken-7* (-> (start2) 0))
(set! (-> *chicken-7* name) "chicken-7")
(set! (-> *flock* chicks 7)  (process->handle *chicken-7*))
(define *chicken-8* (-> (start2) 0))
(set! (-> *chicken-8* name) "chicken-8")
(set! (-> *flock* chicks 8)  (process->handle *chicken-8*))
(define *chicken-9* (-> (start2) 0))
(set! (-> *chicken-9* name) "chicken-9")
(set! (-> *flock* chicks 9)  (process->handle *chicken-9*))
(define *chicken-10* (-> (start2) 0))
(set! (-> *chicken-10* name) "chicken-10")
(set! (-> *flock* chicks 10)  (process->handle *chicken-10*))
(define *chicken-11* (-> (start2) 0))
(set! (-> *chicken-11* name) "chicken-11")
(set! (-> *flock* chicks 11)  (process->handle *chicken-11*))



;; (define *chicken-12* (-> (start2) 0))
;; (set! (-> *chicken-12* name) "chicken-12")
;; (set! (-> *flock* chicks 12)  (process->handle *chicken-12*))
;; (define *chicken-13* (-> (start2) 0))
;; (set! (-> *chicken-13* name) "chicken-13")
;; (set! (-> *flock* chicks 13)  (process->handle *chicken-13*))
;; (define *chicken-14* (-> (start2) 0))
;; (set! (-> *chicken-14* name) "chicken-14")
;; (set! (-> *flock* chicks 14)  (process->handle *chicken-14*))
;; (define *chicken-15* (-> (start2) 0))
;; (set! (-> *chicken-15* name) "chicken-15")
;; (set! (-> *flock* chicks 15)  (process->handle *chicken-15*))
;; (define *chicken-16* (-> (start2) 0))
;; (set! (-> *chicken-16* name) "chicken-16")
;; (set! (-> *flock* chicks 16)  (process->handle *chicken-16*))
;; (define *chicken-17* (-> (start2) 0))
;; (set! (-> *chicken-17* name) "chicken-17")
;; (set! (-> *flock* chicks 17)  (process->handle *chicken-17*))
;; (define *chicken-18* (-> (start2) 0))
;; (set! (-> *chicken-18* name) "chicken-18")
;; (set! (-> *flock* chicks 18)  (process->handle *chicken-18*))
;; (define *chicken-19* (-> (start2) 0))
;; (set! (-> *chicken-19* name) "chicken-19")
;; (set! (-> *flock* chicks 19)  (process->handle *chicken-19*))
;; (define *chicken-20* (-> (start2) 0))
;; (set! (-> *chicken-20* name) "chicken-20")
;; (set! (-> *flock* chicks 20)  (process->handle *chicken-20*))
(none))

(defun vegan ()
(kill-by-name "target-3" *active-pool*)
(none)
)

(defmethod run-logic? demon-chicken-manager ((this demon-chicken-manager))
  #t
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; demon-chicken
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  (defun set-flock-points-start ()
  (dotimes (i NUM_FLOCKPOINTS )
  (vector-identity!  (-> *flock-points* points i) )
  )
  )

  (defun point-at-origin? ()
  (dotimes (i NUM_FLOCKPOINTS )
  (if (= (vector-vector-distance (-> *flock-points* points i)  *Origin*)0.0)
  (return #t)
  )
  )
  (return #f)
  #f
  )

  (defun point-close-to-another? ((vec vector))
    (dotimes (i NUM_FLOCKPOINTS)
      (if (> (vector-vector-xz-distance vec  (-> *flock-points* points i)) (meters 0.1))
        (return #t)
       )
    )
  #f)


(defun point-away-from-target()
  "This will be a boolean used in validating random nest points."
  #t
)

(defun pos-valid ((vec vector))
  "Takes in a position, then compares it against other flock points and returns t/f if its valid"
  (and (not (point-close-to-another? vec)) (point-at-origin?) (point-away-from-target))
)


(defun set-flock-points ()
  (let ((old-origin (new 'static 'vector :x (meters 32.0085) :y (meters 300.1105) :z (meters 153.0149) :w 1.0))
       )
    (dotimes (i NUM_FLOCKPOINTS)
    ;; If we dont have a point at the origin addone there
    (when (not (point-at-origin?))
    ;;(format #t "There was no chicken at origin, assiging chicken ~D now ~%" i)
    (vector-copy! (-> *flock-points* points i) *Origin*)
  )

    ;;Do this so we can save the old origin
    (vector-copy! old-origin *Origin*)

    ;; If we are too close to another point, then keep making random spots until we arent
    ;;This should be a (while valid?... instead of (when close...
    (when (point-close-to-another? old-origin)
      ;;(format #t "MAKING NEW POS~%")
      (set! (-> old-origin x) (+ (-> old-origin x) (rand-vu-float-range 0.0 (meters 2))))
      ;;(set! (-> old-origin y) (+ (-> old-origin y) (rand-vu-float-range 0.0 (meters 1))))
      (set! (-> old-origin z) (+ (-> old-origin z) (rand-vu-float-range 0.0 (meters 2))))
    )
  
  ;;store it in the list of points
  (vector-copy! (-> *flock-points* points i) old-origin)))
)

(defun move-flock-by-xz ((xchange float)(ychange float)(zchange float))
    (dotimes (i NUM_FLOCKPOINTS )
      (set! (-> *flock-points* points i x) (- (-> *flock-points* points i x) xchange))
      (set! (-> *flock-points* points i y) (- (-> *flock-points* points i y) ychange))
      (set! (-> *flock-points* points i z) (- (-> *flock-points* points i z) zchange))
    ;;(format #t "Moved flock by X ~D Y ~D Z ~D~%" xchange ychange zchange)
    )
  (none)
)


(defun draw-beta-flock-points ()
;;beta function to draw spheres assiend my set-flock-points
(when *show-debug*
  (dotimes (i NUM_FLOCKPOINTS)
    ;;draw a black circle where a chick is trying to get to.
    (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> (get-chick-from-flock i) target-pos) (meters 0.10) *color-black*)
    ;;draw index of chick trying to get to black circle
    (add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) (-> (get-chick-from-flock i) target-pos) (font-color red) (the-as vector2h #f))
    ;;draw all possible flockpoints
    (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *flock-points* points i) (meters 0.05) *color-cyan*))
 ;; (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *flock-points* points i) (meters 0.1) *color-green*)
  )
(none)
)
;;need to run this on bob-offset

;;(defun set-flock-points)
(defun set-flock-false ()
  "initalizes the flock to #f to avoid crashes when referencing."
  (dotimes (i NUM_FLOCKPOINTS)
  (set! (-> *flock* chicks i) (the handle #f))
  )
)

(defun get-chick-from-flock ((idx int))
  (if (the demon-chicken (handle->process (-> *flock* chicks idx)))
    (the demon-chicken (handle->process (-> *flock* chicks idx)))
    (the demon-chicken #f)
    )
  
)

(defmethod debug-draw-text! demon-chicken ((this demon-chicken))
  (let ((bucket (bucket-id debug-no-zbuf))
        (root (-> this cshape trans))
        (yellow (font-color yellow))
        )
    (add-debug-x #t bucket root (static-rgba #x80 #xff #x80 #x80))
    (add-debug-text-3d #t
                      bucket
                      (symbol->string (-> this next-state name))
                      root
                      yellow
                      (the vector2h #f))
    )
  (none)
  )

(defmethod run-logic? demon-chicken ((this demon-chicken))
  #t
  )

(defmethod dist-to-target demon-chicken ((this demon-chicken))
  (vector-vector-distance (-> this cshape trans) (-> this target-pos))
  )

(defmethod deactivate demon-chicken ((this demon-chicken))
  (send-event *target* 'sidekick #t)
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

;; (defmethod relocate demon-chicken ((this demon-chicken) (off int))
;;   (the demon-chicken ((the (function process-drawable int none) (find-parent-method demon-chicken 7)) this off))
;;   )

(defmethod init-collision! demon-chicken ((this demon-chicken))
  (let ((cshape (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> cshape dynam) (copy *standard-dynamics* 'process))
    (set! (-> cshape reaction) default-collision-reaction)
    (set! (-> cshape no-reaction)
          (the (function collide-shape-moving collide-shape-intersect vector vector none) nothing)
          )
    ;; set up a prim group with one sphere
    (let ((prim-group (new 'process 'collide-shape-prim-group cshape (the uint 1) 0)))
      (set! (-> prim-group prim-core collide-as) (collide-kind enemy))
      (set! (-> prim-group collide-with) (collide-kind target))
      (set! (-> prim-group prim-core offense) (collide-offense touch))
      (set-vector! (-> prim-group local-sphere) 0.0 (meters 0.5) 0.0 (meters 1.25))
      (set-root-prim! cshape prim-group)
      (let ((prim-sphere (new 'process 'collide-shape-prim-sphere cshape (the uint 1))))
        (set! (-> prim-sphere prim-core collide-as) (collide-kind enemy))
        (set! (-> prim-sphere collide-with) (collide-kind target))
        (set! (-> prim-sphere prim-core offense) (collide-offense touch))
        (set-vector! (-> prim-sphere local-sphere) 0.0 (meters 0.5) 0.0 (meters 0.5))
        (append-prim prim-group prim-sphere)
        )
      )
    (set! (-> cshape max-iteration-count) (the uint 2))
    (backup-collide-with-as cshape)
    (set! (-> this cshape) cshape)
    )
  (none)
  )

(defskelgroup *flutflut-sg* flut-saddle flut-saddle-lod0-jg -1
              ((flut-saddle-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 3.5)
              :shadow flut-saddle-shadow-mg
              :sort 1
              )


(defmethod init-skel! demon-chicken ((this demon-chicken))
  (initialize-skeleton this *flutflut-sg* '())
  (set! (-> this draw origin-joint-index) (the uint 6))
  (set! (-> this draw shadow-joint-index) (the uint 6))
  (set! (-> this skel effect) (the effect-control #f))
  (logior! (-> this skel status) (janim-status eye))
  (set! (-> this draw shadow-ctrl) *target-shadow-control*)
  (let ((scale 0.25))
  (set! (-> this root scale x) scale)
  (set! (-> this root scale y) scale)
  (set! (-> this root scale z) scale)
  )
  ;;Shiny chicken
  (when (= (rand-vu-int-range 0 4096) 4096)
  (set! (-> this draw color-mult x) (rand-vu-float-range 0.0 70.0))
  (set! (-> this draw color-mult y) (rand-vu-float-range 0.0 70.0))
  (set! (-> this draw color-mult z) (rand-vu-float-range 0.0 70.0)))
  (none)
  )

(defmethod common-init! demon-chicken ((this demon-chicken))
  (init-collision! this)
  (set! (-> this mask) (logior (process-mask enemy) (-> this mask)))
  (logclear! (-> this mask) (process-mask actor-pause))
  (init-skel! this)
  (set! (-> this align) (new 'process 'align-control this))
  (set! (-> this notice-dist) NOTICE_DIST)
  (set! (-> this stop-chase-dist) STOP_CHASE_DIST)
  (set! (-> this anim-speed) 1.0)
  (set! (-> this traj-time) 1.0)
  (set! (-> this grace-period) (seconds 0))
  (set! (-> this to-point-speed) 6.0)
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 800) this))
  (none)
  )

(defbehavior demon-chicken-init-by-other demon-chicken ((vec vector))
  (common-init! self)
  (set! (-> self to-point-speed) 6.0)
  (set! (-> self cshape trans quad) (-> vec quad))
  (go demon-chicken-dormant)
  (none)
  )

(defmethod init-from-entity! demon-chicken ((this demon-chicken) (entity entity-actor))
  (common-init! this)
  (process-drawable-from-entity! this entity)
  (go demon-chicken-dormant)
  (none)
  )

(defbehavior demon-chicken-follow-trajectory demon-chicken ((time float))
  (let ((traj (-> self trajectory)))
    (eval-position! traj time (-> self cshape trans))
    (eval-velocity! traj time (-> self cshape transv))
    )
  (vector-normalize-copy! (-> self dir) (-> self cshape transv) 1.0)
  (forward-up->quaternion (-> self cshape quat) (-> self dir) *up-vector*)
  (none)
  )

(defbehavior send-attack! demon-chicken ((proc process) (tshapes touching-shapes-entry))
  ;; (when (and (logtest? (-> *target* control root-prim prim-core action) (collide-action racer))
  ;;            (send-event proc 'attack tshapes (static-attack-info ((mode 'explode)))))
  ;;   (set-collide-offense (-> self cshape) 1 (collide-offense no-offense))
  ;;   #t
  ;;   )
  ;; (when (send-event proc 'attack tshapes (static-attack-info ((mode 'death))))
  ;;   (set-collide-offense (-> self cshape) 1 (collide-offense no-offense))
  ;;   #t
  ;;   )
  #f
  )

(defmethod touch-handler demon-chicken ((this demon-chicken) (proc process) (msg event-message-block))
  (let ((target-anim (-> *target* skel channel 0 frame-group name))
        (level (aif (level-get-target-inside *level*) (-> it name) #f))
        )
    (when (or (> (-> this grace-period) (seconds 0))
              (and (string= target-anim "eichar-launch-jump") ;; hack to prevent dying after launching out of the temple/helix
                   (or (= level 'jungle) (= level 'jungleb) (= level 'sunken) (= level 'sunkenb))))
      (return #f)
      )
    )
  (when (prims-touching? (the touching-shapes-entry (-> msg param 0))
                         (-> this cshape)
                         (the uint 1))
    (when (send-attack! proc (the touching-shapes-entry (-> msg param 0)))
      ;; (go demon-chicken-victory)
      #t
      )
    )
  )

(defbehavior demon-chicken-event-handler demon-chicken ((proc process) (arg1 int) (event symbol) (msg event-message-block))
  (case event
    (('touch 'attack)
     (when (= (-> proc type) target)
       (touch-handler self proc msg)
       )
     )
    )
  )

(defmethod target-in-range? demon-chicken ((this demon-chicken) (dist float))
  "Is [[target]] close enough?"
  (and *target* (< (vector-vector-distance (-> this target-pos) (-> this cshape trans)) dist))
  )

(defmethod should-chase? demon-chicken ((this demon-chicken))
  "Should we chase after [[target]]?"
  (if *target*
    (let* ((state (-> *target* next-state name))
           (exclude-state? (nmember state '(target-racing-get-on target-racing-get-off target-racing-get-off-jump
                                            target-flut-get-on target-flut-get-off target-flut-get-off-jump
                                            target-warp-in target-warp-out))))
      (and (not (logtest? (-> *target* state-flags)
                          (state-flags grabbed being-attacked invulnerable timed-invulnerable invuln-powerup do-not-notice dying)))
           (target-in-range? this (-> this notice-dist))
           (not (or exclude-state?
                    (aif (process-by-ename "billy-2") (= (-> it next-state name) 'billy-playing)) ;; rats
                    (aif (the level-hint (process-by-name "level-hint" *active-pool*)) (string= (-> it sound-to-play) "gamcam20")))) ;; mole cam
           (= (-> this grace-period) (seconds 0))
        )
      )
    #f
    )
  )

(defmethod move! demon-chicken ((this demon-chicken))
  "Update our position."
  (collide-shape-moving-method-58 (-> this cshape) (-> this cshape transv))
  (none)
  )

(defbehavior demon-chicken-post demon-chicken ()
  "Basic post: Update grace period, shadow, joint control and disable sidekick."
  (update-direction-from-time-of-day (-> self draw shadow-ctrl))
  (false! (-> *setting-control* default play-hints))
  (send-event *target* 'sidekick #t)
  ;; joint control debug prints
  (if ORANGE_DEMON_DEBUG
    (aif (-> self skel) (debug-print-channels it (the symbol *stdcon*)))
    )
  (if (= (-> *target* next-state name) 'target-continue)
    (set! (-> self grace-period) (current-time))
    )
  (if (> (- (current-time) (-> self grace-period)) (seconds 2))
    (set! (-> self grace-period) (seconds 0))
    )
  (ja-post)
  (none)
  )

(defun draw-origin ()
(when *show-debug*
  (add-debug-sphere #t (bucket-id debug-no-zbuf) *Origin* (meters 0.1) *color-orange*)
  (add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "Origin point") *Origin* (font-color red) (the-as vector2h #f))
)

  (none)
)

(defun adjust-chick-origin ((mmark vector))

  (draw-origin)
  (let ((xchange 0.0)
        (ychange 0.0)
        (zchange 0.0))
        (if (not (= (vector-vector-distance *Origin* mmark) 0.0))
            (begin
              "Takes in the closest master mark from (draw-chicks-fund) then adjusts it and returns it to use as origin for chicken demons"
              ;; If the origin is not at its starting point, figure out how much it moved and store that.
              

              (set! xchange (- (-> *Origin* x) (-> mmark x)))
              (set! ychange (- (-> *Origin* y) (-> *target* root trans y)))
              (set! zchange (- (-> *Origin* z) (-> mmark z)))
            
              ;;(format #t "Origin moved by ~m ~m ~%" xchange zchange)
              (move-flock-by-xz xchange ychange zchange)

              ;;Update the stored Origin since it moved
              (vector-copy! *Origin* mmark)
              (set! (-> *Origin* y) (-> *target* root trans y))
            )
        )
  )
            ;;Check if the position of all NUM_FLOCKPOINTS flock points is valid here, if its not regenerate them.
            ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) *Origin* (meters 0.1) *color-yellow*)
            ;;Set the spot of CHICK1 to origin      
 
 
      *Origin*
)


(defun chick-spot-is-valid? ()
;;This checks a vector and makes sure that the flock is valid, if a point is not valid, then it returns false and we generate a new point and recheck
(if (and point-at-origin? point-away-from-target point-close-to-another?)
#t
#f
)
)


(defun assign-remove-demon-chicken-target ()


(dotimes (i (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks))
;;(format #t "~D" i)
(set! (->  (get-chick-from-flock i) target-pos quad)(-> *flock-points* points i quad))
;; Once we warp the chick out restore its "fast" speed
(set! (-> (get-chick-from-flock i ) to-point-speed) 6.0)
(when *show-debug*
(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) (->  (get-chick-from-flock i) target-pos )(font-color green) (the-as vector2h #f))
(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~S" (->  (get-chick-from-flock i) parent-cell-name )) (->  (get-chick-from-flock i) target-pos )(font-color green) (the-as vector2h #f))
 ))
)

;;For some reason this crashes on boot for now
(defun num-chickens-actually-following ()
;;Loops all the chickens, and sees if they are trying to get to a position in the flock.
;;If so increment a counter and return it.
;; loop all the chickens
(dotimes (i 20)

;;(->  (get-chick-from-flock (+! i 1)) target-pos quad)

;; loop all the possible flock positions
(dotimes (p NUM_FLOCKPOINTS )

(if (= (-> *flock-points* points p) (-> (get-chick-from-flock i) target-pos) )
(format #t "Found a chicken following!")

)
)

)

(none)
)


(defbehavior demon-chicken-chase-post demon-chicken ()
  "Chase post: Poll [[target]]'s position and update our own position, direction and trajectory time."
  ;;(set! (-> self target-pos quad) (-> (target-pos 0) quad))
  (when *show-debug*
    (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> self target-pos) (meters 0.05) *color-red*)
 ;; (add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~S" (-> self name))  (-> self target-pos) (font-color red) (the-as vector2h #f))
  )

  ;;(set! (-> self target-pos quad) (-> (adjust-chick-origin (find-best-master-mark)) quad))
  ;;Here we should check the demons distance to its target, if its too far away just teleport it to target
  (if (and (> (vector-vector-xz-distance  (-> self root trans) (-> self target-pos ))(meters 10.0)) (not *close-to-portal?*))
  (begin
  (vector-copy! (-> self root trans) (-> self target-pos))
  )
  )




  
  (set! (-> self traj-time) 1.0)
  ;;(format *stdcon* "traj-time ~f~%" (-> self traj-time))
  (let ((fnt (new 'stack 'font-context *font-default-matrix* 170 130 0.0 (font-color red) (font-flags shadow kerning middle)))
        (percent (cond ((<= (-> self traj-time) 0.47) 100.0)
                       (else (+ 47.0 (calculate-completion (the progress #f))))
                       ))
        )
        (none)
    ;;(print-game-text (string-format "speed: ~,,2f%~%" percent) fnt #f 128 12)
    )
  (compute-alignment! (-> self align))
  (move! self)
  (demon-chicken-post)
  (none)
  )

;; dormant state: if target is not active, hide
(defstate demon-chicken-dormant (demon-chicken)
  :event demon-chicken-event-handler
  :enter (behavior ()
    (logior! (-> self draw status) (draw-status hidden))
    (clear-collide-with-as (-> self cshape))
    (none)
    )
  :code (behavior ()
    (sleep-code)
    )
  :trans (behavior ()
    (when *target*
      (go demon-chicken-idle)
      )
    (none)
    )
  :exit (behavior ()
    (logclear! (-> self draw status) (draw-status hidden))
    (restore-collide-with-as (-> self cshape))
    (none)
    )
  )

;; idle state: target was hit/grace period is active/etc.
(defstate demon-chicken-idle (demon-chicken)
  :event demon-chicken-event-handler
  :enter (behavior ()
  (if (and  (!= (-> self draw status) (the draw-status 17))
    (< (vector-vector-distance  (target-pos 0) (-> self root trans)) (meters 100.0)) 
   )
                                    ;;Show demon chick
                                   (set!  (-> self draw status) (the draw-status 17))
                                    ;;Hide demon chick
                                   (logior! (-> self draw status) (draw-status hidden))
                                  )

    (set! (-> self state-time) (current-time))
    (none)
    )
  :code (behavior ()
    (loop
    (if (and  (!= (-> self draw status) (the draw-status 17))
    (< (vector-vector-distance  (target-pos 0) (-> self root trans)) (meters 100.0)) 
   )
                                    ;;Show demon chick
                                   (set!  (-> self draw status) (the draw-status 17))
                                    ;;Hide demon chick
                                   (logior! (-> self draw status) (draw-status hidden))
                                  )
      (ja-channel-set! 1)
      (ja-no-eval :group! flut-saddle-flut-run-ja :num! min)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    (none)
    )
  :trans (behavior ()
    (if (and (>= (- (current-time) (-> self state-time)) (seconds 0.017)) ;; probably need this so bones have run at least once? crashes otherwise
             (should-chase? self)
             (nonzero? (-> self draw))
             )
        (go demon-chicken-chase)
        )
    (none)
    )
  :post demon-chicken-post
  )

(defstate demon-chicken-chase (demon-chicken)
  :event demon-chicken-event-handler
  :enter (behavior ()
    (set! (-> self state-time) (current-time))
    (none)
    )
  :code (behavior ()
    (ja-channel-push! 1 (seconds 0.2))
    (ja :group! flut-saddle-flut-run-ja :num! min)
    (loop
      ;;(spawn (-> self part) (the vector (-> self cshape root-prim prim-core))) ;; fire rings
      ;; set up trajectory to follow target
      ;;hack doesnt work(set! (-> self traj-time) 1.0)

    (if (and  (!= (-> self draw status) (the draw-status 17))
    (< (vector-vector-distance  (target-pos 0) (-> self root trans)) (meters 100.0)) 
   )
                                    ;;Show demon chick
                                   (set!  (-> self draw status) (the draw-status 17))
                                    ;;Hide demon chick
                                   (logior! (-> self draw status) (draw-status hidden))
                                  )
                                  
      (setup-from-to-duration! (-> self trajectory) (-> self cshape trans) (-> self target-pos) (-> self traj-time) 0.0 (-> self to-point-speed)) 
      (demon-chicken-follow-trajectory (ja-aframe-num 1))
      (when ORANGE_DEMON_DEBUG
        (debug-draw! (-> self trajectory))
        (debug-draw-text! self)
        )
      (suspend)
      ;; speed up animation when getting closer to target
       (+ 1.0 (1/ (vector-vector-xz-distance (-> self target-pos) (-> self cshape trans))))
      (ja :num! (loop!))
      )
    (none)
    )
  :trans (behavior ()
    (if (not (should-chase? self))
      (go demon-chicken-dormant)
      )
    (none)
    )
  :post demon-chicken-chase-post
  )

;; (defstate demon-chicken-victory (demon-chicken)
;;   :event demon-chicken-event-handler
;;   :enter (behavior ()
;;     (set! (-> self cshape transv quad) (-> *null-vector* quad))
;;     (none)
;;     )
;;   :code (behavior ()
;;     (ja-channel-push! 1 (seconds 0.075))
;;     (ja-no-eval :group! sidekick-fuel-cell-victory-9-ja
;;                 :num! min
;;                 :frame-num 0.0
;;                 )
;;       (until (ja-done? 0)
;;         (suspend)
;;         (ja :num! (seek!)
;;         )
;;       )
;;     (go demon-chicken-idle)
;;     (none)
;;   )
;;   :post demon-chicken-post
;;   )
