    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    
(define mort-level? #f)
(define *show-debug* #f)
(define *number-unlock-lvl* 0)
(define spawned-chickens? #f)
(define *close-to-portal?* #f)
(define *in-mort-menu* #f)
(define *sphere-color* (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80))
(set! *sphere-color* *color-white*)
(defun-extern init-chickens none)

(define done-init? #f)




    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Setup total money/chicks per level
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
;; At first set everything to its index - its not null and doesnt crash and is nice when finding what level is what.
(dotimes (i 40)
  (set! (-> *custom-level-info* data i total-chicks) 1)
)
;;Then override its index here and set it to the proper value when complete.
(set! (-> *custom-level-info* data 16 total-chicks) 6)
(set! (-> *custom-level-info* data 17 total-chicks) 6)
(set! (-> *custom-level-info* data 18 total-chicks) 6)
(set! (-> *custom-level-info* data 19 total-chicks) 9)
(set! (-> *custom-level-info* data 20 total-chicks) 10)
(set! (-> *custom-level-info* data 21 total-chicks) 10)
(set! (-> *custom-level-info* data 22 total-chicks) 9)
(set! (-> *custom-level-info* data 23 total-chicks) 1)
(set! (-> *custom-level-info* data 24 total-chicks) 10)
(set! (-> *custom-level-info* data 25 total-chicks) 6)
(set! (-> *custom-level-info* data 26 total-chicks) 6)
(set! (-> *custom-level-info* data 26 total-chicks) 5);; MISSING A CHICK IN ISLANDS
(set! (-> *custom-level-info* data 27 total-chicks) 10)
(set! (-> *custom-level-info* data 27 total-chicks) 12)
;;28 is chem factory
(set! (-> *custom-level-info* data 29 total-chicks) 6)
(set! (-> *custom-level-info* data 30 total-chicks) 36)
(set! (-> *custom-level-info* data 30 total-chicks) 12)
(set! (-> *custom-level-info* data 31 total-chicks) 10)
(set! (-> *custom-level-info* data 32 total-chicks) 6)

(set! (-> *custom-level-info* data 33 total-chicks) 12)
(set! (-> *custom-level-info* data 34 total-chicks) 12)



(defun check-portal-distance ()
    (cond
      ((< (vector-vector-distance (-> *target* root trans) (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans)) (meters 12))
        (set! *close-to-portal?* #t)
        )
      (else
      (set! *close-to-portal?* #f)
        )
    )
  (none)
)

(defun mort-debug-text ()
 ;;mort debugging
    (if *cheat-mode*
      (when (and (-> *pc-settings* speedrunner-mode?)
             (not (paused?))
             (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Mort Debug info ~%Level inside: ~D ~%Total Chicks is is ~D~%Current Chicks is is ~D~%saved Chicks is is ~D~%Close to portal? ~A~%Unlock lvl is ~D~%"
                                     (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks) 
                                     (current-chicks-following) 
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks) 
                                      *close-to-portal?*
                                      *number-unlock-lvl*
                                     )
                      buf 400 (- 150 (* 8 16)) (font-color flat-yellow) (font-flags shadow kerning)))
          )
    )
(none)
)


;; (defun find-best-master-mark ()
;;   (let ((old-point-to-jak (meters 3729817398217391279))
;;         (closest-pos-index 0)
;;        )
;;   (dotimes (i 32)
;;     (let* ((current-ball-pos (-> *camera*  target-spline point i position))
;;             (dist-target-meters (/ (vector-vector-distance current-ball-pos (-> *target* root trans)) 40964))
;;             (valid? (not (or (> dist-target-meters 1.0) (< dist-target-meters 0.27))))
;;             (less-than-stored-pos (< dist-target-meters old-point-to-jak)))
;;       ;; Too close to jak red/ignore them
;;       (if (not valid?)
;;           (none)
;;           ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *color-black*)
;;          ;; show all possible indexes for debugging
;;          ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) current-ball-pos (font-color red) (the-as vector2h #f))
;;          )
;;       ;; Corrected part to update the closest position and distance
;;       (if (and valid? less-than-stored-pos)
;;           (begin 
;;             (set! *sphere-color* *color-green*)
;;             ;; (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *sphere-color*) 
;;             (if less-than-stored-pos
;;                 ;; If our current point is closer than our last point, store it and update closest known distance
;;                 (begin
;;                   (set! closest-pos-index i)
;;                   (set! old-point-to-jak dist-target-meters)))))))
;;   ;; Draw the closest position
;;   ;;(format #t "WARNING: fuel-cell stall on not cloning. ~F~%" old-point-to-jak)
;;   ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point *closest-pos-index* position) (meters 0.05) *sphere-color*) 
;;   ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" *closest-pos-index*) (-> *camera*  target-spline point *closest-pos-index* position)  (font-color green) (the-as vector2h #f))
  
;;   (-> *camera*  target-spline point *closest-pos-index* position))
;;   ) 
  
    (define *closest-pos-index* 0)
    (define old-point-to-jak (meters 3729817398217391279))
(defun find-best-master-mark ()
  (set! old-point-to-jak (meters 3729817398217391279))
  (dotimes (i 32)
    (let* ((current-ball-pos (-> *camera*  target-spline point i position))
            (dist-target-meters (/ (vector-vector-distance current-ball-pos (-> *target* root trans)) 40964))
            (valid? (not (or (> dist-target-meters 1.0) (< dist-target-meters 0.27))))
            (less-than-stored-pos (< dist-target-meters old-point-to-jak)))
      ;; Too close to jak red/ignore them
      (if (not valid?)
          (none)
          ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *color-black*)
         ;; show all possible indexes for debugging
         ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) current-ball-pos (font-color red) (the-as vector2h #f))
         )
      ;; Corrected part to update the closest position and distance
      (if (and valid? less-than-stored-pos)
          (begin 
            (set! *sphere-color* *color-green*)
            ;; (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *sphere-color*) 
            (if less-than-stored-pos
                ;; If our current point is closer than our last point, store it and update closest known distance
                (begin
                  (set! *closest-pos-index* i)
                  (set! old-point-to-jak dist-target-meters)))))))
  ;; Draw the closest position
  ;;(format #t "WARNING: fuel-cell stall on not cloning. ~F~%" old-point-to-jak)
  ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point *closest-pos-index* position) (meters 0.05) *sphere-color*) 
  ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" *closest-pos-index*) (-> *camera*  target-spline point *closest-pos-index* position)  (font-color green) (the-as vector2h #f))
  

  
  (-> *camera*  target-spline point *closest-pos-index* position))

    (defun cam-eye-no-rot ()
      (if (or #f (= (-> (level-get-target-inside *level*)name ) 'mort-title))
        (set! (-> *CAM_EYE-bank* rot-speed) 0.0)
       (set! (-> *CAM_EYE-bank* rot-speed) 364.0889)
      )
    (none)
    )

  (defun save-chicks-func ()
  (let* ((current-level-idx (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)))
         (current-custom-info (-> *custom-level-info* data current-level-idx))
         (warpgate-pos (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans))
         )
  
    (when (and 
           *close-to-portal?*   
           (> (-> current-custom-info current-chicks) 0)
           )
    
    ;;Remove a chick that is following, and incrment saved chick for the level. This should be moved to when the chicken uses portal imo  
    (set! (-> current-custom-info current-chicks) (- (-> current-custom-info current-chicks) 1))
    (set! (-> current-custom-info saved-chicks) (+ (-> current-custom-info saved-chicks) 1))

    (vector-copy! 
      ;;We add 1 here, because we removed it above. Will need to adjust when it goes down on warp
      (->  (get-chick-from-flock (the int (-> current-custom-info current-chicks))) target-pos)
      warpgate-pos
    )
    (set! (-> (get-chick-from-flock (the int (-> current-custom-info current-chicks))) to-point-speed) 1.0)

  (if (= (-> current-custom-info saved-chicks) (-> current-custom-info total-chicks))
    (begin
      (play-rand-sound "snd/end-level.wav" (the int (-> *setting-control* default sfx-volume)))
      (+! *number-unlock-lvl* 1)
      (if (portal-mort-switch)(go-virtual-process (portal-mort-switch) basebutton-going-down)(sound-play "caught-eel"))
      (reset-actors #t) ;;HACK for some reason, the warp gate doesnt let us use it after coming out of it but reseting actor fixes this.
    ))))
  (none)
)

  (defun mort-main-menu ()
    (if (and *in-mort-menu* *target*)
      (begin
      ;;If we arent in hub 3 warp there.
        (if (and  (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
          (send-event *target* 'continue (get-continue-by-name *game-info* "mort-title-start"))
          )

        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans y) (meters 1)))
          (set! (-> *target* root trans y) (meters 1))
          )

        ;;if we arent in cam-eye switch to cam-eye
        (if (and (!= (-> (-> (the-as (pointer camera-slave) (-> *camera* child) ))state name) 'cam-eye))
          (begin
            (send-event *camera* 'change-state  cam-eye *dm-cam-mode-interpolation*)
          )
        )
        ;;do the invisible hacks
        (if (!=  (-> *target* draw status) (draw-status hidden))
          (begin
            (set! (-> *target* draw status) (draw-status hidden))
            (send-event *target* 'sidekick #f)
          )
        )
      )
      (none)
    )
  )


(defun update-mort-vars()
"This function runs first thing and gets the updated state of variables/booleans"
  ;;This locks the first person with no rotation if in certain levels (psuedo loading screens)
  (cam-eye-no-rot)
  (check-portal-distance)
  ;;Are we in a mort level?
  (if (and (>= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 16)
           (<= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 34))
                (set! mort-level? #t)
                (set! mort-level? #f)
  )
(none)
)

(defun warp-demon-chick ()


(dotimes (i NUM_FLOCKPOINTS) 
;;If they are close to the portal
    (when (and (!= (get-chick-from-flock i) #f) 
    (the-as training-part (process-by-ename "project-training-part-1") )
                                    (< (vector-vector-distance 
                                    (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans) 
                                    (-> (get-chick-from-flock i) root trans)) (meters 0.1))
                                    )
                                    ;;Play portal effect on them
                                    (effect-control-method-10  (-> (get-chick-from-flock i) skel effect) 'death-warp-in -1.0 -1 )
                                    ;;set their target to 1,1,1
                                    (vector-identity! (-> (get-chick-from-flock i) target-pos))
                                    )
    )

 ;; (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans)  )




 
(none)
)

(defun run-mort-code? ()
"When these are true, we dont want to run mort code."
(and *target* 
      (!= (-> (level-get-target-inside *level*)name) title)
      (!= (-> (level-get-target-inside *level*)name) mort-title)
      (!= (-> (level-get-target-inside *level*)name) 'mort-title) 
      (!= (-> *target* state name) 'target-continue)
      ;;This warp stuff is a total hack to fix warp-demon-chick in retail mode. Id like to remove it one day
      (!= (-> *target* state name) 'target-warp-out) 
      (!= (-> *target* state name) 'target-warp-in) 
      mort-level?)
)

(defun init-chickens ()
      (format #t "INITIALIZING CHICKENS~%")
      (format #t "ITS MORTIN TIME~%")
      (set-flock-points-start)
      (set-flock-points)
      (set-flock-false);; Set all flock values to #f before chickens are in it
      (chicken-pls) ;; spawn the chickens offscreen
      (set! done-init? #t)
      (none))

  (defun zero-volume? ()
  "Returns true if the volume of main music should be set to 0 This is a hack."
  (or (not (= *master-mode* 'game) )
  (= (-> (level-get-target-inside *level*)name) 'title)
  )
  )



(defun-extern robo-movie-check (none))
    (defun runs-every-frame ()
    
    (when #t
    
    (main-music-volume (the int (-> *setting-control* default music-volume)))
    ;; Its so funny that this works lol
    (if (zero-volume?)
      (main-music-volume 0)
    )
      (when (and (cpad-pressed? 0 l1) (cpad-pressed? 0 r1)) 
            (play-rand-sound "snd/end-level.wav" (the int (-> *setting-control* default sfx-volume)))
      (+! *number-unlock-lvl* 1)
      (reset-actors #t)
      )

(when (and (process-by-ename "robotboss-3") *target*)
(robo-movie-check))
     (update-mort-vars)
    (when (run-mort-code?)
      (adjust-chick-origin (find-best-master-mark))
      ;;If are flock points aren't setup, lets set them up.
      (if (and (= (-> *flock-points* points 1 x) 0.0) (!= (-> *target* state name) 'target-warp-out) (!= (-> *target* state name) 'target-continue)(!= (-> *target* state name) 'target-warp-in))
        (init-chickens)
      )



    ;; ;;   ;;We should sanity check the flock points here, then assume they are valid for the rest of the frame.

    ;; ;;   ;;Here we should call a funciton, that checks the current number of chicks we have following us, and set up the target pos-valid
    ;; ;;   ;;If a chicken should despawn, set its target pos to 0,0,0.
       (assign-remove-demon-chicken-target)

    ;; ;;Constantly check all chicks to see if they are in the warpgate if they are, then run chick-saved and increment saved per level
      (warp-demon-chick)
      (save-chicks-func)
      (draw-beta-flock-points)
      (mort-debug-text)

  (if (!= (-> *part-id-table* 765  init-specs 2 initial-valuef) (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))
  )))
       (set! (-> *part-id-table* 765  init-specs 2 initial-valuef) (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))))
     )
  )

     
      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
    
   )
      ;;This should be done as the last thing
      (find-best-master-mark)
      (mort-main-menu)

    
    )
    
      (none)
    )

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup


        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell

          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

(defun runs-on-warp-confirm ()
  (dotimes (i NUM_FLOCKPOINTS) 
    (when done-init?
     (vector-identity! (-> (get-chick-from-flock i) target-pos))      
     )                
    )

(none))
    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   
    
  
        (case (-> (level-get-target-inside *level*) name)
         (('mort-title)
          (play-main-music "SND/music-brave-chicken.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('block-world)
         (if (= (rand-vu-int-range 0 1)0)
          (play-main-music "SND/music-block-world2.mp3" (the int (-> *setting-control* default music-volume)))
          (play-main-music "SND/music-block-world.mp3" (the int (-> *setting-control* default music-volume))))
          )
         (('factory-cross 'chicks)
          (play-main-music "SND/music-factory-cross-chicks.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('holly-wood)
          (play-main-music "SND/music-holly-wood2.mp3" (the int (-> *setting-control* default music-volume))) ;;get holly wood 1?
          )
         (('monument)
          (play-main-music "SND/music-monument.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('cathederal)
          (play-main-music "SND/music-block-world.mp3" (the int (-> *setting-control* default music-volume))) ;;FIX
          )
         (('pyramid)
          (play-main-music "SND/music-pyramid.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('ice-canyon 'cold-pipe)
          (play-main-music "SND/music-ice-canyon-cold-pipe.mp3" (the int (-> *setting-control* default music-volume)));;2?
          )  
         (('coins)
          (play-main-music "SND/music-coins.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('villa-cube)
          (play-main-music "SND/music-block-world.mp3" (the int (-> *setting-control* default music-volume))) ;;FIX
          )                  
         (('ice-slide)
          (play-main-music "SND/music-ice-slide.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('islands)
          (play-main-music "SND/music-block-world.mp3" (the int (-> *setting-control* default music-volume))) ;;FIX
          )          
         (('glass-towers 'chemical-factory)
          (play-main-music "SND/music-glass-towers-chemical-factory.mp3" (the int (-> *setting-control* default music-volume)))
          )          
         (('space-bridge)
          (play-main-music "SND/music-space-bridge.mp3" (the int (-> *setting-control* default music-volume)))
          )          
         (('garden)
          (play-main-music "SND/music-garden.mp3" (the int (-> *setting-control* default music-volume))) ;;FIX
          )          
         (('block-man)
          (play-main-music "SND/music-block-man.mp3" (the int (-> *setting-control* default music-volume)))
          )          
         (('cube-face)
          (play-main-music "SND/music-cube-face.mp3" (the int (-> *setting-control* default music-volume)))
          )
          (else
          (stop-main-music)
          )
         )
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
