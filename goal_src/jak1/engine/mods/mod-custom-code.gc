    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
(define *custom-cutscene?* #t)    
(define mort-level? #f)
(define *show-debug* #f)
(define spawned-chickens? #f)
(define *close-to-portal?* #f)
(define *in-mort-menu* #f)
(define *sphere-color* (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80))
(set! *sphere-color* *color-white*)
(defun-extern init-chickens none)

(define done-init? #f)

(defun-extern music-manager (none) )



    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Setup total money/chicks per level
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
;; At first set everything to its index - its not null and doesnt crash and is nice when finding what level is what.
(dotimes (i 40)
  (set! (-> *custom-level-info* data i total-chicks) 1)
)
;;Then override its index here and set it to the proper value when complete.
(set! (-> *custom-level-info* data 16 total-chicks) 6)
(set! (-> *custom-level-info* data 17 total-chicks) 6)
(set! (-> *custom-level-info* data 18 total-chicks) 6)
(set! (-> *custom-level-info* data 19 total-chicks) 9)
(set! (-> *custom-level-info* data 20 total-chicks) 10)
(set! (-> *custom-level-info* data 21 total-chicks) 10)
(set! (-> *custom-level-info* data 22 total-chicks) 9)
(set! (-> *custom-level-info* data 23 total-chicks) 1)
(set! (-> *custom-level-info* data 24 total-chicks) 10)
(set! (-> *custom-level-info* data 25 total-chicks) 6)
(set! (-> *custom-level-info* data 26 total-chicks) 6)
(set! (-> *custom-level-info* data 26 total-chicks) 5);; MISSING A CHICK IN ISLANDS
(set! (-> *custom-level-info* data 27 total-chicks) 10)
(set! (-> *custom-level-info* data 28 total-chicks) 6)
;;28 is chem factory
(set! (-> *custom-level-info* data 29 total-chicks) 6)
(set! (-> *custom-level-info* data 30 total-chicks) 36)
(set! (-> *custom-level-info* data 30 total-chicks) 32)
(set! (-> *custom-level-info* data 31 total-chicks) 10)
(set! (-> *custom-level-info* data 32 total-chicks) 6)

(set! (-> *custom-level-info* data 33 total-chicks) 12)
(set! (-> *custom-level-info* data 34 total-chicks) 12)

;;getters
(define init-done? #f)
(defun get-current-chicks ()
 (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks)
)
(defun get-saved-chicks()
 (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks)
)
(defun get-total-chicks()
 (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks)
)
(defun check-portal-distance ()
    (cond
      ((< (vector-vector-distance (-> *target* root trans) (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans)) (meters 12))
        (set! *close-to-portal?* #t)
        )
      (else
      (set! *close-to-portal?* #f)
        )
    )
  (none)
)

(defun mort-debug-text ()
 ;;mort debugging
    (if *cheat-mode*
      (when (and (-> *pc-settings* speedrunner-mode?)
            (portal-mort-switch)
             (not (paused?))
             (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Mort Debug info ~%Level inside: ~D ~%Total Chicks is is ~D~%Current Chicks is is ~D~%saved Chicks is is ~D~%Close to portal? ~A~%Unlock lvl is ~D~%"
                                     (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks) 
                                     (current-chicks-following) 
                                     (get-saved-chicks-from-mem)
                                      *close-to-portal?*
                                      (get-unlock-level)
                                     )
                      buf 400 (- 150 (* 8 16)) (font-color flat-yellow) (font-flags shadow kerning)))
          )
    )
(none)
)


(define *loaded-cell-pause* 0)

(defun mort-chicks-text ()
 ;;mort debugging
    (if *cheat-mode*
      (when (and
            (portal-mort-switch)
             
             (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Mort Chicken info ~%Chickens Saved: ~D ~%Chickens Following ~D~%Remaining Cells ~D~%"
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks)
                                     (current-chicks-following)
                                     *loaded-cell-pause*
                                     )
                      buf 15 (- 150 (* 8 4)) (font-color green) (font-flags shadow kerning)))
          )
    )
(none)
)


;;This function is a mess TODO: Pretend it doesn't exist.
(define *closest-pos-index* 0)
(define old-point-to-jak (meters 3729817398217391279))
(defun find-best-master-mark ()
  (set! old-point-to-jak (meters 3729817398217391279))
  (dotimes (i 32)
    (let* ((current-ball-pos (-> *camera*  target-spline point i position))
            (dist-target-meters (/ (vector-vector-distance current-ball-pos (-> *target* root trans)) 40964))
            (valid? (not (or (> dist-target-meters 1.0) (< dist-target-meters 0.27))))
            (less-than-stored-pos (< dist-target-meters old-point-to-jak)))
      ;; Too close to jak red/ignore them
      (if (not valid?)
          (none)
          ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *color-black*)
         ;; show all possible indexes for debugging
         ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) current-ball-pos (font-color red) (the-as vector2h #f))
         )
      ;; Corrected part to update the closest position and distance
      (if (and valid? less-than-stored-pos)
            (begin 
              (set! *sphere-color* *color-green*)
              ;; (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *sphere-color*) 
              (if less-than-stored-pos
                  ;; If our current point is closer than our last point, store it and update closest known distance
                  (begin
                    (set! *closest-pos-index* i)
                    (set! old-point-to-jak dist-target-meters)
                  )
              )
            )
      )
    )
  )
  ;; Draw the closest position
  ;;(format #t "WARNING: fuel-cell stall on not cloning. ~F~%" old-point-to-jak)
  ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point *closest-pos-index* position) (meters 0.05) *sphere-color*) 
  ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" *closest-pos-index*) (-> *camera*  target-spline point *closest-pos-index* position)  (font-color green) (the-as vector2h #f))
  (-> *camera*  target-spline point *closest-pos-index* position)
  )

  (defun cam-eye-no-rot ()
  ;;add levels to this or condition if you want the cam-eye to not be able to rotate (Useful for psuedo loading screens/images/menus)
    (if (or #f (= (-> (level-get-target-inside *level*)name )'mort-title))
      (set! (-> *CAM_EYE-bank* rot-speed) 0.0)
      (set! (-> *CAM_EYE-bank* rot-speed) 364.0889)
    )
  (none)
  )

  (defun save-chicks-func ()
    (let* ((current-level-idx (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)))
          (current-custom-info (-> *custom-level-info* data current-level-idx))
          (warpgate-pos (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans))
          )
    
      (when (and 
            *close-to-portal?*   
            (> (-> current-custom-info current-chicks) 0)
            )
              ;;Remove a chick that is following, and incrment saved chick for the level. This should be moved to when the chicken uses portal imo  
              (set! (-> current-custom-info current-chicks) (- (-> current-custom-info current-chicks) 1))
              ;;We add 1 here, because we removed it above. Will need to adjust when it goes down on warp
              (vector-copy! 
                (->  (get-chick-from-flock (the int (-> current-custom-info current-chicks))) target-pos)
                warpgate-pos
              )
              (set! (-> (get-chick-from-flock (the int (-> current-custom-info current-chicks))) to-point-speed) 3.0)    
              (let ((current-timea (current-time)))
                    (until (time-elapsed? current-timea (seconds 0.35))
                    ;;(format #t "~S~%" "NOT ELAPSED")
                      (suspend)
                    )
              )
      )
    )
    (none)
  )


(defun set-unlock-level-val ((arg1 int))
  (set! (-> *game-info* money-per-level 3)  (the-as uint arg1))
(format #t "unlock level is set to ~D~%" (-> *game-info* money-per-level 3))
  (none)
)


(defun unlock-level-func ((idx int))
(set-unlock-level-val idx)
(play-rand-sound "snd/end-level.wav" (the int (-> *setting-control* default sfx-volume)))
(reset-saved-chick-from-mem)
(auto-save-command 'auto-save 0 0 *default-pool*)
(none)
)

(defun set-unlock-level ()
"adds to the unlock level"
  ;; (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))
  ;; (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks) 
 (if (portal-mort-switch)(go-virtual-process (portal-mort-switch) basebutton-going-down)(sound-play "caught-eel"))
 (case (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*) info index) -1))
        ((16)      
          ;; Code here runs as soon as you pickup a powercell
            (when (< (get-unlock-level)  1)
              (unlock-level-func 1)
            )
          )
        ((17)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  2)
              (unlock-level-func 2)
            )
          )
        ((18)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  3)
              (unlock-level-func 3)
            )
          )
        ((19)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  4)
              (unlock-level-func 4)
            )
          )
        ((20)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  5)
              (unlock-level-func 5)
            )
          )
        ((21)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  6)
              (unlock-level-func 6)
            )
          )
        ((22)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  7)
              (unlock-level-func 7)
            )
          )
        ((23)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  8)
              (unlock-level-func 8)
            )
          )
        ((24)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  9)
              (unlock-level-func 9)
            )
          )
        ((25)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  10)
              (unlock-level-func 10)
            )
          )
        ((26)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  11)
              (unlock-level-func 11)
            )
          )
        ((27)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  12)
              (unlock-level-func 12)
            )
          )
        ((28)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  13)
              (unlock-level-func 13)
            )
          )
        ((29)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  14)
              (unlock-level-func 14)
            )
          )
        ((30)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  15)
              (unlock-level-func 15)
            )
          )
        ((31)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  16)
              (unlock-level-func 16)
            )
          )
        ((32)      
          ;; Code here runs at the end of any powercell cutscene
            (when (< (get-unlock-level)  17)
              (unlock-level-func 17)
            )
          )
        )
  

#|
Temporary hardcoded hack so I can be sure how this works for release


|#



;;end hack original currently bugged function below
  ;(set! (-> *game-info* money-per-level 3) (+ (-> *game-info* money-per-level 3) (the-as uint arg1)))
;;(format #t "unlock level is ~D~%" (-> *game-info* money-per-level 3))
  (none)
)

(defun get-unlock-level ()
  ;;(format #t "getting unlock level it is ~D~%" (-> *game-info* money-per-level 3))
  (the int (-> *game-info* money-per-level 3) )
)

(defun update-saved-chicks ((arg1 int))
"adds to the unlock level"
  (when (>= (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks) (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks)
   )
    (reset-saved-chick-from-mem)
    (when *debug-segment* 
    (format #t "ERROR TRYING TO ADD MORE THAN TOTAL CHICKS IN LEVEL~%"))
    
    (auto-save-command 'auto-save 0 0 *default-pool*)
    (return #f)
  )
  (set! (-> *game-info* money-per-level 5) (+ (-> *game-info* money-per-level 5) (the-as uint arg1)))
  (when *debug-segment*
    (format #t "Adding saved chick vale to mem stored value is now  ~D~%" (-> *game-info* money-per-level 5))
  )

  (none)
)

(defun get-saved-chicks-from-mem ()
  ;;(format #t "getting unlock level it is ~D~%" (-> *game-info* money-per-level 3))
  (the int (-> *game-info* money-per-level 5) )
)

(defun reset-saved-chick-from-mem()
(format #t "All chicks in this level are safe, setting saved chicks mem to 0")
(set! (-> *game-info* money-per-level 5) 0)
(none))

(defbehavior josh-suprise-sound-25 process ()
            (let ((current-timea (current-time)))
                (until (time-elapsed? current-timea (seconds 27))
                    (suspend)
                )
            (play-rand-sound "snd/joshsuprise.mp3" (the int 200))
            )
  (none)
)
(define *count-crates* 0)
(defun get-loaded-cell-count ()
(set! *count-crates* 0)
(execute-process-tree *active-pool* (lambda ((proc process)) 
(when (-> proc entity) 
(let (
    (vec (-> proc entity trans)) 
    (quat (-> proc entity quat)) 
    (name (the string (-> proc name))))
    (when (= (-> (the entity-actor (-> proc entity)) etype) fuel-cell)

    ;;We know its a cell

 

    ;;If its wood, increase our count

    (set! *count-crates* (+ *count-crates* 1))
    
    )
    
    ))
    

    )
    *kernel-context*)
    *count-crates*
  
)
  (defun mort-main-menu ()

    (if (and *in-mort-menu* *target*)
      (begin
      ;;If we arent in hub 3 warp there.
        (if (and  (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
        (begin
         (send-event *target* 'continue (get-continue-by-name *game-info* "mort-title-start"))
            (set-blackout-frames (seconds 25.1))
            ;;We need to sleep for a tiny amount of time, so we dont spawn multiple process
            (let ((current-timea (current-time)))
             (until (time-elapsed? current-timea (seconds 0.2))
             (suspend)
             )
             )
             ;;This function sleeps for 27 seconds so it has to be in another process to not block this one
           (when (not (process-by-name "josh-suprise-sound-25" *active-pool*))  (process-spawn-function process josh-suprise-sound-25 :name "josh-suprise-sound-25"))
        )
         
          )

        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans y) (meters 1)))
          (set! (-> *target* root trans y) (meters 301))
          )
        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans x) (meters 0.0)))
          (set! (-> *target* root trans x) (meters 0.0))
          )
        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans z) (meters 0.0)))
          (set! (-> *target* root trans z) (meters 0.0))
          )

        ;;if we arent in cam-eye switch to cam-eye
        (if (and (!= (-> (-> (the-as (pointer camera-slave) (-> *camera* child) ))state name) 'cam-eye))
          (begin
            (send-event *camera* 'change-state  cam-eye *dm-cam-mode-interpolation*)
          )
        )
        ;;do the invisible hacks
        (if (!=  (-> *target* draw status) (draw-status hidden))
          (begin
            (set! (-> *target* draw status) (draw-status hidden))
            (send-event *target* 'sidekick #f)
          )
        )
      )
      (none)
    )
  )
(define *currentCutsceneFrame* 0)
(define *currentSpoolName* "")
(defun update-mort-vars()
"This function runs first thing and gets the updated state of variables/booleans"
  ;;This locks the first person with no rotation if in certain levels (psuedo loading screens)
  (cam-eye-no-rot)
  (check-portal-distance)
  (when (handle->process (-> *art-control* spool-lock))(with-proc ((handle->process (-> *art-control* spool-lock))) (set! *currentCutsceneFrame* (the
 int (ja-aframe-num 0))))
  (set! *currentSpoolName* (-> *art-control* active-stream))
 )
  ;;Are we in a mort level?
  (if (and (>= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 16)
           (<= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 34))
                (set! mort-level? #t)
                (set! mort-level? #f)
  )
(none)
)

(defun warp-demon-chick ()


(dotimes (i NUM_FLOCKPOINTS) 
  (let* ((current-level-idx (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)))
         (current-custom-info (-> *custom-level-info* data current-level-idx))
         (warpgate-pos (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans))
         )
;;If they are close to the portal
    (when (and (!= (get-chick-from-flock i) #f) 
    (the-as training-part (process-by-ename "project-training-part-1") )
                                    (< (vector-vector-distance 
                                    (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans) 
                                    (-> (get-chick-from-flock i) root trans)) (meters 0.1))
                                    )
                                    ;;Play portal effect on them
                                    (if (!=  (-> (get-chick-from-flock i) skel effect) #f)
                                         (effect-control-method-10  (-> (get-chick-from-flock i) skel effect) 'death-warp-in -1.0 -1 )
                                    )
                               
                                    ;;set their target to 1,1,1
                                    (vector-identity! (-> (get-chick-from-flock i) target-pos))
                                    (auto-save-command 'auto-save 0 0 *default-pool*)

    (set! (-> current-custom-info saved-chicks) (+ (-> current-custom-info saved-chicks) 1))
    (update-saved-chicks 1)
    
                                    (if (>= (-> current-custom-info saved-chicks) (-> current-custom-info total-chicks))
    (begin
      (set-unlock-level)
    
      
     ;; (reset-actors #t) ;;HACK for some reason, the warp gate doesnt let us use it after coming out of it but reseting actor fixes this.
    ))


                                    )
    )

 ;; (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans)  )


)

 
(none)
)

(defun run-mort-code? ()
"When these are true, we dont want to run mort code."
(and *target* 
      (!= (-> (level-get-target-inside *level*)name) title) ;; this doesnt work and should be 'title but I am afraid fixing it will cause bugs
      (!= (-> (level-get-target-inside *level*)name) mort-title)
      (!= (-> (level-get-target-inside *level*)name) 'mort-title) 
      (!= (-> *target* state name) 'target-continue)
      ;;This warp stuff is a total hack to fix warp-demon-chick in retail mode. Id like to remove it one day
      (!= (-> *target* state name) 'target-warp-out) 
      (!= (-> *target* state name) 'target-warp-in) 
      mort-level?)
)


(defun sound-manager()
"responsible for all the sounds played during cutscenes"
(let ((current-timea (current-time))
      (chem-bool #f))
  (when (handle->process (-> *art-control* spool-lock))(with-proc ((handle->process (-> *art-control* spool-lock))) (set! *currentCutsceneFrame* (the
 int (ja-aframe-num 0))))
  (set! *currentSpoolName* (-> *art-control* active-stream)))


  (if (and (is-in-chem-fac-silo) (not chem-bool))
  (begin
   (play-rand-sound "snd/windy.wav" (the int (-> *setting-control* default sfx-volume)))
   (set! chem-bool #t)
   (until (or (not (is-in-chem-fac-silo)) (time-elapsed? current-timea (seconds 20)))
   (suspend)
   )
   (stop-rand-sound)
   (set! chem-bool #f)
  )
  )

   
(cond 
((and (string= *currentSpoolName* "ndi-intro") (= *currentCutsceneFrame* 420))
   (play-rand-sound "snd/zed.mp3" (the int (-> *setting-control* default sfx-volume)))
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )


)

((and *custom-cutscene?* (string= *currentSpoolName* "sage-intro-sequence-a") (= *currentCutsceneFrame* 0))
   (play-rand-sound "snd/fart-intro.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)

((and *custom-cutscene?* (string= *currentSpoolName* "sage-intro-sequence-a") (= *currentCutsceneFrame* 2447))
   (play-rand-sound "snd/dax/oldgreenstufftoldusnotto.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-b") (= *currentCutsceneFrame* 555))
   (play-rand-sound "snd/htootsgas.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 16))
   (play-rand-sound "snd/dax/what_are_we_doing_here.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 220))
   (play-rand-sound "snd/dax/euagh_ooop.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;375 huH

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 375))
   (play-rand-sound "snd/dax/stupid_precursor_gas.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)


;;410 STUPID PERCURSOR GAS

;;584 eek daRT TOOT
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 584))
   (play-rand-sound "snd/dax/what_is_that_dark_toot.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;725 BREATH

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 725))
   (play-rand-sound "snd/dax/yaps_on_about.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;1019 POWERTOOTS
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1019))
   (play-rand-sound "snd/dax/power_toots.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)


;;1215 how did you do that
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1215))
   (play-rand-sound "snd/dax/wow_how_did_you_do_that.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;1340 JAK WE IN TROUBLE
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1340))
   (play-rand-sound "snd/dax/i_think_were_in_trouble.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;1627 ahhhHHH
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1627))
   (play-rand-sound "snd/dax/daxter_ahh.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)


((and *custom-cutscene?* (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 52))
   (play-rand-sound "snd/hnot_my_farts.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)


((and *custom-cutscene?* (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 165))
   (play-rand-sound "snd/htootsgas2.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)


((and *custom-cutscene?* (string= *currentSpoolName* "green-sagecage-daxter-sacrifice") (= *currentCutsceneFrame* 12))
   (play-rand-sound "snd/dax/daxter light eco.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)


)
)

(none))

(define custom-music-eco-paused? #f)
(defun eco-manager ()

;;Eco-chicken start
(when (send-event *target* 'query 'powerup (pickup-type eco-chicken))
(set! *has-chicken-eco* #t)

)

(when (not (send-event *target* 'query 'powerup (pickup-type eco-chicken)))
(set! *has-chicken-eco* #f)

)
;;Ice eco start
(when (send-event *target* 'query 'powerup (pickup-type eco-ice))

;;Turn on the ice slide
(set! (-> *stone-surface* slope-slip-angle) 16384.0)(set! (-> *stone-surface* slip-factor) 0.7)(set! (-> *stone-surface* transv-max) 1.5)(set! (-> *stone-surface* transv-max) 1.5)(set! (-> *stone-surface* turnv) 0.5)(set! (-> *stone-surface* nonlin-fric-dist) 4091904.0)(set! (-> *stone-surface* fric) 23756.8)

;;snow
(run-next-time-in-process (the process (activate (get-process *default-dead-pool* process #x4000) *default-pool* 'process (the pointer #x70004000))) (lambda () (dotimes (i 7) (if (send-event *target* 'query 'powerup (pickup-type eco-ice)) (if *target* (update-snow *target*)) (suspend)))))

;;Stop custom music
(when (not custom-music-eco-paused?)
(set!  (-> (-> (level-get-target-inside *level*)info)music-bank) 'snow)
(stop-main-music)
(set! custom-music-eco-paused? #t)
)
)
;; The condition for slip-angle is a disgusting hack so we arent consitantly setting a new jump-height
(when  (and (not (send-event *target* 'query 'powerup (pickup-type eco-ice))) (= (-> *stone-surface* slope-slip-angle) 16384.0))
(set! (-> *stone-surface* slope-slip-angle) 8192.0)(set! (-> *stone-surface* slip-factor) 1.0)(set! (-> *stone-surface* transv-max) 1.0)(set! (-> *stone-surface* turnv) 1.0)(set! (-> *stone-surface* nonlin-fric-dist) 5120.0)(set! (-> *stone-surface* fric) 153600.0)
(music-manager)
;;We should prob store the previous music-bank instead of assuming it was #f
(set!  (-> (-> (level-get-target-inside *level*)info)music-bank) #f)
(set! custom-music-eco-paused? #f)
)
;;Ice eco end

;;Low gravity eco is in logic-target.gc 836, due to the values it sets being overridden.

(none))

(defbehavior run-every-frame-proc process ()
(while #t
(runs-every-frame)
(suspend)
)
(none)
)
(defun-extern chicken-every-frame none)
(defbehavior chicken-every-frame-proc process ()
"Process is responsible for most chicken related functions"
(while #t
(chicken-every-frame)
(suspend)
)
(none)
)

(defun-extern variable-every-frame none)
(defbehavior variable-every-frame-proc process ()
"Process is responsible for updating most variables/globals this process should never be suspended"
(while #t
(variable-every-frame)
(suspend)
)
(none)
)

(defun-extern text-every-frame none)
(defbehavior text-every-frame-proc process ()
"Process is responsible for drawing text this process should never be suspended"
(while #t
(text-every-frame)
(suspend)
)
(none)
)

(defun-extern debug-text-every-frame none)
(defbehavior debug-text-every-frame-proc process ()
"Process is responsible for drawing debug text this process should never be suspended"
(while #t
(debug-text-every-frame)
(suspend)
)
(none)
)

(defun-extern stupid-hacks-every-frame none)
(defbehavior stupid-hacks-every-frame-proc process ()
"Ideally this process does nothing, but unfortunately it does alot"
(while #t
(stupid-hacks-every-frame)
(suspend)
)
(none)
)

(defbehavior sound-manager-proc process ()
"handles the sound, and if it needs to spawn the runs-every-frame process it does that too"
(while #t
(sound-manager)
(if (and (= (-> *flock-points* points 1 x) 0.0) (!= (-> *target* state name) 'target-warp-out) (!= (-> *target* state name) 'target-continue)(!= (-> *target* state name) 'target-warp-in))
  (init-chickens)
)
(suspend)
)
(none)
)


(defbehavior music-manager-proc process ()
(music-manager)
(none)
)

(defun restore-cells ()

;;Loop the flock and restore all the Cells
(dotimes (i (current-chicks-following))
(set-or-clear-status! (the entity-actor (entity-by-name (-> (get-chick-from-flock i) parent-cell-name))) (entity-perm-status dead) #f)
)


;;Clear the flock to 0
(set! (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks) 0)

)

(defun init-title ()
(when (not done-init?)
      (format #t "INITIALIZING TITLE PROC~%")
      (dotimes (i 16)(set! (-> *game-counts* data i money-count) 0)(set! (-> *game-counts* data i buzzer-count) 0))
      (process-spawn-function process sound-manager-proc)
      (set! done-init? #t)
)
      (none))


(defun init-chickens ()
       (process-spawn-function process run-every-frame-proc)
      (process-spawn-function process chicken-every-frame-proc)
      (process-spawn-function process variable-every-frame-proc)
      (process-spawn-function process text-every-frame-proc)
      (process-spawn-function process debug-text-every-frame-proc)
      (process-spawn-function process stupid-hacks-every-frame-proc)
      (when *debug-segment*
      (format #t "INITIALIZING CHICKENS~%")
      (format #t "ITS MORTIN TIME~%")
      )

      (set-flock-points-start)
      (set-flock-points)
      (set-flock-false);; Set all flock values to #f before chickens are in it
      (chicken-pls) ;; spawn the chickens offscreen
      (get-mort-orb-total)
      ;; (dotimes (i 16)(set! (-> *game-counts* data i money-count) 0)(set! (-> *game-counts* data i buzzer-count) 0))
      ;; (process-spawn-function process sound-manager-proc)
      (set! done-init? #t)
      (none))

  (defun zero-volume? ()
  "Returns true if the volume of main music should be set to 0 This is a hack."
  (or (not (= *master-mode* 'game) )
  (= (-> (level-get-target-inside *level*)name) 'title)
  )
  )



(defun-extern robo-movie-check (none))

    (defun runs-every-frame ()
    "this is ran in its own process called run-every-frame-proc"
    ;;This is a hack to run softlock prevention
    
    (when (and (not (cpad-hold? 0 l3))(cpad-hold? 0 down))
    (mort-chicks-text)
    )
    (if (not (= *master-mode* 'progress))
    (set! *loaded-cell-pause* (get-loaded-cell-count))

    )

    ;;This is a hack to try to patch a bug, remove if it messes up save/restoring
    (if (and *target* (= (-> *target* state name) 'target-warp-out))
    (reset-saved-chick-from-mem)
    ) 
    
    (when #t
    ;;(format #t "~A" (-> *target* state name))
      ;; (if (and (= (-> *target* state name) 'target-stance) (not (movie?)) (!= (level-get-target-inside *level*) #f) (!= (-> (level-get-target-inside *level*)name ) 'misty))

      ;; (have-all-chicks-safe)
      ;; )

    ;;This is kind of a hack to start up during the opening cutscene
    (when (and (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (>= *currentCutsceneFrame* 1649))
    (set! *in-mort-menu* #t)
                  (let ((current-timea (current-time)))
                    (until (time-elapsed? current-timea (seconds 0.55))
                    ;;(format #t "~S~%" "NOT ELAPSED")
                      (suspend)
                    )
              )
    (str-play-stop *currentSpoolName*)
    (set! (-> *art-control* active-stream) #f)
    
    )

    (when (and (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 2))
    (move-samos-butts)
    )

    (when (and (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a") (= *currentCutsceneFrame* 2))
    (play-rand-sound "snd/farts/fart1.mp3" (the int (-> *setting-control* default dialog-volume)))
    )
    (when (and (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a") (= *currentCutsceneFrame* 250))
    (play-rand-sound "snd/farts/vinefart.mp3" (the int (-> *setting-control* default dialog-volume)))
    )

   
   ;; (sound-manager)
    (when (run-mort-code?)
      ;;   (if (and (= (-> *flock-points* points 1 x) 0.0) (!= (-> *target* state name) 'target-warp-out) (!= (-> *target* state name) 'target-continue)(!= (-> *target* state name) 'target-warp-in))
      ;;   (init-chickens)
      ;; )


    (eco-manager) ;;checks constantly if we do or do not have eco, and what type, the gives effect or turns it off
    (none)

   )
     ;; This should be done as the last thing
      (find-best-master-mark)
      (mort-main-menu)

    
    )
    
      (none)
    )

(defun chicken-every-frame ()


(when (run-mort-code?)
 (adjust-chick-origin (find-best-master-mark))
    ;;If are flock points aren't setup, lets set them up.

    ;;We should sanity check the flock points here, then assume they are valid for the rest of the frame.

    ;;Here we should call a funciton, that checks the current number of chicks we have following us, and set up the target pos-valid
    ;;If a chicken should despawn, set its target pos to 0,0,0.
    (assign-remove-demon-chicken-target)
    ;;Constantly check all chicks to see if they are in the warpgate if they are, then run chick-saved and increment saved per level
    ;;THIS FUNCTION HAS A SLEEP/SUSPEND WHEN IT RUNS (have a chick, be near portal)
    (warp-demon-chick)
    (save-chicks-func)
)
(none))

(defun variable-every-frame()
 "Responsible for updating most globals - if this isnt running something is terribly wrong" 
(update-mort-vars)
;;If we input a button combo and we are in debug, unlock the next level
      (when (and (cpad-pressed? 0 l1) (cpad-pressed? 0 r1) *cheat-mode*) 
      (if (portal-mort-switch)(go-virtual-process (portal-mort-switch) basebutton-going-down)(sound-play "caught-eel"))
      (set-unlock-level)
      ;;This might be ok to revert later
      ;;(reset-actors #t)
      )


(none))


(defun text-every-frame ()
"This should be used to draw text, Near portal need X chicks etc"
     
      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
    
(none))

(defun debug-text-every-frame ()
"This process ONLY spawns when debug mode is on and shows some extra info"
"I have no idea why the close-to-portal check is needed but it works."
    (update-mort-vars)
    (when (and run-mort-code? (not *close-to-portal?*))
     (draw-beta-flock-points)
     (mort-debug-text)
    )
    
(none))


(define *old-voice-volume* 0.0)
(defun stupid-hacks-every-frame ()
(when run-mort-code?
;;Hack the main menu music since we cant pause it yet
(main-music-volume (the int (-> *setting-control* default music-volume)))

    ;; Its so funny that this works lol


;;Hack to warp/skip to the light eco cutscene if we are in citadel because I dont know how to make mort bosses yet
(when (and (process-by-ename "robotboss-3") *target*)
    (robo-movie-check)
    )


;;Hack to rotat the warpgate this one is extra weird the math on this is wrong but the idea is close enough, might not work in coins??
  (if (and  (entity-by-name "project-training-part-1") (!= (-> *part-id-table* 765  init-specs 2 initial-valuef) (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))
  ))))
       (set! (-> *part-id-table* 765  init-specs 2 initial-valuef) (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))))
     )
  )
  


  )
  ;;Hack to disable cutscene skips for specific cutscenes     (if               ;;Cutscenes added here will be unskippable witht the triangle button
          (if (and *custom-cutscene?* (or  (string= *currentSpoolName* "sage-intro-sequence-a")
                        (string= *currentSpoolName* "sidekick-human-intro-sequence-b")
                        (string= *currentSpoolName* "sidekick-human-intro-sequence-c")
                        (string= *currentSpoolName* "finalbosscam-white-eco")
                        (string= *currentSpoolName* "green-sagecage-daxter-sacrifice")
                        (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a")
                        
                        
                        ))
                        (set! (-> *pc-settings* skip-movies?) #f)
                        (set! (-> *pc-settings* skip-movies?) #t)
                  )

;;Hack to set the voice volume to 0 during these cutscenes, then restore it when the cutscene is overridden.

(when (string= *currentSpoolName* "green-sagecage-outro-beat-boss-b")
    (str-play-stop *currentSpoolName*)
    (set! (-> *art-control* active-stream) #f)

)

          (if (or (and *custom-cutscene?* (or  (string= *currentSpoolName* "sage-intro-sequence-a")
                   (string= *currentSpoolName* "sidekick-human-intro-sequence-b")
                   (string= *currentSpoolName* "sidekick-human-intro-sequence-c")))
                   
                   
                   (and *custom-cutscene?*  (string= *currentSpoolName* "finalbosscam-white-eco") 

                    (or (< *currentCutsceneFrame* 267)
                    (> *currentCutsceneFrame* 321)
                    )
                   )
                   ;;annoying but the daxter cutscene takes a second to update the volume...
                   (and *custom-cutscene?*  (string= *currentSpoolName* "green-sagecage-daxter-sacrifice") )
                   )


          
                        (begin
                        ;;store the current volume setting
                        (if (= *old-voice-volume* 0.0)
                        (set! *old-voice-volume* (-> *setting-control* default dialog-volume))
                        )
                        ;;set volume to 0 during this cutscene
                        (set! (-> *setting-control* default dialog-volume) 0.0)
                        )
                        (begin
                        (if (and (!= *old-voice-volume* 0.0 )(= (-> *setting-control* default dialog-volume) 0.0))
                          (begin 
                          (set! (-> *setting-control* default dialog-volume) *old-voice-volume*)
                          (set! *old-voice-volume* 0.0)
                          )
                        )
                  )
          
          )



  (none)
)

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup


        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell

          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

(defun runs-on-warp-confirm ()
  (dotimes (i NUM_FLOCKPOINTS) 
    (when done-init?
     (vector-identity! (-> (get-chick-from-flock i) target-pos))      
     )                
    )

(none))
(defun-extern stop-main-music (none))
(defun music-manager ()
(stop-main-music)
        ;; Some of the alt sounds only play if you stay in a level for a very long time, so its nice to give them a rare chance to get a spotlight
        (case (-> (level-get-target-inside *level*) name)
         (('mort-title)
          (play-main-music "SND/jak-chicken-theme.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('block-world)
         (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "SND/music-block-world2.mp3" (the int (-> *setting-control* default music-volume)))
          (play-main-music "SND/music-block-world.mp3" (the int (-> *setting-control* default music-volume))))
          )
         (('factory-cross 'chicks)
          (play-main-music "SND/music-factory-cross-chicks.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('holly-wood)
          (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "SND/music-holly-wood2.mp3" (the int (-> *setting-control* default music-volume))) ;;get holly wood 1?
          (play-main-music "SND/music-holly-wood1.mp3" (the int (-> *setting-control* default music-volume))) ;;get holly wood 1?
          )
         )
         (('monument)
          (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "SND/music-monument2.mp3" (the int (-> *setting-control* default music-volume)))
          (play-main-music "SND/music-monument1.mp3" (the int (-> *setting-control* default music-volume)))
          )
          ;;add alt theme? ITS SO GOOD YES
          )
         (('cathedral)
          (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "SND/music-cathedral2.mp3" (the int (-> *setting-control* default music-volume)))
          (play-main-music "SND/music-cathedral1.mp3" (the int (-> *setting-control* default music-volume)))
          )
          )
         (('pyramid)
          (play-main-music "SND/music-pyramid.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('ice-canyon 'cold-pipe)
         (if (> (knuth-rand-int-range 0 15) (+ 8 5))
                (play-main-music "SND/music-ice-canyon2.mp3" (the int (-> *setting-control* default music-volume)));;2?
                (play-main-music "SND/music-ice-canyon-cold-pipe.mp3" (the int (-> *setting-control* default music-volume)));;2?
         )
         )  
         (('coins)
          (play-main-music "SND/music-coins.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('villa-cube)
           (play-main-music "SND/music-monument1.mp3" (the int (-> *setting-control* default music-volume))) ;; monument and villa cuba share audio
          )                  
         (('ice-slide)
          (play-main-music "SND/music-ice-slide.mp3" (the int (-> *setting-control* default music-volume)))
          )
         (('islands)
          (play-main-music "SND/music-holly-wood1.mp3" (the int (-> *setting-control* default music-volume))) ;; shares track with islands
          )          
         (('glass-towers 'chemical-factory)
          (play-main-music "SND/music-glass-towers-chemical-factory.mp3" (the int (-> *setting-control* default music-volume)))
          )          
         (('space-bridge)
          (play-main-music "SND/music-space-bridge.mp3" (the int (-> *setting-control* default music-volume)))
          )          
         (('garden)
          (play-main-music "SND/music-block-man.mp3" (the int (-> *setting-control* default music-volume))) ;;FIX
          )          
         (('block-man)
          (play-main-music "SND/music-block-man.mp3" (the int (-> *setting-control* default music-volume)))
          )          
         (('cube-face)
          (play-main-music "SND/music-cube-face.mp3" (the int (-> *setting-control* default music-volume)))
          )
          (else
          (play-main-music "" (the int (-> *setting-control* default music-volume)))
          ;;(stop-main-music) This function is broken but playing a invalid sound does the same thing
          )
         )
        
(none))

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   
      (init-title)


      
      (format #t  "RUNNING MUSIC PROC~%")
      (process-spawn-function process music-manager-proc)
      (restore-cells)
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns
          (restore-cells)

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
