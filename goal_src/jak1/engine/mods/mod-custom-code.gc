    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    



(set! (-> *custom-level-info* data 16 total-chicks) 6)
(set! (-> *custom-level-info* data 17 total-chicks) 6)
(set! (-> *custom-level-info* data 21 total-chicks) 10)





(define *close-to-portal?* #f)

(defun check-portal-distance ()
 (cond
              ((< (vector-vector-distance (-> *target* root trans) (-> (the-as training-part (process-by-ename "block-world-training-part-1") )root trans)) (meters 12))
                (set! *close-to-portal?* #t)
               )
              (else
              (set! *close-to-portal?* #f)
                )
              )
;; stupid hack
;; (if (= (vector-vector-distance (-> *target* root trans) (-> (the-as training-part (process-by-ename "block-world-training-part-1") )root trans)) (meters 12))
;; (reset-actors 'play)
;; )
(none)
)


  (defun levelidx-inbounds?()
  (and (>= (+ (-> (level-get-target-inside *level*)info index) -1) 0)
        (< (+ (-> (level-get-target-inside *level*)info index) -1) (-> *level-task-data-remap* length)))
  )

(defun mort-debug-text ()
 ;;mort debugging
    (if *cheat-mode*
      (when (and (-> *pc-settings* speedrunner-mode?)
             (not (paused?))
              (levelidx-inbounds?)
             (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Mort Debug info ~%Level inside: ~D ~%Total Chicks is is ~D~%Current Chicks is is ~D~%saved Chicks is is ~D~%Close to portal? ~A~%"
                                     (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks) 
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks) 
                                     (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks) 
                                      *close-to-portal?*
                                     )
                      buf 300 (- 150 (* 8 4)) (font-color flat-yellow) (font-flags shadow kerning))))
    
    )
(none)
)


    ;;When this is true, it will apply all the hacks we need to fake a menu/loading screen

    (define *in-mort-menu* #f)
    (define *sphere-color* (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80))
    (set! *sphere-color* *color-white*)

    (define current-chicks-num 3)
    (defun draw-chick-location ()
    (dotimes (i 32)
 
 
    (if (> (/ (vector-vector-distance  (-> *camera*  target-spline point i position) (-> *target* root trans))40964) 1.0)
    (set! *sphere-color* *color-red*)
    )

    (if (and (= *sphere-color* *color-white*)(< (/ (vector-vector-distance  (-> *camera*  target-spline point i position) (-> *target* root trans))40964) 0.27))
    (set! *sphere-color* *color-red*)
    )

    ;;mark all as valid
    (if (= *sphere-color* *color-white*)
    (set! *sphere-color* *color-yellow*)
    )
    (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.2) *sphere-color*) 
    (add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) (-> *camera*  target-spline point i position)  (font-color red) (the-as vector2h #f) )
    (set! *sphere-color* *color-white*)
    )
    

    
    (none))


    (defun cam-eye-no-rot ()
      (if (or #f (= (-> (level-get-target-inside *level*)name ) 'mort-title))
        (set! (-> *CAM_EYE-bank* rot-speed) 0.0)
       (set! (-> *CAM_EYE-bank* rot-speed) 364.0889)
      )
    (none)
    )

  ;;(-> *camera*  target-spline point 3 position)

  (defun save-chicks-func-2 ()
    ;; (format 0 "save-chx-2 lvl-tgt-inside ~A " (level-get-target-inside *level*))
    (let ((inside-lvl-idx (+ (-> (level-get-target-inside *level*) info index) -1)))
      ;; (format 0 " inside-lvl-idx ~D" inside-lvl-idx)
      (when (and (>= inside-lvl-idx 0) (< inside-lvl-idx (-> *level-task-data-remap* length)))
        (let* ((prog-lvl-idx (-> *level-task-data-remap* inside-lvl-idx))
               (lvl-info (-> *custom-level-info* data prog-lvl-idx)))
          ;; (format 0 " prog-lvl-idx ~D" prog-lvl-idx)
          (when (and *close-to-portal?* (> (-> lvl-info current-chicks) 0))
            ;; move a chick
            (-! (-> lvl-info current-chicks) 1)
            (+! (-> lvl-info saved-chicks) 1)
            (when (= (-> lvl-info saved-chicks) (-> lvl-info total-chicks))
              (play-rand-sound "snd/end-level.wav" 100)
              (go-virtual-process (the-as warp-gate-switch (process-by-ename "block-world-warp-gate-switch")) basebutton-going-down)
              )
            )
          )
        )
      )
    ;; (format 0 "~%")
    (none)
    )

  (defun save-chicks-func ()
  (if (and 
  (levelidx-inbounds?)
          *close-to-portal?* (> (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks) 0))
  (begin
  (set!  (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks) (- (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))current-chicks)  1))
  (set!  (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks) (+ (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks)  1))
  (if (= (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))saved-chicks) (-> *custom-level-info* data (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))total-chicks))
  (begin
  (play-rand-sound "snd/end-level.wav" 100)
  (+! *number-unlock-lvl* 1)
  (go-virtual-process (the-as warp-gate-switch (process-by-ename "block-world-warp-gate-switch")) basebutton-going-down)
  )
  )
  )
  
  )

  (none))
  (defun mort-main-menu ()
    (if (and *in-mort-menu* *target*)
      (begin
      ;;If we arent in hub 3 warp there.
        (if (and  (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
          (send-event *target* 'continue (get-continue-by-name *game-info* "mort-title-start"))
          )

        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans y) (meters 1)))
          (set! (-> *target* root trans y) (meters 1))
          )

        ;;if we arent in cam-eye switch to cam-eye
        (if (and (!= (-> (-> (the-as (pointer camera-slave) (-> *camera* child) ))state name) 'cam-eye))
          (begin
            (send-event *camera* 'change-state  cam-eye *dm-cam-mode-interpolation*)
          )
        )
        ;;do the invisible hacks
        (if (!=  (-> *target* draw status) (draw-status hidden))
          (begin
            (set! (-> *target* draw status) (draw-status hidden))
            (send-event *target* 'sidekick #f)
          )
        )
      )
      (none)
    )
  )
(define mort-level? #f)
(define *number-unlock-lvl* 0)
(defun in-mort-level()
(if (and (>= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 16)
         (<= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 34))
              (set! mort-level? #t)
              (set! mort-level? #f)
              )
)

    (defun runs-every-frame ()
      ;;(increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc
      ;;sets mort level to true or false so we know what fields are safe to call.
     
      ;; (when (the warp-gate-switch (process-by-ename "block-world-warp-gate-switch") )
      
      ;; (set! (-> (the warp-gate (-> (the warp-gate-switch (process-by-ename "block-world-warp-gate-switch") )child 0)) max-slot) *number-unlock-lvl*))
      (mort-main-menu)
      ;;hack daxter back for now
      (if (=(-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1))16)
      (send-event *target* 'sidekick #t)
      )
     ;; (while mort-level?
      (cam-eye-no-rot)
      (check-portal-distance)
      (save-chicks-func)
      (mort-debug-text)
    ;;  )
      
     ;;(draw-chick-location)
      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )

      (none)
      )

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup


        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell

          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
