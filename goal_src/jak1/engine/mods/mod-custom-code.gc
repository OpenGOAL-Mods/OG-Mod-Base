;;-*-Lisp-*-
(in-package goal)

;; name: mod-custom-code.gc
;; name in dgo: mod-custom-code
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern done-init? symbol)

#|
 This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin custom function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconstant MUSIC_LOWER_PERCENT 0.75)

(defun-extern josh-suprise-sound-25-function-spawn none)

(defun music-manager ()
  (stop-main-music)
  ;; Some of the alt sounds only play if you stay in a level for a very long time, so its nice to give them a rare chance to get a spotlight
  (case (-> (level-get-target-inside *level*) name)
    (('mort-title)
     (play-main-music "jak-chicken-theme.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('block-world)
     (if (rand-vu-percent? 0.125)
       (play-main-music "music-block-world2.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT)))
       (play-main-music "music-block-world.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT)))))
    (('factory-cross 'chicks)
     (play-main-music "music-factory-cross-chicks.mp3"
                      (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('holly-wood)
     (if (rand-vu-percent? 0.125)
       (play-main-music "music-holly-wood2.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;;get holly wood 1?
       (play-main-music "music-holly-wood1.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;;get holly wood 1?
       ))
    (('monument)
     (if (rand-vu-percent? 0.125)
       (play-main-music "music-monument2.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT)))
       (play-main-music "music-monument1.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
     ;;add alt theme? ITS SO GOOD YES
     )
    (('cathedral)
     (if (rand-vu-percent? 0.125)
       (play-main-music "music-cathedral2.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT)))
       (play-main-music "music-cathedral1.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT)))))
    (('pyramid)
     (play-main-music "music-pyramid.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('ice-canyon 'cold-pipe)
     (if (rand-vu-percent? 0.125)
       (play-main-music "music-ice-canyon2.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;;2?
       (play-main-music "music-ice-canyon-cold-pipe.mp3"
                        (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;;2?
       ))
    (('coins)
     (play-main-music "music-coins.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('villa-cube)
     (play-main-music "music-monument1.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;; monument and villa cuba share audio
     )
    (('ice-slide)
     (play-main-music "music-ice-slide.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('islands)
     (play-main-music "music-holly-wood1.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;; shares track with islands
     )
    (('glass-toe 'chem-fac)
     (play-main-music "music-glass-towers-chemical-factory.mp3"
                      (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('space-bird)
     (play-main-music "music-space-bridge.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('garden)
     (play-main-music "music-block-man.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))) ;;FIX
     )
    (('block-man)
     (play-main-music "music-block-man.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (('cube-face)
     (play-main-music "music-cube-face.mp3" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT))))
    (else
     (play-main-music "" (the int (* (-> *setting-control* default music-volume) MUSIC_LOWER_PERCENT)))
     ;;(stop-main-music) This function is broken but playing a invalid sound does the same thing
     ))
  (none))

(defun is-in-chem-fac-silo ()
  "This checks if the user is in the chem factory silo."
  (when (= (-> (level-get-target-inside *level*) name) 'chem-fac)
    (dotimes (i 8)
      (when (in-bubble? (meters 131.51) (meters (+ 310.37 (* i 5))) (meters 200.12) (meters 29.0))
        (return #t)))
    #f))

(defun update-mort-vars ()
  "This function runs first thing and gets the updated state of variables/booleans"
  ;;This locks the first person with no rotation if in certain levels (psuedo loading screens)
  (if (= (-> (level-get-target-inside *level*) name) 'mort-title)
    (set! (-> *CAM_EYE-bank* rot-speed) 0.0)
    (set! (-> *CAM_EYE-bank* rot-speed) 364.0889))
  (when (handle->process (-> *art-control* spool-lock))
    (with-proc ((handle->process (-> *art-control* spool-lock))) (set! *currentCutsceneFrame* (the int (ja-aframe-num 0))))
    (set! *currentSpoolName* (-> *art-control* active-stream)))
  ;;Are we in a mort level?
  (if (and (>= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*) info index) -1)) 16)
           (<= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*) info index) -1)) 34))
    (set! mort-level? #t)
    (set! mort-level? #f))
  (none))

(defun run-mort-code? ()
  "When these are true, we dont want to run mort code."
  (and *target*
       (!= (-> (level-get-target-inside *level*) name) title) ;; this doesnt work and should be 'title but I am afraid fixing it will cause bugs
       (!= (-> (level-get-target-inside *level*) name) mort-title)
       (!= (-> (level-get-target-inside *level*) name) 'mort-title)
       (!= (-> *target* state name) 'target-continue)
       ;;This warp stuff is a total hack to fix warp-demon-chick in retail mode. Id like to remove it one day
       (!= (-> *target* state name) 'target-warp-out)
       (!= (-> *target* state name) 'target-warp-in)
       mort-level?))

(defun robo-movie-check ()
  (when (and (process-by-ename "robotboss-3") *target*)
    (when (and (= (-> (process-by-ename "robotboss-3") state name) 'robotboss-blue-wait)
               (!= (-> *target* state name) 'target-continue))
      (set! (-> *autosplit-info-jak1* res-cold-pipe) 1)
      (go-process (process-by-ename "robotboss-3") robotboss-white-eco-movie)))
  (none))

(defun move-samos-butts ()
  (vector-copy! (-> (the sage (process-by-ename "crate-3256")) root trans)
                (new 'static 'vector :x (meters 3025.28) :y (meters 485.76) :z (meters -4821.85)))
  (vector-copy! (-> (the sage (process-by-ename "crate-3258")) root trans)
                (new 'static 'vector :x (meters 3065.19) :y (meters 485.76) :z (meters -4859.85)))
  (vector-copy! (-> (the sage (process-by-ename "crate-3259")) root trans)
                (new 'static 'vector :x (meters 2985.19) :y (meters 485.76) :z (meters -4859.85)))
  (vector-copy! (-> (the sage (process-by-ename "crate-3250")) root trans)
                (new 'static 'vector :x (meters 3017.5074) :y (meters 485.76) :z (meters -4896.85)))
  (none))

(defun find-best-master-mark ()
  ;; Define local variables for the closest position index and the closest known distance.
  (let ((old-point-to-jak (meters 3729817398217391279))
        (closest-pos-index 1)) ;; Initialize to -1 as a placeholder
    (dotimes (i 32)
      ;; Retrieve the position of the current spline point for the camera in the loop.
      (let* ((current-ball-pos (-> *camera* target-spline point i position))
             ;; Calculate the distance (in meters) between the current spline point
             ;; and the target's position, converting the value from game units.
             (dist-target-meters (/ (vector-vector-distance current-ball-pos (-> *target* root trans)) 40964))
             ;; Check if the distance is within the valid range (0.27 to 1.0 meters).
             (valid? (not (or (> dist-target-meters 1.0) (< dist-target-meters 0.27))))
             ;; Check if this distance is smaller than the previously stored closest distance.
             (less-than-stored-pos (< dist-target-meters old-point-to-jak)))
        ;; If the current point is valid and closer than any previously found point...
        (when (and valid? less-than-stored-pos)
          ;; Update the index of the closest position.
          (set! closest-pos-index i)
          ;; Update the closest known distance to the current distance.
          (set! old-point-to-jak dist-target-meters))))
    ;; Return the position of the closest spline point found, or nil if no valid point was found.
    (return (-> *camera* target-spline point closest-pos-index position)))
  ;;this is never hit, just makes the compiler happy
  (-> *camera* target-spline point 1 position))

(defconstant ice-slope-slip-angle 16384.0)

(defconstant default-slope-slip-angle 8192.0)

(defconstant snow-fric 23756.8)

(defconstant normal-fric 153600.0)

(defun update-chicken-eco ()
  "Handle eco-chicken powerup logic."
  (set! *has-chicken-eco* (the-as symbol (send-event *target* 'query 'powerup (pickup-type eco-chicken)))))

(defun activate-ice-eco ()
  "Apply properties and effects for ice eco."
  ;; Update stone surface properties for ice
  (set! (-> *stone-surface* slope-slip-angle) ice-slope-slip-angle)
  (set! (-> *stone-surface* slip-factor) 0.7)
  (set! (-> *stone-surface* transv-max) 1.5)
  (set! (-> *stone-surface* turnv) 0.5)
  (set! (-> *stone-surface* nonlin-fric-dist) 4091904.0)
  (set! (-> *stone-surface* fric) snow-fric)
  ;; Handle snow effect
  (run-next-time-in-process (the process
                                 (activate (get-process *default-dead-pool* process #x4000) *default-pool* 'process (the pointer #x70004000)))
                            (lambda ()
                              (dotimes (i 7)
                                (when (send-event *target* 'query 'powerup (pickup-type eco-ice))
                                  (when *target*
                                    (update-snow *target*))
                                  (suspend)))))
  ;; Manage custom music
  (when (not *custom-music-eco-paused?*)
    (set! (-> (-> (level-get-target-inside *level*) info) music-bank) 'snow)
    (stop-main-music)
    (set! *custom-music-eco-paused?* #t)))

(defun deactivate-ice-eco ()
  "Reset properties and effects when ice eco ends."
  (set! (-> *stone-surface* slope-slip-angle) default-slope-slip-angle)
  (set! (-> *stone-surface* slip-factor) 1.0)
  (set! (-> *stone-surface* transv-max) 1.0)
  (set! (-> *stone-surface* turnv) 1.0)
  (set! (-> *stone-surface* nonlin-fric-dist) 5120.0)
  (set! (-> *stone-surface* fric) normal-fric)
  (music-manager)
  (set! (-> (-> (level-get-target-inside *level*) info) music-bank) #f)
  (set! *custom-music-eco-paused?* #f))

(defun eco-manager ()
  "Main function to manage eco effects."
  ;; Handle eco-chicken
  (update-chicken-eco)
  ;; Handle ice eco
  (if (send-event *target* 'query 'powerup (pickup-type eco-ice))
    (activate-ice-eco)
    (when (= (-> *stone-surface* slope-slip-angle) ice-slope-slip-angle)
      (deactivate-ice-eco))))

;; these functions can be combined later they serve the same purpose just need a condition passed for all or following
(defun reset-chicken-targets ()
  (when done-init?
    (dotimes (i NUM_FLOCKPOINTS)
      (when (= (-> (get-chick-from-flock i) substate) 'following)
        (vector-identity! (-> (get-chick-from-flock i) target-pos))
        (vector-identity! (-> (get-chick-from-flock i) root trans))
        (set! (-> (get-chick-from-flock i) substate) 'uncollected))))
  (format #t "RESETING CHICKEN TARGETS")
  (none))

(defun reset-chicken-targets-all ()
  (when done-init?
    (dotimes (i NUM_FLOCKPOINTS)
      (when (!= (-> (get-chick-from-flock i) substate) 'uncollected)
        (vector-identity! (-> (get-chick-from-flock i) target-pos))
        (vector-identity! (-> (get-chick-from-flock i) root trans))
        (set! (-> (get-chick-from-flock i) substate) 'uncollected))))
  (format #t "RESETING CHICKEN TARGETS ALL")
  (none))

(defun restore-cells ()
  ;;Loop the flock and restore all the Cells
  (dotimes (i (get-current-chicks))
    (set-or-clear-status! (the entity-actor (entity-by-name (-> (get-chick-from-flock i) parent-cell-name)))
                          (entity-perm-status dead)
                          #f))
  (reset-chicken-targets)
  0)

(defun draw-origin-sphere-text ((pos vector) (name string))
  (when *show-debug*
    (add-debug-sphere #t (bucket-id debug-no-zbuf) pos (meters 0.1) *color-orange*)
    (add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~S" name) pos (font-color red) (the-as vector2h #f)))
  (none))

(defun adjust-chick-origin ((mmark vector))
  (let ((xchange 0.0)
        (ychange 0.0)
        (zchange 0.0))
    (when (not (= (vector-vector-distance *Origin* mmark) 0.0))
      ;; If the origin is not at its starting point, figure out how much it moved and store that.
      (set! xchange (- (-> *Origin* x) (-> mmark x)))
      (set! ychange (- (-> *Origin* y) (-> *target* root trans y)))
      (set! zchange (- (-> *Origin* z) (-> mmark z)))
      (move-flock-by-xz xchange ychange zchange)
      (vector-copy! *Origin* mmark)
      (set! (-> *Origin* y) (-> *target* root trans y))))
  *Origin*)

(defun adjust-return-origin ()
  (let ((xchange 0.0)
        (ychange 0.0)
        (zchange 0.0))
    (when (not (= (vector-vector-distance *Origin-R* (get-chicken-initial-return-point)) 0.0))
      ;; If the origin is not at its starting point, figure out how much it moved and store that.
      (set! xchange (- (-> *Origin-R* x) (-> (get-chicken-initial-return-point) x)))
      (set! ychange
            (- (-> *Origin-R* y)
               (- (-> (the-as process-drawable (process-by-ename "project-training-part-1")) root trans y) (meters 3.0907))))
      (set! zchange (- (-> *Origin-R* z) (-> (get-chicken-initial-return-point) z)))
      (move-return-flock-by-xz xchange ychange zchange)
      (vector-copy! *Origin-R* (get-chicken-initial-return-point))
      (set! (-> *Origin-R* y)
            (- (-> (the-as process-drawable (process-by-ename "project-training-part-1")) root trans y) (meters 3.0907)))))
  *Origin-R*)

;;mort getters

(defun restore-saved-chicks-from-mem ()
  "This function runs on jak spawn, and checks if the stored memory card value is nonzero, and saved chicks is zero if so it updates it."
  (if (and (nonzero? (get-saved-chicks-from-mem)) (= (get-saved-chicks) 0)) (update-saved-chicks (get-saved-chicks-from-mem))))

(defun run-this-when-cell-grab ((self fuel-cell))
  ;;Saved a chick
  ;; make sure any speedrun display is hidden
  (hide-speedrun-display)
  (if (portal-mort-switch) (go-virtual-process (portal-mort-switch) basebutton-going-down))
  ;; Set the uncollected chick with the highest index as this cell
  (set! (-> (get-chick-with-state 'uncollected) parent-cell-name) (the string (-> self name)))
  ;; Increment after setting name
  (update-chicken-substate (get-chick-with-state 'uncollected) 'following)
  (play-sound-file "ChickPickup1.mp3" (the int (* (-> *setting-control* default sfx-volume) 0.60)))
  (if (= (+ (get-current-chicks) (get-saved-chicks)) (get-total-chicks))
    (play-sound-file "coin1.wav" (the int (-> *setting-control* default sfx-volume))))
  (none))

(defun give-12-chickens ()
  (dotimes (i NUM_FLOCKPOINTS)
    (update-chicken-substate (get-chick-with-state 'uncollected) 'following)))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin process-function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun sound-manager ()
  "responsible for all the sounds played during cutscenes"
  (if (is-in-chem-fac-silo) (play-chem-hint))
  (let ((current-timea (current-time))
        (chem-bool #f))
    (when (handle->process (-> *art-control* spool-lock))
      (with-proc ((handle->process (-> *art-control* spool-lock))) (set! *currentCutsceneFrame* (the int (ja-aframe-num 0))))
      (set! *currentSpoolName* (-> *art-control* active-stream)))
    (if (and (is-in-chem-fac-silo) (not chem-bool))
      (begin
        (play-sound-file "windy.wav" (the int (-> *setting-control* default sfx-volume)))
        (set! chem-bool #t)
        (until (or (not (is-in-chem-fac-silo)) (time-elapsed? current-timea (seconds 20)))
          (suspend))
        (until (time-elapsed? current-timea (seconds 0.5))
          (suspend))
        (stop-sound-file "windy.wav")
        (set! chem-bool #f)))
    (cond
      ((and (string= *currentSpoolName* "ndi-intro") (= *currentCutsceneFrame* 420))
       (play-sound-file "zed.mp3" (the int (-> *setting-control* default sfx-volume)))
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "sage-intro-sequence-a") (= *currentCutsceneFrame* 0))
       (play-sound-file "fart-intro.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "sage-intro-sequence-a") (= *currentCutsceneFrame* 2447))
       (play-sound-file "dax/oldgreenstufftoldusnotto.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-b") (= *currentCutsceneFrame* 555))
       (play-sound-file "htootsgas.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 16))
       (play-sound-file "dax/what_are_we_doing_here.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 220))
       (play-sound-file "dax/euagh_ooop.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;375 huH
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 375))
       (play-sound-file "dax/stupid_precursor_gas.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;410 STUPID PERCURSOR GAS
      ;;584 eek daRT TOOT
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 584))
       (play-sound-file "dax/what_is_that_dark_toot.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;725 BREATH
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 725))
       (play-sound-file "dax/yaps_on_about.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;1019 POWERTOOTS
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1019))
       (play-sound-file "dax/power_toots.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;1215 how did you do that
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1215))
       (play-sound-file "dax/wow_how_did_you_do_that.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;1340 JAK WE IN TROUBLE
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1340))
       (play-sound-file "dax/i_think_were_in_trouble.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ;;1627 ahhhHHH
      ((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1627))
       (play-sound-file "dax/daxter_ahh.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 52))
       (play-sound-file "hnot_my_farts.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 165))
       (play-sound-file "htootsgas2.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))
      ((and *custom-cutscene?* (string= *currentSpoolName* "green-sagecage-daxter-sacrifice") (= *currentCutsceneFrame* 12))
       (play-sound-file "dax/daxter light eco.mp3" 100)
       (until (time-elapsed? current-timea (seconds 1))
         (suspend)))))
  (none))

(defun runs-every-frame-warpgate-hacks ()
  ;; this is in stupid hacks every frame
  (if (and (entity-by-name "project-training-part-1")
           (!= (-> *part-id-table* 765 init-specs 2 initial-valuef)
               (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))))))
    (set! (-> *part-id-table* 765 init-specs 2 initial-valuef)
          (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))))))
  ;;We can add level specific hacks under here to make the warpgates actually look good later
  )

(defun stupid-hacks-every-frame ()
  (when run-mort-code?
    ;;Hack the main menu music since we cant pause it yet
    (main-music-volume (the int (* (-> *setting-control* default music-volume) 0.75)))
    ;; Its so funny that this works lol
    ;;Hack to warp/skip to the light eco cutscene if we are in citadel because I dont know how to make mort bosses yet
    (when (and (process-by-ename "robotboss-3") *target*)
      (robo-movie-check))
    (when (and (-> *speedrun-info* should-display?)
               (> (vector-vector-distance (-> *target* root trans)
                                          (-> (the-as process-drawable (process-by-ename "project-training-part-1")) root trans))
                  (meters 14.0)))
      (hide-speedrun-display))
    ;;Hack to rotat the warpgate this one is extra weird the math on this is wrong but the idea is close enough, might not work in coins??
    (runs-every-frame-warpgate-hacks))
  ;;Hack to set the voice volume to 0 during these cutscenes, then restore it when the cutscene is overridden.
  (if (or (and *custom-cutscene?*
               (or (string= *currentSpoolName* "sage-intro-sequence-a")
                   (string= *currentSpoolName* "sidekick-human-intro-sequence-b")
                   (string= *currentSpoolName* "sidekick-human-intro-sequence-c")))
          (and *custom-cutscene?*
               (string= *currentSpoolName* "finalbosscam-white-eco")
               (or (< *currentCutsceneFrame* 267) (> *currentCutsceneFrame* 321)))
          ;;annoying but the daxter cutscene takes a second to update the volume...
          (and *custom-cutscene?* (string= *currentSpoolName* "green-sagecage-daxter-sacrifice")))
    (begin
      ;;store the volume setting
      (if (= *old-voice-volume* 0.0) (set! *old-voice-volume* (-> *setting-control* default dialog-volume)))
      ;;set volume to 0 during this cutscene
      (set! (-> *setting-control* default dialog-volume) 0.0))
    (begin
      (if (and (!= *old-voice-volume* 0.0) (= (-> *setting-control* default dialog-volume) 0.0))
        (begin
          (set! (-> *setting-control* default dialog-volume) *old-voice-volume*)
          (set! *old-voice-volume* 0.0)))))
  (none))

(defun chicken-every-frame ()
  (when (run-mort-code?)
    (adjust-chick-origin (find-best-master-mark))
    (adjust-return-origin)
    (assign-remove-demon-chicken-target)
    ;;Constantly check all chicks to see if they are in the warpgate if they are, then run chick-saved and increment saved per level
    ;;THIS FUNCTION HAS A SLEEP/SUSPEND WHEN IT RUNS (have a chick, be near portal)
    (warp-demon-chick)
    (save-chicks-func))
  (none))

(define flut-movement-freeze #f)

(define *count-cells* 0)

(defun get-loaded-cell-count ()
  (set! *count-cells* 0)
  (execute-process-tree *active-pool*
                        (lambda ((proc process))
                          (when (-> proc entity)
                            (let ((vec (-> proc entity trans))
                                  (quat (-> proc entity quat))
                                  (name (the string (-> proc name))))
                              (when (= (-> (the entity-actor (-> proc entity)) etype) fuel-cell)
                                ;;We know its a cell
                                (set! *count-cells* (+ *count-cells* 1))))))
                        *kernel-context*)
  *count-cells*)

(defun have-all-chicks-safe ()
  #|
This function checks a few conditions that *shouldn't* happen, but if they do then it unsoftlocks you.
1. There are no cells left to grab and we dont have chickens following us and there isnt a chicken currently going to the portal
2. There are no cells left to grab and we have somehow saved more chicks than the total amount of chicks in the level (chicken dupe) and there isnt a chicken currently going to the portal.
Then at the end of this function it checks some conditions and returns #t or #f depending (I think this is to let me use the portal in development)
1. Our saved chicks is greater than or euqal to the total chicks in the level and there isnt a chicken going to the portal.
2. debug mode is on and I am holding l3
3. There are no cells left to grab, our chickens is 0 and there isnt a chicken going to the portal.
  |#
  (let* ((current-level-idx (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*) info index) -1)))
         (no-powercells-alive? (= (get-loaded-cell-count) 0))
         (no-chickens-following (= (get-current-chicks) 0))
         (inside-our-highest-level (and (= (-> (level-get-target-inside *level*) name)
                                           (-> (get-continue-by-name *game-info* (-> *warp-info* (get-unlock-level))) level))
                                        (!= (-> (level-get-target-inside *level*) name) 'block-world))))
    (when (or (and no-powercells-alive? no-chickens-following (not (chicken-going-to-portal?)))
              (and no-powercells-alive? (> (get-saved-chicks) (get-total-chicks)) (not (chicken-going-to-portal?))))
      (if inside-our-highest-level (begin   (play-sound-file "nosoftlock.mp3" 100)   (set-unlock-level))))
    (or (and (>= (get-saved-chicks) (get-total-chicks)) (not (chicken-going-to-portal?)))
        (and *cheat-mode* (cpad-hold? 0 l3))
        (and no-powercells-alive? no-chickens-following (not (chicken-going-to-portal?))))))

(defun mort-main-menu ()
  (when (and *in-mort-menu* *target*)
    ;;If we arent in hub 3 warp there.
    (when (!= (-> (level-get-target-inside *level*) name) 'mort-title)
      (send-event *target* 'continue (get-continue-by-name *game-info* "mort-title-start"))
      ;;We need to sleep for a tiny amount of time, so we dont spawn multiple process
      ;;(let ((current-timea (current-time))) (until (time-elapsed? current-timea (seconds 0.2)) (suspend)))
      (suspend-for (seconds 0.2))
      ;;This function sleeps for 27 seconds so it has to be in another process to not block this one
      (josh-suprise-sound-25-function-spawn))
    (if (and (= (-> (level-get-target-inside *level*) name) 'mort-title)) (set! (-> *target* root trans y) (meters 301)))
    (if (and (= (-> (level-get-target-inside *level*) name) 'mort-title) (!= (-> *target* root trans x) (meters 0.0)))
      (set! (-> *target* root trans x) (meters 0.0)))
    (if (and (= (-> (level-get-target-inside *level*) name) 'mort-title) (!= (-> *target* root trans z) (meters 0.0)))
      (set! (-> *target* root trans z) (meters 0.0)))
    ;;if we arent in cam-eye switch to cam-eye
    (when (and (!= (-> (-> (the-as (pointer camera-slave) (-> *camera* child))) state name) 'cam-eye))
      (send-event *camera* 'change-state cam-eye *dm-cam-mode-interpolation*))
    ;;do the invisible hacksmort-
    (when (!= (-> *target* draw status) (draw-status hidden))
      (set! (-> *target* draw status) (draw-status hidden))
      (send-event *target* 'sidekick #f))
    (none)))

(define done-init? #f)

(defun runs-every-frame-proc-func ()
  "this is ran in its own process called run-every-frame-proc"
  ;; (if (get-chick-with-state 'moving-to-portal)  (vector-copy! (-> (get-chick-with-state 'moving-to-portal) target-pos) (-> (the-as process-drawable (process-by-ename "project-training-part-1")) root trans))
  ;; )
  (when (and *debug-segment* (cpad-hold? 0 l2) (cpad-pressed? 0 l3))
    (give-12-chickens))
  (when #t
    ;;(inspect (-> (the-as process-drawable (process-by-ename "project-training-part-1")) root trans))
    #|
 This where we check for softlocks, and should be the only spot we check for softlocks
      This checks things like currently saved/following chicks, so it might be unsafe in a retail level. Add exceptions here if crash observed.
    |#
    (if (and *target*
             (= (-> *target* state name) 'target-stance)
             (not (movie?))
             (!= (level-get-target-inside *level*) #f)
             (!= (-> (level-get-target-inside *level*) name) 'training)
             (!= (-> (level-get-target-inside *level*) name) 'misty)
             (!= (-> (level-get-target-inside *level*) name) 'village1)
             (!= (-> (level-get-target-inside *level*) name) 'beach)
             (!= (-> (level-get-target-inside *level*) name) 'mort-title)
             (!= (-> (level-get-target-inside *level*) name) 'citadel)
             (!= (-> (level-get-target-inside *level*) name) 'finalboss))
      (have-all-chicks-safe))
    ;;This is kind of a hack to start up during the opening cutscene
    ;; (when (and (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (>= *currentCutsceneFrame* 1649))
    ;;   (set! *in-mort-menu* #t)
    ;;   (let ((current-timea (current-time)))
    ;;     (until (time-elapsed? current-timea (seconds 0.55))
    ;;       (suspend)))
    ;;   (set-blackout-frames (seconds 25.3))
    ;;   (str-play-stop *currentSpoolName*)
    ;;   (set! (-> *art-control* active-stream) #f))
    (when (and (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 2))
      (move-samos-butts))
    (when (and (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a") (= *currentCutsceneFrame* 2))
      (play-sound-file "farts/fart1.mp3" (the int (-> *setting-control* default dialog-volume))))
    (when (and (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a") (= *currentCutsceneFrame* 250))
      (play-sound-file "farts/vinefart.mp3" (the int (-> *setting-control* default dialog-volume))))
    ;; (sound-manager)
    (when (run-mort-code?)
      (if (and (= (-> *flock-points* points 1 x) 0.0)
               (!= (-> *target* state name) 'target-warp-out)
               (!= (-> *target* state name) 'target-continue)
               (!= (-> *target* state name) 'target-warp-in))
        (if (not done-init?) (init-chickens)))
      (eco-manager) ;;checks constantly if we do or do not have eco, and what type, the gives effect or turns it off
      (none))
    ;; This should be done as the last thing
    (find-best-master-mark)
    (mort-main-menu))
  (none))

(defun debug-text-every-frame ()
  "This process ONLY spawns when debug mode is on and shows some extra info"
  "I have no idea why the close-to-portal check is needed but it works."
  (when *debug-segment*
    (update-mort-vars)
    (when (and (run-mort-code?) #t)
      (draw-beta-flock-points)
      ;;(mort-rewrite-text)
      ))
  (none))

(defun variable-every-frame ()
  "Responsible for updating most globals - if this isnt running something is terribly wrong"
  (update-mort-vars)
  ;; show speedrun text if we're warping into the level and havent landed (which is reset on warp-out)
  (when (and (= (-> *target* state name) 'target-warp-in) (not *has-landed?*))
    (set! (-> *speedrun-info* should-display?) #t))
  ;;If we input a button combo and we are in debug, unlock the next level
  (when (and (cpad-pressed? 0 l1) (cpad-pressed? 0 r1) *cheat-mode*)
    (if (portal-mort-switch) (go-virtual-process (portal-mort-switch) basebutton-going-down) (sound-play "caught-eel"))
    (set-unlock-level)
    ;;This might be ok to revert later
    ;;(reset-actors #t)
    )
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin process defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defbehavior josh-suprise-sound-25 process ()
  (let ((current-timea (current-time)))
    (until (time-elapsed? current-timea (seconds 27))
      (suspend))
    (play-sound-file "joshsuprise.mp3" (the int 200)))
  (none))

(defun josh-suprise-sound-25-function-spawn ()
  (when (not (process-by-name "josh-suprise-sound-25" *active-pool*))
    (process-spawn-function process
      josh-suprise-sound-25
      :name "josh-suprise-sound-25"))
  (none))

(defbehavior sound-manager-proc process ()
  "handles the sound, and if it needs to spawn the runs-every-frame process it does that too"
  (while #t
    (sound-manager)
    (if (and (= (-> *flock-points* points 1 x) 0.0)
             (!= (-> *target* state name) 'target-warp-out)
             (!= (-> *target* state name) 'target-continue)
             (!= (-> *target* state name) 'target-warp-in))
      (if (not done-init?) (init-chickens)))
    (suspend))
  (none))

(defbehavior music-manager-proc process ()
  (music-manager)
  (none))

(defbehavior stupid-hacks-every-frame-proc process ()
  "Ideally this process does nothing, but unfortunately it does alot"
  (while #t
    (stupid-hacks-every-frame)
    (suspend))
  (none))

(defbehavior run-every-frame-proc process ()
  (while #t
    (runs-every-frame-proc-func)
    (suspend))
  (none))

(defbehavior debug-text-every-frame-proc process ()
  "Process is responsible for drawing debug text this process should never be suspended"
  (while #t
    (debug-text-every-frame)
    (suspend))
  (none))

(defbehavior chicken-every-frame-proc process ()
  "Process is responsible for dsa most chicken related functions"
  (while #t
    (chicken-every-frame)
    (suspend))
  (none))

(defbehavior waiting-chicks-proc process ()
  (while #t
    (waiting-chicks-proc-func)
    (suspend))
  (none))

(defbehavior variable-every-frame-proc process ()
  "Process is responsible for updating most variables/globals this process should never be suspended"
  (while #t
    (variable-every-frame)
    (suspend))
  (none))

(defun init-chickens ()
  (process-spawn-function process
    run-every-frame-proc)
  (process-spawn-function process
    chicken-every-frame-proc)
  (process-spawn-function process
    variable-every-frame-proc)
  ;; ;; (process-spawn-function process text-every-frame-proc)
  (process-spawn-function process
    debug-text-every-frame-proc)
  (process-spawn-function process
    stupid-hacks-every-frame-proc)
  (process-spawn-function process
    waiting-chicks-proc)
  (when *debug-segment*
    (format #t "INITIALIZING CHICKENS~%")
    (format #t "ITS MORTIN TIME~%"))
  (set-flock-points-start)
  (set-flock-points)
  (set-flock-false) ;; Set all flock values to #f before chickens are in it
  (set-return-points)
  (chicken-pls) ;; spawn the chickens offscreen
  ;; (get-mort-orb-total)
  (set! done-init? #t)
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;
(define *runs-every-frame-init?* #f)

(defun zero-volume? ()
  "Returns true if the volume of main music should be set to 0 This is a hack."
  (or (not (= *master-mode* 'game)) (= (-> (level-get-target-inside *level*) name) 'title)))

(define flutflut? #f)

(define chicken-mode-on? #f)

(defun chicken-mode-logic ()
  ;;This runs every frame and if chicken mode is on forces jak on flut and hides him etc
  (when (and chicken-mode-on? (not (= (-> (level-get-target-inside *level*) name) 'finalboss)))
    (set! flutflut?
          (aif *target*
               (case (-> it next-state name)
                 (('target-flut-air-attack 'target-flut-air-attack-hit-ground
                                          'target-flut-clone-anim
                                          'target-flut-death
                                          'target-flut-double-jump
                                          'target-flut-falling
                                          'target-flut-get-off
                                          'target-flut-get-off-hit-ground
                                          'target-flut-get-off-jump
                                          'target-flut-get-on
                                          'target-flut-grab
                                          'target-flut-hit
                                          'target-flut-hit-ground
                                          'target-flut-jump
                                          'target-flut-running-attack
                                          'target-flut-stance
                                          'target-flut-start
                                          'target-flut-walk
                                          ;; not flutflut, but we don't need to force flutflut in these cases
                                          'target-periscope
                                          'target-falling
                                          'target-clone-anim
                                          'target-play-anim
                                          'target-billy-game
                                          'target-look-around
                                          'target-fishing
                                          ;; launcher crap
                                          'target-launch
                                          'target-high-jump
                                          'target-duck-high-jump
                                          'target-duck-high-jump-jump
                                          'target-hit-ground)
                  #t))))
    (if (and (not flutflut?)
             (not (and (logtest? (-> *kernel-context* prevent-from-run) (process-mask movie))
                       (or (= (-> *target* current-level name) 'jungle) (= (-> *target* current-level name) 'village1)))))
      (send-event *target* 'change-mode 'flut #f))
    (logior! (-> *target* draw status) (draw-status hidden)))
  (if (or (not flut-movement-freeze) (= (-> (level-get-target-inside *level*) name) 'finalboss))
    (set! (-> *flut-walk-mods* target-speed) 81920.0)
    (set! (-> *flut-walk-mods* target-speed) 0.0))
  (none))

(defun runs-every-frame ()
  ;;(increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc
  ;;stupid hack ur an idiot if you leave this in
  ;; ENTRY POINT TO SPAWN PROCESSES
  (when (not *runs-every-frame-init?*)
    (format #t "INITIALIZING TITLE PROC~%")
    ;; (relocate *game-counts* 1)
    (process-spawn-function process
      sound-manager-proc)
    (set! *runs-every-frame-init?* #t))
  (chicken-mode-logic)
  (if *show-input-display* (input-display-on) (input-display-off))
  ;; ensure orb-placer is spawned/killed as requested, debug menu is updated
  (when run-mort-code?
    (let ((gp-0 (new 'stack 'font-context *font-default-matrix* 32 20 0.0 (font-color default) (font-flags shadow kerning))))
      (let ((v1-53 gp-0)) (set! (-> v1-53 width) (the float 1440)))
      (let ((v1-54 gp-0)) (set! (-> v1-54 height) (the float 1380)))
      (let ((v1-55 gp-0)) (set! (-> v1-55 scale) 0.6))
      (set! (-> gp-0 flags) (font-flags shadow kerning large))
      (when (and (-> *pc-settings* speedrunner-mode?) (not *valid-for-runs*))
        (print-game-text-scaled (string-format "TEST VERSION NOT VALID FOR RUNS") 1.0 gp-0 128)))
    (when *debug-segment*
      (let ((gp-0 (new 'stack 'font-context *font-default-matrix* 10 50 0.0 (font-color default) (font-flags shadow kerning))))
        (let ((v1-53 gp-0)) (set! (-> v1-53 width) (the float 1440)))
        (let ((v1-54 gp-0)) (set! (-> v1-54 height) (the float 1380)))
        (let ((v1-55 gp-0)) (set! (-> v1-55 scale) 0.2))
        (set! (-> gp-0 flags) (font-flags kerning large))
        (print-game-text-scaled (string-format "CHICKEN POOL STATS!!~%FOLLOW ~D~%UNCOLLECT ~D~%WAITING ~D~%TO PORTAL ~D~%SAVED ~D~%USED CHICKEN POOL SLOTS ~%~D/12"
                                               (get-current-chicks)
                                               (get-uncollected-chicks)
                                               (get-waiting-chicks)
                                               (get-to-portal-chicks)
                                               (get-saved-chicks)
                                               (+ (+ (get-current-chicks) (get-waiting-chicks)) (get-to-portal-chicks)))
                                1.0
                                gp-0
                                128))
      (when (and done-init? (not (= (-> *chicken-0* target-pos x) 0.0)))
        (let ((gp-0 (new 'stack 'font-context *font-default-matrix* 10 150 0.0 (font-color default) (font-flags shadow kerning))))
          (let ((v1-53 gp-0)) (set! (-> v1-53 width) (the float 1440)))
          (let ((v1-54 gp-0)) (set! (-> v1-54 height) (the float 1380)))
          (let ((v1-55 gp-0)) (set! (-> v1-55 scale) 0.2))
          (set! (-> gp-0 flags) (font-flags kerning large))
          (print-game-text-scaled (string-format "~S TARGET~%X:~F~%Y:~F~%Z:~F~%"
                                                 (string-upcase (the-as string (-> *chicken-0* name)) *pc-temp-string*)
                                                 (/ (-> *chicken-0* target-pos x) (meters 1))
                                                 (/ (-> *chicken-0* target-pos y) (meters 1))
                                                 (/ (-> *chicken-0* target-pos z) (meters 1)))
                                  1.0
                                  gp-0
                                  128)))))
  ;;(defun print-game-text-scaled ((str string) (scale float) (font-ctxt font-context) (alpha int))
  (when *debug-segment*
    (orb-placer-maintenance))
  (none))

(defun runs-on-orb-pickup ((parent process-tree))
  (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
    ;; Code here runs on ANY orb pickup
    (when from-cache?
      ;; Code here runs only if the orb was from an orb cache
      )
    (when (not from-cache?)
      ;; Code here runs only if the orb was NOT from an orb cache
      (set! *seen-all-orbs-display* #f)))
  (none))

(defun runs-on-fly-pickup ()
  ;; Code here runs on any scout fly pickup
  (none))

(defun runs-on-cell-pickup ((cell-event symbol))
  (case cell-event
    (('pickup)
     ;; Code here runs as soon as you pickup a powercell
     )
    (('cutscene-end)
     ;; Code here runs at the end of any powercell cutscene
     ))
  (none))

(defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
  (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
    ;; Code here runs as soon as you pickup ANY eco
    (case eco-type
      (((pickup-type eco-yellow))
       ;; Code here runs as soon as you pickup yellow eco
       )
      (((pickup-type eco-red))
       ;; Code here runs as soon as you pickup red eco
       )
      (((pickup-type eco-blue))
       ;; Code here runs as soon as you pickup blue eco
       )
      (((pickup-type eco-pill))
       ;; Code here runs as soon as you pickup small green eco
       )
      (((pickup-type eco-green))
       ;; Code here runs as soon as you pickup big green eco
       )
      (((pickup-type eco-chicken))
       (play-sound-file "chicken-eco-intro.mp3" (the int (-> *setting-control* default dialog-volume)))))
    (when from-vent?
      ;; Code here runs only if the eco was picked up from a vent
      ))
  (none))

(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (loading a file new game or death)
  ;;(init-title)
  ;;(format #t  "RUNNING MUSIC PROC~%")
  (process-spawn-function process
    music-manager-proc)
  (restore-cells)
  (restore-saved-chicks-from-mem)
  ;;uncomment this to use custom music for custom levels - the function is in mod-common-functions.gc
  ;;(process-spawn-function process music-manager-proc)
  (none))

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
     ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
     )
    (('blackout)
     ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns
     ))
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deprecated function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| these are no longer recommended/supported however we include them anyways to not break anyones mods. |#
