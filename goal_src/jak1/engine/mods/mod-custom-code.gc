;;-*-Lisp-*-
(in-package goal)

;; name: mod-custom-code.gc
;; name in dgo: mod-custom-code
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin custom function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun is-in-chem-fac-silo ()
"this checks if the user is in the chem factory silo"
(when  (= (-> (level-get-target-inside *level*)name ) 'chem-fac)
  (if (in-bubble? (meters 131.51) (meters 310.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 315.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 320.57) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 325.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 330.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 335.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 340.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 345.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
)
  #f
)

(defun cam-eye-no-rot ()
  ;;add levels to this or condition if you want the cam-eye to not be able to rotate (Useful for psuedo loading screens/images/menus)
    (if (or #f (= (-> (level-get-target-inside *level*)name )'mort-title))
      (set! (-> *CAM_EYE-bank* rot-speed) 0.0)
      (set! (-> *CAM_EYE-bank* rot-speed) 364.0889)
    )
  (none)
  )

(defun check-portal-distance ()
    (cond
      ((< (vector-vector-distance (-> *target* root trans) (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans)) (meters 12))
        (set! *close-to-portal?* #t)
        )
      (else
      (set! *close-to-portal?* #f)
        )
    )
  (none)
)

(defun update-mort-vars()
"This function runs first thing and gets the updated state of variables/booleans"
  ;;This locks the first person with no rotation if in certain levels (psuedo loading screens)
  (cam-eye-no-rot)
  (check-portal-distance)
  (when (handle->process (-> *art-control* spool-lock))(with-proc ((handle->process (-> *art-control* spool-lock))) (set! *currentCutsceneFrame* (the
 int (ja-aframe-num 0))))
  (set! *currentSpoolName* (-> *art-control* active-stream))
 )
  ;;Are we in a mort level?
  (if (and (>= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 16)
           (<= (-> *level-task-data-remap* (+ (-> (level-get-target-inside *level*)info index) -1)) 34))
                (set! mort-level? #t)
                (set! mort-level? #f)
  )
(none)
)

(defun run-mort-code? ()
"When these are true, we dont want to run mort code."
(and *target*
      (!= (-> (level-get-target-inside *level*)name) title) ;; this doesnt work and should be 'title but I am afraid fixing it will cause bugs
      (!= (-> (level-get-target-inside *level*)name) mort-title)
      (!= (-> (level-get-target-inside *level*)name) 'mort-title)
      (!= (-> *target* state name) 'target-continue)
      ;;This warp stuff is a total hack to fix warp-demon-chick in retail mode. Id like to remove it one day
      (!= (-> *target* state name) 'target-warp-out)
      (!= (-> *target* state name) 'target-warp-in)
      mort-level?)
)

        (defun robo-movie-check ()

      (when (and (process-by-ename "robotboss-3") *target*)
      (when  (and (= (-> (process-by-ename "robotboss-3") state name) 'robotboss-blue-wait) (!= (-> *target* state name) 'target-continue) )
        (dotimes (i 10)
        (suspend)
        )
        (begin
              (suspend)
              (set! (-> *autosplit-info-jak1* res-cold-pipe) 1)
        (go-process  (process-by-ename "robotboss-3") robotboss-white-eco-movie)
        (suspend)
        )

      )

      )
      (none))
;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin process-function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun sound-manager()
"responsible for all the sounds played during cutscenes"

  ;;Hack to disable cutscene skips for specific cutscenes     (if               ;;Cutscenes added here will be unskippable witht the triangle button
          (if (and *custom-cutscene?* (or  (string= (-> *art-control* active-stream) "sage-intro-sequence-a")
                        (string= (-> *art-control* active-stream) "sidekick-human-intro-sequence-b")
                        (string= (-> *art-control* active-stream) "sidekick-human-intro-sequence-c")
                        (string= (-> *art-control* active-stream) "finalbosscam-white-eco")
                        (string= (-> *art-control* active-stream) "green-sagecage-daxter-sacrifice")
                        (string= (-> *art-control* active-stream) "green-sagecage-outro-beat-boss-a")


                        ))
                        (set! (-> *pc-settings* skip-movies?) #f)
                        (set! (-> *pc-settings* skip-movies?) #t)
                  )


(let ((current-timea (current-time))
      (chem-bool #f))
  (when (handle->process (-> *art-control* spool-lock))(with-proc ((handle->process (-> *art-control* spool-lock))) (set! *currentCutsceneFrame* (the
 int (ja-aframe-num 0))))
  (set! *currentSpoolName* (-> *art-control* active-stream)))


  (if (and (is-in-chem-fac-silo) (not chem-bool))
  (begin
   (play-sound-file "windy.wav" (the int (-> *setting-control* default sfx-volume)))
   (set! chem-bool #t)
   (until (or (not (is-in-chem-fac-silo)) (time-elapsed? current-timea (seconds 20)))
   (suspend)
   )
   (until (time-elapsed? current-timea (seconds 0.5))
   (suspend)
   )
   (stop-sound-file "windy.wav")
   (set! chem-bool #f)
  )
  )


(cond
((and (string= *currentSpoolName* "ndi-intro") (= *currentCutsceneFrame* 420))
   (play-sound-file "zed.mp3" (the int (-> *setting-control* default sfx-volume)))
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )


)

((and *custom-cutscene?* (string= *currentSpoolName* "sage-intro-sequence-a") (= *currentCutsceneFrame* 0))
   (play-sound-file "fart-intro.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)

((and *custom-cutscene?* (string= *currentSpoolName* "sage-intro-sequence-a") (= *currentCutsceneFrame* 2447))
   (play-sound-file "dax/oldgreenstufftoldusnotto.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-b") (= *currentCutsceneFrame* 555))
   (play-sound-file "htootsgas.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 16))
   (play-sound-file "dax/what_are_we_doing_here.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 220))
   (play-sound-file "dax/euagh_ooop.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;375 huH

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 375))
   (play-sound-file "dax/stupid_precursor_gas.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)


;;410 STUPID PERCURSOR GAS

;;584 eek daRT TOOT
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 584))
   (play-sound-file "dax/what_is_that_dark_toot.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;725 BREATH

((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 725))
   (play-sound-file "dax/yaps_on_about.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;1019 POWERTOOTS
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1019))
   (play-sound-file "dax/power_toots.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)


;;1215 how did you do that
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1215))
   (play-sound-file "dax/wow_how_did_you_do_that.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;1340 JAK WE IN TROUBLE
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1340))
   (play-sound-file "dax/i_think_were_in_trouble.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)

;;1627 ahhhHHH
((and *custom-cutscene?* (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (= *currentCutsceneFrame* 1627))
   (play-sound-file "dax/daxter_ahh.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )
)


((and *custom-cutscene?* (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 52))
   (play-sound-file "hnot_my_farts.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)


((and *custom-cutscene?* (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 165))
   (play-sound-file "htootsgas2.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)


((and *custom-cutscene?* (string= *currentSpoolName* "green-sagecage-daxter-sacrifice") (= *currentCutsceneFrame* 12))
   (play-sound-file "dax/daxter light eco.mp3" 100)
   (until (time-elapsed? current-timea (seconds 1))
   (suspend)
   )

)


)
)

(none))

(defun stupid-hacks-every-frame ()
(when run-mort-code?
;;Hack the main menu music since we cant pause it yet
(main-music-volume (the int (* (-> *setting-control* default music-volume) 0.75)))

    ;; Its so funny that this works lol


;;Hack to warp/skip to the light eco cutscene if we are in citadel because I dont know how to make mort bosses yet
(when (and (process-by-ename "robotboss-3") *target*)
    (robo-movie-check)
    )


;;Hack to rotat the warpgate this one is extra weird the math on this is wrong but the idea is close enough, might not work in coins??
  (if (and  (entity-by-name "project-training-part-1") (!= (-> *part-id-table* 765  init-specs 2 initial-valuef) (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))
  ))))
       (set! (-> *part-id-table* 765  init-specs 2 initial-valuef) (meters (string->float (the string (res-lump-struct (entity-by-name "project-training-part-1") 'game_task structure))))
     )
  )



  )



;;Hack to set the voice volume to 0 during these cutscenes, then restore it when the cutscene is overridden.

(when (string= *currentSpoolName* "green-sagecage-outro-beat-boss-b")
    (str-play-stop *currentSpoolName*)
    (set! (-> *art-control* active-stream) #f)

)

          (if (or (and *custom-cutscene?* (or  (string= *currentSpoolName* "sage-intro-sequence-a")
                   (string= *currentSpoolName* "sidekick-human-intro-sequence-b")
                   (string= *currentSpoolName* "sidekick-human-intro-sequence-c")))


                   (and *custom-cutscene?*  (string= *currentSpoolName* "finalbosscam-white-eco")

                    (or (< *currentCutsceneFrame* 267)
                    (> *currentCutsceneFrame* 321)
                    )
                   )
                   ;;annoying but the daxter cutscene takes a second to update the volume...
                   (and *custom-cutscene?*  (string= *currentSpoolName* "green-sagecage-daxter-sacrifice") )
                   )



                        (begin
                        ;;store the current volume setting
                        (if (= *old-voice-volume* 0.0)
                        (set! *old-voice-volume* (-> *setting-control* default dialog-volume))
                        )
                        ;;set volume to 0 during this cutscene
                        (set! (-> *setting-control* default dialog-volume) 0.0)
                        )
                        (begin
                        (if (and (!= *old-voice-volume* 0.0 )(= (-> *setting-control* default dialog-volume) 0.0))
                          (begin
                          (set! (-> *setting-control* default dialog-volume) *old-voice-volume*)
                          (set! *old-voice-volume* 0.0)
                          )
                        )
                  )

          )



  (none)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin process defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defbehavior sound-manager-proc process ()
"handles the sound, and if it needs to spawn the runs-every-frame process it does that too"
(while #t
(sound-manager)
;; (if (and (= (-> *flock-points* points 1 x) 0.0) (!= (-> *target* state name) 'target-warp-out) (!= (-> *target* state name) 'target-continue)(!= (-> *target* state name) 'target-warp-in))
;;   (init-chickens)
;; )
(suspend)
)
(none)
)

(defbehavior stupid-hacks-every-frame-proc process ()
"Ideally this process does nothing, but unfortunately it does alot"
(while #t
(stupid-hacks-every-frame)
(suspend)
)
(none)
)


(defun init-chickens ()



      ;;   (process-spawn-function process run-every-frame-proc) ;; THERE IS A RETAIL CRASH HERE
      ;;  (process-spawn-function process chicken-every-frame-proc)
      ;;  (process-spawn-function process variable-every-frame-proc)
      ;; ;; (process-spawn-function process text-every-frame-proc)
      ;;  (process-spawn-function process debug-text-every-frame-proc)
        (process-spawn-function process stupid-hacks-every-frame-proc)


      ;; (when *debug-segment*
      ;; (format #t "INITIALIZING CHICKENS~%")
      ;; (format #t "ITS MORTIN TIME~%")
      ;; )

      ;; (set-flock-points-start)
      ;; (set-flock-points)
      ;; (set-flock-false);; Set all flock values to #f before chickens are in it
      ;; (chicken-pls) ;; spawn the chickens offscreen
      ;; (get-mort-orb-total)
      ;; (set! done-init? #t)

      (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;
(define done-init?  #f)
(defun runs-every-frame ()
  ;;(increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc

;;stupid hack ur an idiot if you leave this in
;; ENTRY POINT TO SPAWN PROCESSES
  (when (not done-init?)
      (format #t "INITIALIZING TITLE PROC~%")
      (dotimes (i (level-task-data-index max))(set! (-> *game-counts* data i money-count) 0)(set! (-> *game-counts* data i buzzer-count) 0))
      (relocate *game-counts* 1)
      (when (not *target*)
      (suspend)
      )
      (process-spawn-function process sound-manager-proc)
      (init-chickens) ;;remove this later
      (set! done-init? #t)
)
  (if *show-input-display* (input-display-on) (input-display-off))
  ;; ensure orb-placer is spawned/killed as requested, debug menu is updated
  (when *debug-segment*
    (orb-placer-maintenance))
  (none))

(defun runs-on-orb-pickup ((parent process-tree))
  (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
    ;; Code here runs on ANY orb pickup
    (when from-cache?
      ;; Code here runs only if the orb was from an orb cache
      )
    (when (not from-cache?)
      ;; Code here runs only if the orb was NOT from an orb cache
      ))
  (none))

(defun runs-on-fly-pickup ()
  ;; Code here runs on any scout fly pickup
  (none))

(defun runs-on-cell-pickup ((cell-event symbol))
  (case cell-event
    (('pickup)
     ;; Code here runs as soon as you pickup a powercell
     )
    (('cutscene-end)
     ;; Code here runs at the end of any powercell cutscene
     ))
  (none))

(defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
  (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
    ;; Code here runs as soon as you pickup ANY eco
    (case eco-type
      (((pickup-type eco-yellow))
       ;; Code here runs as soon as you pickup yellow eco
       )
      (((pickup-type eco-red))
       ;; Code here runs as soon as you pickup red eco
       )
      (((pickup-type eco-blue))
       ;; Code here runs as soon as you pickup blue eco
       )
      (((pickup-type eco-pill))
       ;; Code here runs as soon as you pickup small green eco
       )
      (((pickup-type eco-green))
       ;; Code here runs as soon as you pickup big green eco
       ))
    (when from-vent?
      ;; Code here runs only if the eco was picked up from a vent
      ))
  (none))

(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (loading a file new game or death)
  ;;uncomment this to use custom music for custom levels - the function is in mod-common-functions.gc
  ;;(process-spawn-function process music-manager-proc)
  (none))

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
     ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
     )
    (('blackout)
     ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns
     ))
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deprecated function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| these are no longer recommended/supported however we include them anyways to not break anyones mods. |#
