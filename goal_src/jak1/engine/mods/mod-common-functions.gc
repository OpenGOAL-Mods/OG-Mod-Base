;;-*-Lisp-*-
(in-package goal)

;; name: mod-common-functions.gc
;; name in dgo: mod-common-functions
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file is a place where you can define custom functions and GOAL code
 to call inside of mod-custom-code.gc for example I have defined a function that increases
 the powercell count by one when it is called
 |#

 (define-extern *currentCutsceneFrame* int)
(define-extern *in-mort-menu* symbol)
(defun-extern run-mort-code? basic)
(defun-extern eco-manager none)
(define *sphere-color* (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80))
;;This function is a mess TODO: Pretend it doesn't exist.
(define *closest-pos-index* 0)
(define old-point-to-jak (meters 3729817398217391279))
(defun find-best-master-mark ()
  (set! old-point-to-jak (meters 3729817398217391279))
  (dotimes (i 32)
    (let* ((current-ball-pos (-> *camera*  target-spline point i position))
            (dist-target-meters (/ (vector-vector-distance current-ball-pos (-> *target* root trans)) 40964))
            (valid? (not (or (> dist-target-meters 1.0) (< dist-target-meters 0.27))))
            (less-than-stored-pos (< dist-target-meters old-point-to-jak)))
      ;; Too close to jak red/ignore them
      (if (not valid?)
          (none)
          ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *color-black*)
         ;; show all possible indexes for debugging
         ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" i) current-ball-pos (font-color red) (the-as vector2h #f))
         )
      ;; Corrected part to update the closest position and distance
      (if (and valid? less-than-stored-pos)
            (begin
              (set! *sphere-color* *color-green*)
              ;; (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point i position) (meters 0.05) *sphere-color*)
              (if less-than-stored-pos
                  ;; If our current point is closer than our last point, store it and update closest known distance
                  (begin
                    (set! *closest-pos-index* i)
                    (set! old-point-to-jak dist-target-meters)
                  )
              )
            )
      )
    )
  )
  ;; Draw the closest position
  ;;(format #t "WARNING: fuel-cell stall on not cloning. ~F~%" old-point-to-jak)
  ;;(add-debug-sphere #t (bucket-id debug-no-zbuf) (-> *camera*  target-spline point *closest-pos-index* position) (meters 0.05) *sphere-color*)
  ;;(add-debug-text-3d #t (bucket-id debug-no-zbuf) (string-format "~D" *closest-pos-index*) (-> *camera*  target-spline point *closest-pos-index* position)  (font-color green) (the-as vector2h #f))
  (-> *camera*  target-spline point *closest-pos-index* position)
  )


  (defun cam-eye-no-rot ()
  ;;add levels to this or condition if you want the cam-eye to not be able to rotate (Useful for psuedo loading screens/images/menus)
    (if (or #f (= (-> (level-get-target-inside *level*)name )'mort-title))
      (set! (-> *CAM_EYE-bank* rot-speed) 0.0)
      (set! (-> *CAM_EYE-bank* rot-speed) 364.0889)
    )
  (none)
  )

(defun check-portal-distance ()
    (cond
      ((< (vector-vector-distance (-> *target* root trans) (-> (the-as training-part (process-by-ename "project-training-part-1") )root trans)) (meters 12))
        (set! *close-to-portal?* #t)
        )
      (else
      (set! *close-to-portal?* #f)
        )
    )
  (none)
)

(defun mort-rewrite-text ()
 ;;mort debugging
 ;; this is a debug checking text to see certain values
      (when (and
             (portal-mort-switch)
             (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Will Remove soon!~%Mort Rewrite info ~%Chicks in memory card: ~D ~%Total Chicks is is ~D~%Current Chicks is is ~D~%saved Chicks is is ~D~%Chicken going to portal? ~A~%Unlock lvl is ~D~%"
                                   (get-saved-chicks-from-mem)
                                   (get-total-chicks)
                                   (get-current-chicks)
                                   (get-saved-chicks)
                                   (chicken-portal?)
                                   (get-unlock-level)
                                     )
                      buf (- 400 70) (- 150 (* 8 16)) (font-color flat-yellow) (font-flags shadow kerning)))
          )

(none)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Useful GOAL modding documentation
;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
Checks the condition and if it is true it does first argument if false it does optional second argument
(if (condition) (do if true) (do if false))

Gives a random FLOAT or INT between the provided ranges when called
(rand-vu-float-range 0.0 2.0)
(rand-vu-int-range 0 10)

if the result of rand-vu-int-range is 1, then DANCE! if it is not 1, then Don't dance
(if (= (rand-vu-int-range 0 10) 1) (DANCE!) (Don't dance))


|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Custom Variables to use in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Custom Functions to call in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; add your own unique custom functions here!

;; Macros can be used more-or-less just like functions
(defmacro current-cell-count ()
  `(-> *game-info* fuel)
  )

(defmacro set-current-cell-count (count)
  `(set! (-> *game-info* fuel) ,count)
  )

(defun increase-power-cell-by-one ()
  (set-current-cell-count (+ (current-cell-count) 1))
  ;; with the two macros defined above, this is equivalent to
  ;; (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
  (none)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Approved Custom Functions/Macros to call in all mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; These are included with the mod base and you are welcome to use them in your mods!

(defmacro current-checkpoint-name ()
  `(-> *game-info* current-continue name)
  )

(defun set-current-checkpoint-by-name ((name string))
  (set-continue! *game-info* name)
  )

(defmacro current-level-name ()
  `(-> (level-get-target-inside *level*) name)
  )

(defmacro current-orb-count ()
  `(-> *game-info* money)
  )

(defmacro current-cutscene ()
  `(-> *art-control* active-stream)
  )

;;This function moves an actor to the given coordinates
;;example: (move-actor "farmer-3" 3.0 74.0 -120.0)
(defun move-actor ((actor-name string) (x float) (y float) (z float))
  (when (entity-by-name actor-name)
    (let* ((entity-actor (entity-by-name actor-name))
           (actor (-> entity-actor extra process))
           )
      (when actor
        (case (-> actor type)
          ((fuel-cell)
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the fuel-cell actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the fuel-cell actor) root trans) (meters x) (meters y) (meters z) 1.0)
            (when (name= (-> (the fuel-cell actor) state name) 'wait)
              ;; only move collision when idle (messes up glowing in cutscene)
              (set! (-> (the fuel-cell actor) root root-prim world-sphere x) (meters x))
              (set! (-> (the fuel-cell actor) root root-prim world-sphere y) (meters y))
              (set! (-> (the fuel-cell actor) root root-prim world-sphere z) (meters z))
              )
            )
          ((orb-cache-top)
            ;; don't move while its activated (let it go up/down)
            (when (not (name= (-> (the orb-cache-top actor) state name) 'orb-cache-top-activate))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the orb-cache-top actor) basetrans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the orb-cache-top actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the orb-cache-top actor) root root-prim world-sphere x) (meters x))
              (set! (-> (the orb-cache-top actor) root root-prim world-sphere y) (meters y))
              (set! (-> (the orb-cache-top actor) root root-prim world-sphere z) (meters z))
              (set-vector! (-> (the orb-cache-top actor) draw origin) (meters x) (meters y) (meters z) 1.0)
              (let ((radius (-> (the process-drawable actor) draw radius))
                    (bounds (res-lump-data entity-actor 'visvol (inline-array vector)))
                    )
                (set-vector! (-> bounds 0) (- (meters x) radius) (meters y) (- (meters z) radius) 1.0)
                (set-vector! (-> bounds 1) (+ (meters x) radius) (meters y) (+ (meters z) radius) 1.0)
                )
              )
            )
          ((money)
            ;; don't move orbs if being blue-eco-sucked
            (when (not (logtest? (-> (the money actor) flags) (collectable-flags suck)))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the money actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the money actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the money actor) root root-prim world-sphere x) (meters x))
              (set! (-> (the money actor) root root-prim world-sphere y) (meters y))
              (set! (-> (the money actor) root root-prim world-sphere z) (meters z))
              )
            )
          ((crate crate-buzzer)
            ;; only move crates if they're not jumping
            (when (= (-> (the crate actor) smush amp) 0.0)
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the crate actor) base) (meters x) (meters y) (meters z) 1.0)
              ;; (set-vector! (-> (the crate actor) root trans) (meters x) (meters y) (meters z) 1.0)
              ;; (set! (-> (the crate actor) root root-prim world-sphere x) (meters x))
              ;; (set! (-> (the crate actor) root root-prim world-sphere y) (meters y))
              ;; (set! (-> (the crate actor) root root-prim world-sphere z) (meters z))
              )
            )
          ((darkvine)
            (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
          )
          (else
            (format 0 "unexpected actor type ~S ~S ~S~%" actor-name (-> entity-actor type) (-> actor type))
            (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
            )
          )
        )
      )
    )
  (none)
  )

(defun process-by-aid ((arg0 uint))
  "Get the process for the entity with the given aid. If there is no entity or process, #f."
  (let ((v1-0 (entity-by-aid arg0)))
    (if v1-0
      (-> v1-0 extra process)
    )
  )
)

(defun spawn-actor-by-name ((name string))
  ;; Takes in the string of name of a actor, and spawns a new process based on the entity.
    (let* ((entity-actor (the entity-actor (entity-by-name name)))
          (type (-> entity-actor etype))
          (e-info (entity-info-lookup type))
      )
      (when (entity-by-name name)
        (init-entity
          (get-process *default-dead-pool* type (if e-info (-> e-info heap-size) #x4000))
          entity-actor)
          (sound-play "buzzer-pickup")
      )
      (if (not (entity-by-name name))
          (sound-play "oof")
      )
    )
    (none)
)

;;Draws a debug sphere on the actor, takes in a string actor name and a radius for the sphere in meters
(defun draw-debug-sphere-on-actor ((actorName string)(radius float))
  (when *debug-segment*
    (when (process-by-ename actorName)
      (add-debug-sphere #t (bucket-id debug)  (-> (the-as process-drawable (process-by-ename actorName)) root trans) (meters radius) (static-rgba 0 #xff 0 #x40))
    )
  )
  (none)
)


;;This function moves a given actor to jaks current position, then prints a (move-actors) call in gk.exe
(defun move-to-jak ((arg0 string))
(format #t "move-actor code:  (move-actor ~a ~m ~m ~m)~%" arg0(-> (target-pos 0) x) (-> (target-pos 0) y) (-> (target-pos 0) z))
  (when (process-by-ename arg0)
    (set-vector!  (-> (-> (the process-drawable (process-by-ename arg0))root)trans) (-> (target-pos 0) x) (-> (target-pos 0) y) (-> (target-pos 0) z) 1.0)
    (if (type-type? (-> (process-by-ename arg0) type) crate)
    (begin
        (set! (-> (the crate (process-by-ename arg0)) base y) (-> (target-pos 0) y))
    )
    (none)
    )

     (if (type-type? (-> (process-by-ename arg0) type) money)
    (begin
        (set! (-> (the money (process-by-ename arg0)) base y) (-> (target-pos 0) y))
    )
    (none)
    )

     (if (type-type? (-> (process-by-ename arg0) type) fuel-cell)
    (begin
        (set! (-> (the fuel-cell (process-by-ename arg0)) base y) (-> (target-pos 0) y))
    )
    (none)
    )
  )
)

;; quick macro for setting vector xyz in meters, leaving w alone
(defmacro set-vector-meters! (dst x y z)
  `(set-vector! ,dst (meters ,x) (meters ,y) (meters ,z) (-> ,dst w))
  )

;; quick macro for constructing static vector with w=1
(defmacro static-vector-meters (x y z)
  `(new 'static 'vector :x (meters ,x) :y (meters ,y) :z (meters ,z) :w 1.0)
  )

;; prints vector xyz in meters
(defmacro print-vector-meters (vec &key (dst #t))
  `(format ,dst "~m ~m ~m~%" (-> ,vec x) (-> ,vec y) (-> ,vec z))
  )

;; takes a path-control and xyz values to offsets every node in the path by
(defmacro shift-path! (path x y z)
  `(let ((voff (static-vector-meters ,x ,y ,z)))
    (dotimes (idx (-> ,path num-cverts))
      (vector+! (-> ,path cverts idx) (-> ,path cverts idx) voff)
      )
    )
  )

;; prints all the nodes in a path in meters
(defmacro path-print-meters (path)
  `(dotimes (idx (-> ,path num-cverts))
    (print-vector-meters (-> ,path cverts idx))
    )
  )

;; prints the position (root trans) of a process-drawable
(defmacro pd-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~m ~m ~m~%" (-> vec x) (-> vec y) (-> vec z))
    (none)
    )
  )

;;This function moves an actor based on jaks position + an offset
(defun move-to-behind-jak ((arg0 string) (arg1 meters) (arg2 meters))
 (when (process-by-ename arg0)
    (set-vector!  (-> (-> (the process-drawable (process-by-ename arg0))root)trans) (-(-> (target-pos 0) x) (meters arg1)) (+ (-> (target-pos 0) y) (meters arg2)) (-(-> (target-pos 0) z)(meters arg1)) 1.0)
    (if (type-type? (-> (process-by-ename arg0) type) money)
    (begin
        (set! (-> (the money (process-by-ename arg0)) base y) (->  (target-pos 0) y) )
    )
    (none)
    )
    (if (type-type? (-> (process-by-ename arg0) type) fuel-cell)
    (begin
        (set! (-> (the fuel-cell (process-by-ename arg0)) base y) (->  (target-pos 0) y) )
    )
    (none)
    )
  )
)

;;This turns on play hints
(defun turnonplayhints ()
(set! (-> *setting-control* default play-hints) #t)
)

;;This turns off playhints
(defun turnoffplayhints()
(set! (-> *setting-control* default play-hints) #f)
)

;;This turns on collision render when called
(defun turnonCollisionmode()
  (set! *collision-renderer* #t)
  (logclear! *vu1-enable-user-menu* (vu1-renderer-mask tfrag trans-tfrag tie tie-near))
)

;;This turns off collision render when called
(defun turnoffCollisionmode()
  (set! *collision-renderer* #f)
  (logior! *vu1-enable-user-menu* (vu1-renderer-mask tfrag trans-tfrag tie tie-near))
)

;;This makes it thunder in the current level
(defun thunderTime()
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-village2)
  (set! (-> (level-get-target-inside *level*) mood) *village2-mood*)
)

;;This makes the current level dark when called
(defun DarkesetGlitchTime()
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-finalboss )
  (set! (-> (level-get-target-inside *level*) mood) *finalboss-mood*)
)

;;This needs fixed
(defun rainyTime()
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-swamp)
  (set! (-> (level-get-target-inside *level*) mood) *swamp-mood*)
)

;;This needs fixed
(defun snowingTime()
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-snow)
  (set! (-> (level-get-target-inside *level*) mood) *snow-mood*)
)

;;This makes the current levels weather the same as village1
(defun defaultWeatherTime()
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-village1)
  (set! (-> (level-get-target-inside *level*) mood) *village1-mood*)
)

;;This moves jak to a provided coordinate example call
;;(tp-jak 0.0 12.0 32.32)
(defun tp-jak ((arg0 float)(arg1 float)(arg2 float))
  (set! (-> (target-pos 0) x) (meters arg0))
  (set! (-> (target-pos 0) y) (meters arg1))
  (set! (-> (target-pos 0) z) (meters arg2))
)

;;This returns true or false depending on if jak is within a provided distance from an actor
(defun close? ((actor-ename string) (dist float))
  (and
    (process-by-ename actor-ename)
    (<=
      (vector-vector-distance
        (target-pos 0)
        (-> (the process-drawable (process-by-ename actor-ename)) root trans)
        )
      dist
      )
    )
  )


;; This returns true or false if jak is within a bubble defined by coordinates and width
(defun in-bubble? ((x float) (y float) (z float) (w float))
  (<=
    (vector-vector-distance
      (target-pos 0)
      (set-vector! (new-stack-vector0) x y z 1.0)
      )
    (/ w 2.0)
    )
  )

  (defun zero-volume? ()
  "Returns true if the volume of main music should be set to 0 This is a hack."
  (or (not (= *master-mode* 'game) )
  (= (-> (level-get-target-inside *level*)name) 'title)
  )
  )

(define *loaded-cell-pause* 0)

(defun mort-chicks-text ()
 ;;mort debugging
    (if *cheat-mode*
      (when (and
            (portal-mort-switch)

             (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Mort Chicken info ~%Chickens Saved: ~D ~%Chickens Following ~D~%Remaining Cells ~D~%"
                                     (get-saved-chicks)
                                     (get-current-chicks)
                                     *loaded-cell-pause*
                                     )
                      buf 15 (- 150 (* 8 4)) (font-color green) (font-flags shadow kerning)))
          )
    )
(none)
)
(defbehavior josh-suprise-sound-25 process ()
            (let ((current-timea (current-time)))
                (until (time-elapsed? current-timea (seconds 27))
                    (suspend)
                )
            (play-sound-file "custom_assets/jak1/SND/joshsuprise.mp3" (the int 200))
            )
  (none)
)

(defun mort-main-menu ()

    (if (and *in-mort-menu* *target*)
      (begin
      ;;If we arent in hub 3 warp there.
        (if (and  (!= (-> (level-get-target-inside *level*)name ) 'mort-title))
        (begin

         (send-event *target* 'continue (get-continue-by-name *game-info* "mort-title-start"))

            ;;We need to sleep for a tiny amount of time, so we dont spawn multiple process
            (let ((current-timea (current-time)))
             (until (time-elapsed? current-timea (seconds 0.2))
             (suspend)
             )
             )
             ;;This function sleeps for 27 seconds so it has to be in another process to not block this one
           (when (not (process-by-name "josh-suprise-sound-25" *active-pool*))  (process-spawn-function process josh-suprise-sound-25 :name "josh-suprise-sound-25"))
        )

          )

        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans y) (meters 1)))
          (set! (-> *target* root trans y) (meters 301))
          )
        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans x) (meters 0.0)))
          (set! (-> *target* root trans x) (meters 0.0))
          )
        (if (and  (= (-> (level-get-target-inside *level*)name ) 'mort-title) (!= (-> *target* root trans z) (meters 0.0)))
          (set! (-> *target* root trans z) (meters 0.0))
          )

        ;;if we arent in cam-eye switch to cam-eye
        (if (and (!= (-> (-> (the-as (pointer camera-slave) (-> *camera* child) ))state name) 'cam-eye))
          (begin
            (send-event *camera* 'change-state  cam-eye *dm-cam-mode-interpolation*)
          )
        )
        ;;do the invisible hacks
        (if (!=  (-> *target* draw status) (draw-status hidden))
          (begin
            (set! (-> *target* draw status) (draw-status hidden))
            (send-event *target* 'sidekick #f)
          )
        )
      )
      (none)
    )
  )

    (defun runs-every-frame-proc-func ()
    "this is ran in its own process called run-every-frame-proc"
    ;;This is a hack to run softlock prevention

    ;; (when (and (not (cpad-hold? 0 l3))(cpad-hold? 0 down))
    ;; (mort-chicks-text)
    ;; )
    ;; (if (not (= *master-mode* 'progress))
    ;; (set! *loaded-cell-pause* (get-loaded-cell-count))

    ;; )

    ;;This is a hack to try to patch a bug, remove if it messes up save/restoring
    (if (and *target* (= (-> *target* state name) 'target-warp-out))
    (reset-saved-chick-from-mem)
    )

    (when #t
    ;;(format #t "~A" (-> *target* state name))

      (if (and *target*
          (= (-> *target* state name) 'target-stance)
          (not (movie?))
          (!= (level-get-target-inside *level*) #f)
          (!= (-> (level-get-target-inside *level*)name) 'misty)
          (!= (-> (level-get-target-inside *level*)name) 'village1)
          (!= (-> (level-get-target-inside *level*)name) 'beach)
          (!= (-> (level-get-target-inside *level*)name) 'mort-title)
          (!= (-> (level-get-target-inside *level*)name) 'citadel)
          (!= (-> (level-get-target-inside *level*)name) 'finalboss)
          )
      (have-all-chicks-safe)
      )
      ;;
      ;; )

    ;;This is kind of a hack to start up during the opening cutscene
    (when (and (string= *currentSpoolName* "sidekick-human-intro-sequence-c") (>= *currentCutsceneFrame* 1649))
    (set! *in-mort-menu* #t)
                  (let ((current-timea (current-time)))
                    (until (time-elapsed? current-timea (seconds 0.55))
                    ;;(format #t "~S~%" "NOT ELAPSED")
                      (suspend)
                    )
              )
              (set-blackout-frames (seconds 25.3))
    (str-play-stop *currentSpoolName*)
    (set! (-> *art-control* active-stream) #f)

    )

    (when (and (string= *currentSpoolName* "finalbosscam-white-eco") (= *currentCutsceneFrame* 2))
    (move-samos-butts)
    )

    (when (and (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a") (= *currentCutsceneFrame* 2))
    (play-sound-file "custom_assets/jak1/SND/farts/fart1.mp3" (the int (-> *setting-control* default dialog-volume)))
    )
    (when (and (string= *currentSpoolName* "green-sagecage-outro-beat-boss-a") (= *currentCutsceneFrame* 250))
    (play-sound-file "custom_assets/jak1/SND/farts/vinefart.mp3" (the int (-> *setting-control* default dialog-volume)))
    )


   ;; (sound-manager)
    (when (run-mort-code?)
      ;;   (if (and (= (-> *flock-points* points 1 x) 0.0) (!= (-> *target* state name) 'target-warp-out) (!= (-> *target* state name) 'target-continue)(!= (-> *target* state name) 'target-warp-in))
      ;;   (init-chickens)
      ;; )


    (eco-manager) ;;checks constantly if we do or do not have eco, and what type, the gives effect or turns it off
    (none)

   )
     ;; This should be done as the last thing
      (find-best-master-mark)
      (mort-main-menu)


    )

      (none)
    )


(defun music-manager ()
(stop-main-music)
        ;; Some of the alt sounds only play if you stay in a level for a very long time, so its nice to give them a rare chance to get a spotlight
        (case (-> (level-get-target-inside *level*) name)
         (('mort-title)
          (play-main-music "custom_assets/jak1/SND/jak-chicken-theme.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('block-world)
         (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "custom_assets/jak1/SND/music-block-world2.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          (play-main-music "custom_assets/jak1/SND/music-block-world.mp3" (the int (* (-> *setting-control* default music-volume) 0.75))))
          )
         (('factory-cross 'chicks)
          (play-main-music "custom_assets/jak1/SND/music-factory-cross-chicks.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('holly-wood)
          (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "custom_assets/jak1/SND/music-holly-wood2.mp3" (the int (* (-> *setting-control* default music-volume) 0.75))) ;;get holly wood 1?
          (play-main-music "custom_assets/jak1/SND/music-holly-wood1.mp3" (the int (* (-> *setting-control* default music-volume) 0.75))) ;;get holly wood 1?
          )
         )
         (('monument)
          (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "custom_assets/jak1/SND/music-monument2.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          (play-main-music "custom_assets/jak1/SND/music-monument1.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
          ;;add alt theme? ITS SO GOOD YES
          )
         (('cathedral)
          (if (> (knuth-rand-int-range 0 15) (+ 8 5))
          (play-main-music "custom_assets/jak1/SND/music-cathedral2.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          (play-main-music "custom_assets/jak1/SND/music-cathedral1.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
          )
         (('pyramid)
          (play-main-music "custom_assets/jak1/SND/music-pyramid.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('ice-canyon 'cold-pipe)
         (if (> (knuth-rand-int-range 0 15) (+ 8 5))
                (play-main-music "custom_assets/jak1/SND/music-ice-canyon2.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)));;2?
                (play-main-music "custom_assets/jak1/SND/music-ice-canyon-cold-pipe.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)));;2?
         )
         )
         (('coins)
          (play-main-music "custom_assets/jak1/SND/music-coins.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('villa-cube)
           (play-main-music "custom_assets/jak1/SND/music-monument1.mp3" (the int (* (-> *setting-control* default music-volume) 0.75))) ;; monument and villa cuba share audio
          )
         (('ice-slide)
          (play-main-music "custom_assets/jak1/SND/music-ice-slide.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('islands)
          (play-main-music "custom_assets/jak1/SND/music-holly-wood1.mp3" (the int (* (-> *setting-control* default music-volume) 0.75))) ;; shares track with islands
          )
         (('glass-toe 'chem-fac)
          (play-main-music "custom_assets/jak1/SND/music-glass-towers-chemical-factory.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('space-brid)
          (play-main-music "custom_assets/jak1/SND/music-space-bridge.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('garden)
          (play-main-music "custom_assets/jak1/SND/music-block-man.mp3" (the int (* (-> *setting-control* default music-volume) 0.75))) ;;FIX
          )
         (('block-man)
          (play-main-music "custom_assets/jak1/SND/music-block-man.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
         (('cube-face)
          (play-main-music "custom_assets/jak1/SND/music-cube-face.mp3" (the int (* (-> *setting-control* default music-volume) 0.75)))
          )
          (else
          (play-main-music "" (the int (* (-> *setting-control* default music-volume) 0.75)))
          ;;(stop-main-music) This function is broken but playing a invalid sound does the same thing
          )
         )

(none))


(defbehavior music-manager-proc process ()
(music-manager)
(none)
)


(defun is-in-chem-fac-silo ()
(when  (= (-> (level-get-target-inside *level*)name ) 'chem-fac)
  (if (in-bubble? (meters 131.51) (meters 310.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 315.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 320.57) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 325.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 330.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 335.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 340.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
  (if (in-bubble? (meters 131.51) (meters 345.37) (meters 200.12) (meters 29.0))
    (return #t)
  )
)
  #f
)
(define *heard-chem-hint* #f)
(defun-extern music-manager none)
(defun play-chem-hint ()



(when (is-in-chem-fac-silo)
(if (not *heard-chem-hint*)
(begin
(set! *heard-chem-hint* #t)
(play-sound-file "custom_assets/jak1/SND/dax/daxter_for_zed.mp3" (the int (-> *setting-control* default dialog-volume)))
)
)




)
(none)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Jak Color functions
;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun draw-xyz ((jak target) (x float) (y float) (z float))
  (set! (-> jak draw color-mult x) x)
  (set! (-> jak draw color-mult y) y)
  (set! (-> jak draw color-mult z) z)
)
(defun draw-normal ((jak target))
  (draw-xyz jak 1.0 1.0 1.0)
)
(defun draw-white ((jak target))
  (draw-xyz jak 10.0 10.0 10.0)
)
(defun draw-black ((jak target))
  (draw-xyz jak 0.0 0.0 0.0)
)
(defun draw-red ((jak target))
  (draw-xyz jak 3.0 0.0 0.0)
)
(defun draw-green ((jak target))
  (draw-xyz jak 0.0 3.0 0.0)
)
(defun draw-blue ((jak target))
  (draw-xyz jak 0.0 0.0 3.0)
)
(defun draw-yellow ((jak target))
  (draw-xyz jak 3.0 3.0 0.0)
)
(defun draw-pink ((jak target))
  (draw-xyz jak 3.0 0.0 3.0)
)
(defun draw-light-blue ((jak target))
  (draw-xyz jak 0.0 3.0 3.0)
)

;; Helper functions for spawning orbs (used by orb placer in debug mode)

(defun spawn-money ((vec vector) (amount float) (bob? symbol))
  (let ((fax (new 'static 'fact-info)))
    (set! (-> fax pickup-type) (pickup-type money))
    (set! (-> fax pickup-amount) amount)
    (set! (-> fax pickup-spawn-amount) amount)
    (set! (-> fax fade-time) (the-as time-frame 0))

    (let ((proc (the money (ppointer->process (birth-pickup-at-point vec (pickup-type money) amount #t *active-pool* fax)))))
      (when bob?
        (set! (-> proc bob-amount) 1024.0)
        )
      (format 0 "spawned ~A~%" proc)
      ;; return handle to the orb
      (process->handle proc)
      )
    )
  )

(defun spawn-money-meters ((x float) (y float) (z float) (amount float) (bob? symbol))
  (let ((vec (new 'stack-no-clear 'vector)))
    (set-vector-meters! vec x y z)
    (spawn-money vec amount bob?)
    )
  )